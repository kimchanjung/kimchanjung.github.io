<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kimchanjung</title>
    <description>Developer KimChanJung's Blog</description>
    <link>https://kimchanjung.github.io//</link>
    <atom:link href="https://kimchanjung.github.io//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 29 Jul 2020 17:51:03 +0900</pubDate>
    <lastBuildDate>Wed, 29 Jul 2020 17:51:03 +0900</lastBuildDate>
    <generator>Jekyll v3.7.4</generator>
    
      <item>
        <title>프로그래머스 - 문자열 압축 [2020 KAKAO BLIND RECRUITMENT]</title>
        <description>카카오 블라인드 2020 문자열 압축 문제를 설명과 함께 풀이 합니다. 프로그래머스 - 문자열 압축 문제바로가기 문제유형 Brute-Force 문제 설명 주어진 문자열을 압축하는 문제 aabbaccc =&gt; 2a2ba3c 각 중복되는 문자열앞에 중복개수를 붙여준다. 단 1개짜리</description>
        <pubDate>Wed, 29 Jul 2020 16:00:00 +0900</pubDate>
        <link>https://kimchanjung.github.io//algorithm/2020/07/29/zip/</link>
        <guid isPermaLink="true">https://kimchanjung.github.io//algorithm/2020/07/29/zip/</guid>
        
        <category>algorithm</category>
        
        
        <category>algorithm</category>
        
      </item>
    
      <item>
        <title>프로그래머스 - 괄호변환 [2020 KAKAO BLIND RECRUITMENT]</title>
        <description>깔끔한 코드와 재귀로 프로그래머스 괄호변환 문제를 해석하고 풀이합니다. 프로그래머스 - 괄호변환 문제바로가기 문제유형 Stack 문제 설명 괄호를 확인하여 올바른 열고닫음의 짝수 괄호인지 확인하고 열고닫임이 맞지 않는 경우 변환하여 리턴하는 문제 stack을 이용한 괄호</description>
        <pubDate>Mon, 13 Jul 2020 16:00:00 +0900</pubDate>
        <link>https://kimchanjung.github.io//algorithm/2020/07/13/bracket/</link>
        <guid isPermaLink="true">https://kimchanjung.github.io//algorithm/2020/07/13/bracket/</guid>
        
        <category>algorithm</category>
        
        
        <category>algorithm</category>
        
      </item>
    
      <item>
        <title>[typescript] npm 모듈 import시 오류를 해결하는 방법(d.ts 파일 생성법)</title>
        <description>typescript npm 모듈 import시 오류의 원인과 해결하는 방법을 알아봅니다. Typescript에서 js npm 모듈 import시 오류를 해결하는 방법 typescript로 프로젝트를 할 때 npm에서 필요한 모듈들을 설치하고 import해서 사용하려고 할때 모듈 'module name'에 대한 선언</description>
        <pubDate>Sun, 05 Jul 2020 21:00:00 +0900</pubDate>
        <link>https://kimchanjung.github.io//programming/2020/07/05/typescipt-import-js-module-error/</link>
        <guid isPermaLink="true">https://kimchanjung.github.io//programming/2020/07/05/typescipt-import-js-module-error/</guid>
        
        <category>programming</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>[Spring Security] 스프링시큐리티 커스텀 필터의 구현(3)</title>
        <description>스프링시큐리티의 커스텀 필터를 생성하고 적용하는 방법을 예제코드와 함께 알아봅니다. Spring Security 커스텀 필터를 이용한 인증 구현 - 커스텀 필터의 구현(3) 본 포스팅은 스프링시큐리티의 전반적인 사용방법을 설명하는 포스팅은 아닙니다. 기본적인 동작구조와 별도의 인증을 도입할</description>
        <pubDate>Fri, 03 Jul 2020 14:00:00 +0900</pubDate>
        <link>https://kimchanjung.github.io//programming/2020/07/03/spring-security-03/</link>
        <guid isPermaLink="true">https://kimchanjung.github.io//programming/2020/07/03/spring-security-03/</guid>
        
        <category>programming</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>[Spring Security] 스프링시큐리티 설정값들의 역할과 설정방법(2)</title>
        <description>스프링시큐리티의 여러가지 설정값들의 역할과 설정방법을 상세히 알아봅니다. Spring Security 커스텀 필터를 이용한 인증 구현 - 스프링시큐리티 설정(2) 본 포스팅은 스프링시큐리티의 전반적인 사용방법을 설명하는 포스팅은 아닙니다. 기본적인 동작구조와 별도의 인증을 도입할 때 필요한 커스텀인증필터를</description>
        <pubDate>Thu, 02 Jul 2020 12:00:00 +0900</pubDate>
        <link>https://kimchanjung.github.io//programming/2020/07/02/spring-security-02/</link>
        <guid isPermaLink="true">https://kimchanjung.github.io//programming/2020/07/02/spring-security-02/</guid>
        
        <category>programming</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>[Spring Security] 스프링시큐리티 동작구조의 이해(1)</title>
        <description>스프링시큐리티의 기본적인 동작구조와 별도의 인증을 도입할 때 필요한 커스텀 필터를 작성하고 적용하는 방법을 알아봅니다” Spring Security 커스텀 필터를 이용한 인증 구현 - 스프링시큐리티 동작구조의 이해(1) 본 포스팅은 스프링시큐리티의 전반적인 사용방법을 설명하는 포스팅은 아닙니다.</description>
        <pubDate>Wed, 01 Jul 2020 01:00:00 +0900</pubDate>
        <link>https://kimchanjung.github.io//programming/2020/07/01/spring-security-01/</link>
        <guid isPermaLink="true">https://kimchanjung.github.io//programming/2020/07/01/spring-security-01/</guid>
        
        <category>programming</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>[Spring] JPA EntityListeners에서 @Autowired를 통한 의존성 주입이 미동작하는 문제 해결</title>
        <description>@EntityListeners로 지정한 클래스에 의존성이 필요한 경우 @autowired를 통한 의존성 주입이 동작하지 않는 문제가 있습니다 설명과 예제를 통하여 원인과 해결방법을 알아보도록 하겠습니다 JPA EntityListeners에서 @Autowired를 통한 의존성 주입이 미동작하는 문제 해결 JPA Entity 클래스에</description>
        <pubDate>Sun, 28 Jun 2020 20:00:00 +0900</pubDate>
        <link>https://kimchanjung.github.io//programming/2020/06/28/spring-jpa-antity-listner-autowired-not-working/</link>
        <guid isPermaLink="true">https://kimchanjung.github.io//programming/2020/06/28/spring-jpa-antity-listner-autowired-not-working/</guid>
        
        <category>programming</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>[React] 로딩처리용 spinner를 사용시 position 옵션 문제를 Portal을 사용해 해결하는 방법</title>
        <description>NPM react용 Spinner 모듈을 가져와 사용할 때 발생하는 position 옵션 문제를 Portal을 이용해 해결하고 깔끔한 방식으로 사용할 수 있는 방법을 알아봅니다 API호출시 보통 로딩을 처리하는 동안 Spinner를 표시해서 로딩처리를 사용자에게 알리는 용도로 많이</description>
        <pubDate>Fri, 26 Jun 2020 14:00:00 +0900</pubDate>
        <link>https://kimchanjung.github.io//programming/2020/06/26/react-spinner/</link>
        <guid isPermaLink="true">https://kimchanjung.github.io//programming/2020/06/26/react-spinner/</guid>
        
        <category>programming</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>[React] 페이지 이동시 스크롤을 상단으로 초기화 하는 방법(scroll top)</title>
        <description>React로 개발 하다보면 기본 매카니즘이 상태란 것 남아 있기 때문에 나는 분명 다른페이지로 이동 했는데도 새로 고침을 하였는데도 불구하고 이전의 스크롤위치로 페이지가 나타나는 현상이 있습니다. [React] 페이지 이동시 스크롤을 상단으로 초기화 하는 방법(scroll</description>
        <pubDate>Thu, 25 Jun 2020 16:00:00 +0900</pubDate>
        <link>https://kimchanjung.github.io//programming/2020/06/25/react-scroll-top/</link>
        <guid isPermaLink="true">https://kimchanjung.github.io//programming/2020/06/25/react-scroll-top/</guid>
        
        <category>programming</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>[React] react-router에서 인증 및 권한 Router(Private) 구현하기(권한별 routing)</title>
        <description>react-router의 url 권한을 체크하여 routing 이 가능하도록 하고 권한이 없으면 권한이 없다는 페이지로 redirect하는 방법을 알아보고자 합니다 react-router 에서 Private Router 구현하기(권한별 routing) 실무에서 페이지를 개발할 때 인증 및 부여된 권한 등급에 따라서</description>
        <pubDate>Wed, 24 Jun 2020 18:00:00 +0900</pubDate>
        <link>https://kimchanjung.github.io//programming/2020/06/24/react-router-private-router/</link>
        <guid isPermaLink="true">https://kimchanjung.github.io//programming/2020/06/24/react-router-private-router/</guid>
        
        <category>programming</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>[Gradle] node yarn 빌드 react 프로젝트를 gradle에 통합 포함하여 빌드하는 방법</title>
        <description>스프링 프로젝트를 빌드할 때 백엔드 API + 프론트엔드 구성의 프로젝트 빌드시 node yarn을 사용하여 빌드하는 프론트엔드 빌드를 Gradle 빌드에 포함하여 빌드하는 방법을 알아 봅니다. Yarn 빌드 React 프로젝트를 Spring 프로젝트 Gradle 빌드에 통합하여</description>
        <pubDate>Wed, 24 Jun 2020 14:00:00 +0900</pubDate>
        <link>https://kimchanjung.github.io//programming/2020/06/24/spring-gradle-build-with-front-end/</link>
        <guid isPermaLink="true">https://kimchanjung.github.io//programming/2020/06/24/spring-gradle-build-with-front-end/</guid>
        
        <category>programming</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>[React] Mobx의 async action(비동기 액션) 처리를 mobx-utils를 이용하여 가장 깔끔하게 구현하는 방법</title>
        <description>Mobx 공식 문서에 제공하는 async action(비동기 액션) 처리를 mobx-utils를 이용하여 더 깔끔한 처리방법을 살펴봅니다 Mobx의 async action(비동기 액션) 처리를 가장 깔끔하게 구현하는 방법 Mobx에서 상태를 수정하는 함수는 @action 데코레이터를 추가하여 상태를 변경합니다. api를</description>
        <pubDate>Wed, 24 Jun 2020 14:00:00 +0900</pubDate>
        <link>https://kimchanjung.github.io//programming/2020/06/24/react-mobx-async-action/</link>
        <guid isPermaLink="true">https://kimchanjung.github.io//programming/2020/06/24/react-mobx-async-action/</guid>
        
        <category>programming</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>[React] Material-UI에서 withStyle 사용시 1개 이상 여러개 style을 함께 사용하는 방법(multiple)</title>
        <description>Material-UI에서 withStyle 함수로 JSS 스타일을 적용할때 1개 이상 여러개(multiple) 스타일을 같이 사용하는 방법을 알아봅니다. React Material-UI에서 withStyle 사용시 1개 이상 style을 함께 사용하는 방법 Material-UI사용시 스타일(css)를 적용하는 방법은 JSS(javascript 객체방식으로 style을 정의)로 정의한</description>
        <pubDate>Wed, 24 Jun 2020 14:00:00 +0900</pubDate>
        <link>https://kimchanjung.github.io//programming/2020/06/24/react-material-ui-combine-with-style/</link>
        <guid isPermaLink="true">https://kimchanjung.github.io//programming/2020/06/24/react-material-ui-combine-with-style/</guid>
        
        <category>programming</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>[React] Mobx 와 react-router 사용시 history를 이용한 url 이동이 미동작 않는 경우 해결방법</title>
        <description>Ract에서 mobx와 react-router를 함께 사용할 시 history를 이용한 페이지 이동이 미동작 문제점을 해결합니다. Mobx 와 react-router 사용시 history를 이용한 url 이동이 동작하지 않는 경우 해결방법 일반적으로 React에서 react-router 사용시 링크를 설정하는 경우 &lt;Link</description>
        <pubDate>Mon, 22 Jun 2020 12:00:00 +0900</pubDate>
        <link>https://kimchanjung.github.io//programming/2020/06/22/react-router-history-with-mobx-problem/</link>
        <guid isPermaLink="true">https://kimchanjung.github.io//programming/2020/06/22/react-router-history-with-mobx-problem/</guid>
        
        <category>programming</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>[React] mobx-react-form 사용시 material-ui datepicker의 date format이 미동작 해결 방법</title>
        <description>Mobx사용시 form validation 라이브러리로 mobx-react-form을 사용했을 때 material-ui datepicker의 날짜를 변경한 후 화면에 표시되는 날짜는 설정한 date format 대로 표시가 되지만 실제 값은 적용되어 있지 않은 미동작 문제를 해결하는 방법을 알아봅니다 mobx-react-form 사용시</description>
        <pubDate>Mon, 22 Jun 2020 12:00:00 +0900</pubDate>
        <link>https://kimchanjung.github.io//programming/2020/06/22/react-material-ui-datepicker-binding/</link>
        <guid isPermaLink="true">https://kimchanjung.github.io//programming/2020/06/22/react-material-ui-datepicker-binding/</guid>
        
        <category>programming</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>[React] react-router 에서 트리구조의 부모자식 URL 페이지를 구성하는 방법</title>
        <description>react-router를 이용해서 아래와 같은 부모자식 트리구조 URL 구조가 있을 때 구현 하는 방법을 알아 봅니다 React-router 에서 트리구조의 부모자식 URL 페이지를 구성하는 방법 react-router를 이용해서 아래와 같은 부모자식 URL 구조가 있을 때 구현</description>
        <pubDate>Mon, 22 Jun 2020 09:00:00 +0900</pubDate>
        <link>https://kimchanjung.github.io//programming/2020/06/22/react-router-overlab-routing/</link>
        <guid isPermaLink="true">https://kimchanjung.github.io//programming/2020/06/22/react-router-overlab-routing/</guid>
        
        <category>programming</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>방문자 패턴 - Visitor Pattern [디자인패턴/코틀린/kotlin]</title>
        <description>방문자 패턴은 정의가 가장 어려운 패턴 중에 하나인 듯 하다 수많은 블로그의 방문자 패턴을 정의하는 문구를 아무리 봐도 이해가 가장 어려웠다 방문자 패턴 - Visitor Pattern 방문자 패턴의 정의 패턴의 정의가 가장 어려운</description>
        <pubDate>Fri, 29 May 2020 18:00:00 +0900</pubDate>
        <link>https://kimchanjung.github.io//design-pattern/2020/05/29/visitor-pattern/</link>
        <guid isPermaLink="true">https://kimchanjung.github.io//design-pattern/2020/05/29/visitor-pattern/</guid>
        
        <category>design-pattern</category>
        
        
        <category>design-pattern</category>
        
      </item>
    
      <item>
        <title>템플릿 메소드 패턴 - Template Method Pattern [디자인패턴/코틀린/kotlin]</title>
        <description>템플릿 메소드 패턴 전체적으로는 동일하지만 부분적으로 다른 경우 중복을 최소화 하는 패턴 동일한 기능을 상위 클래스에 정의하고 부분적으로 다른부분은 서브클래스에 정의하여 사용한다 템플릿 메소드 패턴 - Template Method Pattern 템플릿 메소드 패턴 이란</description>
        <pubDate>Thu, 28 May 2020 16:00:00 +0900</pubDate>
        <link>https://kimchanjung.github.io//design-pattern/2020/05/28/template-method-pattern/</link>
        <guid isPermaLink="true">https://kimchanjung.github.io//design-pattern/2020/05/28/template-method-pattern/</guid>
        
        <category>design-pattern</category>
        
        
        <category>design-pattern</category>
        
      </item>
    
      <item>
        <title>전략 패턴 - Strategy Pattern [디자인패턴/코틀린/kotlin]</title>
        <description>전략 패턴은 알고리즘 및 로직을 따로 정의하여 필요에 의해 사용 또는 교체 할 수 있는 패턴 전략 패턴 - Strategy Pattern 전략 패턴 이란 알고리즘 및 로직을 따로 정의하여 필요에 의해 사용 또는</description>
        <pubDate>Thu, 28 May 2020 04:00:00 +0900</pubDate>
        <link>https://kimchanjung.github.io//design-pattern/2020/05/28/strategy-pattern/</link>
        <guid isPermaLink="true">https://kimchanjung.github.io//design-pattern/2020/05/28/strategy-pattern/</guid>
        
        <category>design-pattern</category>
        
        
        <category>design-pattern</category>
        
      </item>
    
      <item>
        <title>상태 패턴 - State Pattern [디자인패턴/코틀린/kotlin]</title>
        <description>상태 패턴은 객체가 상태에 따른 행위를 직접 구현하지 않고 상태와 행위를 구현한 별개의 상태객체에게 위임하는 패턴 상태 패턴 - State Pattern 상태 패턴 이란 객체가 상태에 따른 행위를 직접 구현하지 않고 상태와 행위를</description>
        <pubDate>Tue, 26 May 2020 18:00:00 +0900</pubDate>
        <link>https://kimchanjung.github.io//design-pattern/2020/05/26/state-pattern/</link>
        <guid isPermaLink="true">https://kimchanjung.github.io//design-pattern/2020/05/26/state-pattern/</guid>
        
        <category>design-pattern</category>
        
        
        <category>design-pattern</category>
        
      </item>
    
      <item>
        <title>싱글톤 패턴 - Singleton Pattern [디자인패턴/코틀린/kotlin]</title>
        <description>싱글톤 패턴은 매번 새로운 객체를 생성하지 않고 오직 하나의 객체만 생성하어 사용하려고 할때 사용한다. 싱글톤 패턴 - Singleton Pattern 싱글톤 패턴 이란 매번 새로운 객체를 생성하지 않고 오직 하나의 객체만 생성하어 사용하려고 할때</description>
        <pubDate>Mon, 25 May 2020 09:00:00 +0900</pubDate>
        <link>https://kimchanjung.github.io//design-pattern/2020/05/25/singleton-pattern/</link>
        <guid isPermaLink="true">https://kimchanjung.github.io//design-pattern/2020/05/25/singleton-pattern/</guid>
        
        <category>design-pattern</category>
        
        
        <category>design-pattern</category>
        
      </item>
    
      <item>
        <title>프록시 패턴 - Proxy Pattern [디자인패턴/코틀린/kotlin]</title>
        <description>프록시 패턴은 실제객체를 대신하는 객체가 로직의 흐름을 제어하여 실제 객체를 조작하는 패턴 프록시 패턴 - Proxy Pattern 프록시 패턴 이란 실제객체를 대신하는 객체가 로직의 흐름을 제어하여 실제 객체를 조작하는 패턴 장점 원래 객체의</description>
        <pubDate>Sun, 24 May 2020 09:00:00 +0900</pubDate>
        <link>https://kimchanjung.github.io//design-pattern/2020/05/24/proxy-pattern/</link>
        <guid isPermaLink="true">https://kimchanjung.github.io//design-pattern/2020/05/24/proxy-pattern/</guid>
        
        <category>design-pattern</category>
        
        
        <category>design-pattern</category>
        
      </item>
    
      <item>
        <title>옵저버 패턴 - Observer Pattern [디자인패턴/코틀린/kotlin]</title>
        <description>옵저버 패턴은 그야 말로 발행/구독 모델 이라고 생각하면 쉽다. spring 의 ApplicationEvent 이용한 이벤트 발행/구독이나 javascript onClick 같은 이벤트 리스너를 사용한다거나 크게는 aws sns/sqs 같은 것들도 발생/구독 모델이다. 옵저버 패턴 - Observer Pattern</description>
        <pubDate>Sat, 23 May 2020 18:00:00 +0900</pubDate>
        <link>https://kimchanjung.github.io//design-pattern/2020/05/23/observer-pattern/</link>
        <guid isPermaLink="true">https://kimchanjung.github.io//design-pattern/2020/05/23/observer-pattern/</guid>
        
        <category>design-pattern</category>
        
        
        <category>design-pattern</category>
        
      </item>
    
      <item>
        <title>플라이웨이트 패턴 - Flyweight Pattern [디자인패턴/코틀린/kotlin]</title>
        <description>플라이웨이트 패턴은 공통으로 사용하는 클래스를 생성하는 팩토리클래스를 만들고 필요한 클래스의 인스턴스가 없는 경우 인스턴스를 새로 생성하고 이미 있는 경우는 생성해둔 인스턴스를 리턴해서 1개만 생성하여 공유해서 사용할 수 있도록 제공하는 패턴 플라이웨이트 패턴 -</description>
        <pubDate>Fri, 22 May 2020 09:00:00 +0900</pubDate>
        <link>https://kimchanjung.github.io//design-pattern/2020/05/22/flyweight-pattern/</link>
        <guid isPermaLink="true">https://kimchanjung.github.io//design-pattern/2020/05/22/flyweight-pattern/</guid>
        
        <category>design-pattern</category>
        
        
        <category>design-pattern</category>
        
      </item>
    
      <item>
        <title>팩토리 메소드 패턴 - Factory Method Pattern [디자인패턴/코틀린/kotlin]</title>
        <description>팩토리 메소드 패턴 객체 생성을 직접 하지 않고 객체를 생성/제공하는 클래스를 사용하여 획득하는 패턴 팩토리 메소드 패턴 - Factory Method Pattern 팩토리 메소드 패턴 이란 객체 생성을 직접 하지 않고 객체를 생성/제공하는 클래스를</description>
        <pubDate>Thu, 21 May 2020 09:00:00 +0900</pubDate>
        <link>https://kimchanjung.github.io//design-pattern/2020/05/21/factory-method-pattern/</link>
        <guid isPermaLink="true">https://kimchanjung.github.io//design-pattern/2020/05/21/factory-method-pattern/</guid>
        
        <category>design-pattern</category>
        
        
        <category>design-pattern</category>
        
      </item>
    
      <item>
        <title>퍼사드 패턴 - Facade Pattern [디자인패턴/코틀린/kotlin]</title>
        <description>퍼사드 패턴은 아마도 우리가 프로그래밍 하면서 자연스럽게 사용되어지는 패턴중에 가장 흔한 패턴이 아닌가 싶다. 퍼사드 패턴 - Facade Pattern 퍼사드 패턴이란 일련의 복잡한 로직을 간추려 별도의 클래스로 만들어 제공한다. 퍼사드 패턴은 아마도 우리가</description>
        <pubDate>Wed, 20 May 2020 09:00:00 +0900</pubDate>
        <link>https://kimchanjung.github.io//design-pattern/2020/05/20/facade-pattern/</link>
        <guid isPermaLink="true">https://kimchanjung.github.io//design-pattern/2020/05/20/facade-pattern/</guid>
        
        <category>design-pattern</category>
        
        
        <category>design-pattern</category>
        
      </item>
    
      <item>
        <title>데코레이터 패턴 - Decorator Pattern [디자인패턴/코틀린/kotlin]</title>
        <description>데코레이터 패턴은 특정 클래스의 기본기능에 추가기능을 기존 클래스를 수정하지 않고 패턴을 통하여 덧 붙이고 싶을 때 사용한다. 데코레이터 패턴 - Decorator Pattern 데코레이터 패턴이란 데코레이터 패턴은 특정 클래스의 기본기능에 추가기능을 기존 클래스를 수정하지</description>
        <pubDate>Tue, 19 May 2020 09:00:00 +0900</pubDate>
        <link>https://kimchanjung.github.io//design-pattern/2020/05/19/decorator-pattern/</link>
        <guid isPermaLink="true">https://kimchanjung.github.io//design-pattern/2020/05/19/decorator-pattern/</guid>
        
        <category>design-pattern</category>
        
        
        <category>design-pattern</category>
        
      </item>
    
      <item>
        <title>컴포지트 패턴 - Composite Pattern [디자인패턴/코틀린/kotlin]</title>
        <description>컴포지트 패턴은 하나 또는 하나이상의 객체이거나 상관없이 하나의 객체처럼 다룰 수 있게 해주는 패턴 컴포지트 패턴 - Composite Pattern 컴포지트 패턴이란 하나 또는 하나이상의 객체이거나 상관없이 하나의 객체처럼 다룰 수 있게 해주는 패턴</description>
        <pubDate>Mon, 18 May 2020 09:00:00 +0900</pubDate>
        <link>https://kimchanjung.github.io//design-pattern/2020/05/18/composite-pattern/</link>
        <guid isPermaLink="true">https://kimchanjung.github.io//design-pattern/2020/05/18/composite-pattern/</guid>
        
        <category>design-pattern</category>
        
        
        <category>design-pattern</category>
        
      </item>
    
      <item>
        <title>커맨드 패턴 - Command Pattern [디자인패턴/코틀린/kotlin]</title>
        <description>커맨드 패턴은 각각 형태가 다른 메소드를 추상화하여 클라이언트가 사용할 수 있도록 하는 패턴 커맨드 패턴 - Command Pattern 커맨드 패턴이란 커맨드 패턴은 각각 형태가 다른 메소드를 추상화하여 클라이언트가 사용할 수 있도록 하는 패턴</description>
        <pubDate>Sun, 17 May 2020 09:00:00 +0900</pubDate>
        <link>https://kimchanjung.github.io//design-pattern/2020/05/17/command-pattern/</link>
        <guid isPermaLink="true">https://kimchanjung.github.io//design-pattern/2020/05/17/command-pattern/</guid>
        
        <category>design-pattern</category>
        
        
        <category>design-pattern</category>
        
      </item>
    
      <item>
        <title>책임 연쇄 패턴 - Chain Of Reponsibility Pattern [디자인패턴/코틀린/kotlin]</title>
        <description>요청을 처리를 하나이상의 체인형태로 구성된 객체에게 위임하고 요청을 처리할 수 있는 객체를 만날 때까지 다음 객체로 처리를 위임하는 패턴 책임 연쇄 패턴 - Chain Of Reponsibility Pattern 책임 연쇄 패턴이란 요청을 처리를 하나이상의</description>
        <pubDate>Sat, 16 May 2020 09:00:00 +0900</pubDate>
        <link>https://kimchanjung.github.io//design-pattern/2020/05/16/chain-of-reponsibility-pattern/</link>
        <guid isPermaLink="true">https://kimchanjung.github.io//design-pattern/2020/05/16/chain-of-reponsibility-pattern/</guid>
        
        <category>design-pattern</category>
        
        
        <category>design-pattern</category>
        
      </item>
    
      <item>
        <title>어댑터 패턴 - Adapter Pattern [디자인패턴/코틀린/kotlin]</title>
        <description>사용자는 어댑터 패턴의 인터페이스를 사용함으로써 각각 구현체의 세부로직과 변경에 관계없이 일관성있는 사용이 가능하다. 어댑터 패턴 - Adapter Pattern 어댑터 패턴이란 사용자는 인터페이스를 사용함으로써 각각 구현체의 세부로직과 변경에 관계없이 일관성있는 사용이 가능하다. 현실에서 가장</description>
        <pubDate>Fri, 15 May 2020 09:00:00 +0900</pubDate>
        <link>https://kimchanjung.github.io//design-pattern/2020/05/15/adapter-pattern/</link>
        <guid isPermaLink="true">https://kimchanjung.github.io//design-pattern/2020/05/15/adapter-pattern/</guid>
        
        <category>design-pattern</category>
        
        
        <category>design-pattern</category>
        
      </item>
    
      <item>
        <title>추상팩토리 패턴 - Abstract Factory Pattern [디자인패턴/코틀린/kotlin]</title>
        <description>추상팩토리 패턴은 어떤 연관된 클래스들을 팩토리를 통하여 일관성 있게 객체생성이 가능하도록 그룹으로 묶어 제공하고 변경도 유연하도록 제공한다. 추상팩토리 패턴 - Abstract Factory Pattern 추상팩토리 패턴이란 추상팩토리 패턴은 어떤 연관된 클래스들을 팩토리를 통하여 일관성</description>
        <pubDate>Thu, 14 May 2020 09:00:00 +0900</pubDate>
        <link>https://kimchanjung.github.io//design-pattern/2020/05/14/abstract-factory-pattern/</link>
        <guid isPermaLink="true">https://kimchanjung.github.io//design-pattern/2020/05/14/abstract-factory-pattern/</guid>
        
        <category>design-pattern</category>
        
        
        <category>design-pattern</category>
        
      </item>
    
      <item>
        <title>[Mobx] React 에서 Mobx 사용기</title>
        <description>react와 mobx그리고 material-ui를 이용한 개발기와 예제코드를 통한 mobx vs react 차이점 비교 및 atomic design을 통한 프로젝트구조 react 서드파티 라이브러리 리뷰정보등을 알아봅니다. React에서 Mobx 경험기 (Redux와 비교기) 안녕하세요 딜리버리플랫폼팀 김찬정입니다. 이 글의 목적</description>
        <pubDate>Fri, 08 May 2020 00:00:00 +0900</pubDate>
        <link>https://kimchanjung.github.io//tech/2020/05/08/react-mobx/</link>
        <guid isPermaLink="true">https://kimchanjung.github.io//tech/2020/05/08/react-mobx/</guid>
        
        <category>tech</category>
        
        
        <category>tech</category>
        
      </item>
    
      <item>
        <title>[Socket.io][websocket] 실시간 서비스 경험기(배달운영시스템 BROS1.0)</title>
        <description>배달의민족 배민라이더스의 배달처리시스템 개발기와 socket.io(websocket)를 이용한 실시간 시스템 구현 방법을 자세히 알아 봅니다. 경험기 들어가기 앞서 이 글은 신기술 사용기 또는 소개가 아닌 실시간 서비스 즉 배민라이더스 BROS 1.0 을 개발 하면서 겪어왔던</description>
        <pubDate>Fri, 08 May 2020 00:00:00 +0900</pubDate>
        <link>https://kimchanjung.github.io//tech/2020/05/08/real-time-service/</link>
        <guid isPermaLink="true">https://kimchanjung.github.io//tech/2020/05/08/real-time-service/</guid>
        
        <category>tech</category>
        
        
        <category>tech</category>
        
      </item>
    
      <item>
        <title>주식가격 (42584) - 프로그래머스 [코테][알고리즘]</title>
        <description>프로그래머스 programers 주식가격 (42584)문제의 풀이와 해설을 합니다. [프로그래머스] 코딩테스트 연습 &gt; 스택/큐 &gt; 주식가격 (42584) 문제바로가기 이중 for 문을 사용한 풀이법 뿐이라 stack을 사용한 방법으로 해결, 시간 복잡도가 훨씬 줄어드는 방법. 문제 조건</description>
        <pubDate>Fri, 08 May 2020 00:00:00 +0900</pubDate>
        <link>https://kimchanjung.github.io//algorithm/2020/05/08/stock-prices-42584/</link>
        <guid isPermaLink="true">https://kimchanjung.github.io//algorithm/2020/05/08/stock-prices-42584/</guid>
        
        <category>algorithm</category>
        
        
        <category>algorithm</category>
        
      </item>
    
      <item>
        <title>등굣길 (42898) - 프로그래머스 [코테][알고리즘]</title>
        <description>프로그래머스 programers 등굣길 (42898)문제의 풀이와 해설을 합니다. [프로그래머스] 코딩테스트 연습 &gt; 동적계획법(Dynamic Programming) &gt; 등굣길 (9305) 문제바로가기 이 문제의 핵심은 도달 가능한 지점의 개수 = 왼쪽개수 + 위쪽개수 가 핵심 1(1,1) 1(1,2) 1(2,1)</description>
        <pubDate>Fri, 08 May 2020 00:00:00 +0900</pubDate>
        <link>https://kimchanjung.github.io//algorithm/2020/05/08/way-to-school-42898/</link>
        <guid isPermaLink="true">https://kimchanjung.github.io//algorithm/2020/05/08/way-to-school-42898/</guid>
        
        <category>algorithm</category>
        
        
        <category>algorithm</category>
        
      </item>
    
      <item>
        <title>정수삼각형 (43105) - 프로그래머스 [코테][알고리즘]</title>
        <description>프로그래머스 programers 정수삼각형 (43105)문제의 풀이와 해설을 합니다. [프로그래머스] 코딩테스트 연습 &gt; 동적계획법(Dynamic Programming) &gt; 정수 삼각형 (43105) 문제바로가기 트리탐색의 후위순회를 예를 들어 설명하면 1 (1+3 = 4) 2 3 탐색 순서는 2 -&gt;</description>
        <pubDate>Fri, 08 May 2020 00:00:00 +0900</pubDate>
        <link>https://kimchanjung.github.io//algorithm/2020/05/08/integer-triangle-43105/</link>
        <guid isPermaLink="true">https://kimchanjung.github.io//algorithm/2020/05/08/integer-triangle-43105/</guid>
        
        <category>algorithm</category>
        
        
        <category>algorithm</category>
        
      </item>
    
      <item>
        <title>타일장식물 (43104) - 프로그래머스 [코테][알고리즘]</title>
        <description>프로그래머스 programers 타일장식물 (43104)문제의 풀이와 해설을 합니다. [프로그래머스] 코딩테스트 연습 &gt; 동적계획법(Dynamic Programming) &gt; 타일장식물 (43104) 문제바로가기 이문제는 피보나치 수열 문제 | | 3 | | 5 |1| 2 | | |1| |</description>
        <pubDate>Fri, 08 May 2020 00:00:00 +0900</pubDate>
        <link>https://kimchanjung.github.io//algorithm/2020/05/08/tile-deco-43104/</link>
        <guid isPermaLink="true">https://kimchanjung.github.io//algorithm/2020/05/08/tile-deco-43104/</guid>
        
        <category>algorithm</category>
        
        
        <category>algorithm</category>
        
      </item>
    
      <item>
        <title>네트워크 (43162) - 프로그래머스 [코테][알고리즘]</title>
        <description>프로그래머스 programers 네트워크 (43162) 문제의 풀이와 해설을 합니다. [프로그래머스] 코딩테스트 연습 &gt; 깊이/너비 우선 탐색(DFS/BFS) &gt; 네트워크 (43162) 이 문제는 서로연결된 그래프 그룹이 몇개 인지 찾는 문제 문제바로가기 TEST CASE 1 1 /</description>
        <pubDate>Fri, 08 May 2020 00:00:00 +0900</pubDate>
        <link>https://kimchanjung.github.io//algorithm/2020/05/08/network-43162/</link>
        <guid isPermaLink="true">https://kimchanjung.github.io//algorithm/2020/05/08/network-43162/</guid>
        
        <category>algorithm</category>
        
        
        <category>algorithm</category>
        
      </item>
    
      <item>
        <title>Coin Change  - LeetCode [코테/알고리즘]</title>
        <description>리트코드 LeetCode Coin Change문제의 풀이와 해설을 합니다. [LeetCode] LeetCode - Coin Change 문제바로가기 문제설명 1원, 2원, 5원 짜리 동전을 가지고 있는 경우 11원을 만드는 경우 최소 동전의 개수를 구하는 문제 주어진 동전의 종류</description>
        <pubDate>Fri, 08 May 2020 00:00:00 +0900</pubDate>
        <link>https://kimchanjung.github.io//algorithm/2020/05/08/Coin-Change/</link>
        <guid isPermaLink="true">https://kimchanjung.github.io//algorithm/2020/05/08/Coin-Change/</guid>
        
        <category>algorithm</category>
        
        
        <category>algorithm</category>
        
      </item>
    
      <item>
        <title>Longest Substring Without Repeating Characters - LeetCode [코테/알고리즘]</title>
        <description>코테 코딩테스트 알고리즘 리트코드 LeetCode Longest Substring Without Repeating Characters 문제의 풀이와 해설을 합니다 문제바로가기 이 문제는 주어진 문자열에 중복이 없는 부분 문자열의 길이를 찾는 문제 abcabcbb =&gt; abc bbbbb =&gt; b pwwkew</description>
        <pubDate>Fri, 08 May 2020 00:00:00 +0900</pubDate>
        <link>https://kimchanjung.github.io//algorithm/2020/05/08/Longest-Substring-Without-Repeating-Characters-copy/</link>
        <guid isPermaLink="true">https://kimchanjung.github.io//algorithm/2020/05/08/Longest-Substring-Without-Repeating-Characters-copy/</guid>
        
        <category>algorithm</category>
        
        
        <category>algorithm</category>
        
      </item>
    
      <item>
        <title>Sherlock and anagrams - hackerank [코테/알고리즘]</title>
        <description>해커랭크 hackerank Sherlock and anagrams 문제의 풀이와 해설을 합니다. 특정 문자열의 개별 문자를 쌍으로 구성하는 경우 가능한 케이스의 개수를 찾는 문제 문제바로가기 문제 조건 주어진 문자열 자체의 순서는 변경할 수 없다 “abcd” -&gt;</description>
        <pubDate>Fri, 08 May 2020 00:00:00 +0900</pubDate>
        <link>https://kimchanjung.github.io//algorithm/2020/05/08/sherlock-and-anagrams/</link>
        <guid isPermaLink="true">https://kimchanjung.github.io//algorithm/2020/05/08/sherlock-and-anagrams/</guid>
        
        <category>algorithm</category>
        
        
        <category>algorithm</category>
        
      </item>
    
      <item>
        <title>[마이크로서비스] 스프링 마이크로서비스 요약 정리 (spring microservice, msa)</title>
        <description>스프링마이크로서비스의 책내용중 마이크로서비스를 개발함에 있어 가장 중요한 개념과 원칙들 설계방법 부분을 예제 와 함께 정리 [마이크로서비스] 스프링 마이크로서비스 정리 스프링 마이크로서비스 책 내용을 모두 요약 한 것이 아니라 개인 적으로 중요하다고 생각되는 개념만</description>
        <pubDate>Wed, 06 May 2020 00:00:00 +0900</pubDate>
        <link>https://kimchanjung.github.io//tech/2020/05/06/spring-microservice-summary/</link>
        <guid isPermaLink="true">https://kimchanjung.github.io//tech/2020/05/06/spring-microservice-summary/</guid>
        
        <category>tech</category>
        
        
        <category>tech</category>
        
      </item>
    
      <item>
        <title>코틀린 기본 문법 요약 정리 강좌 - [kotlin/cheat sheet]</title>
        <description>코틀린의 기본문법을 치트형식의 예제코드와 설명을 포함한 깔끔하게 요약정리한 문법정리입니다. 코틀린 기본 문법 kotlin 기본 문법을 간략하게 파악 해보기 위한 요약 정리 입니다. kotlin 문법의 모든 내용을 다루지는 않지만 간략하게 훝어 보는 용도로 포스팅합니다.</description>
        <pubDate>Wed, 06 May 2020 00:00:00 +0900</pubDate>
        <link>https://kimchanjung.github.io//programming/2020/05/06/kotlin-basic-syntax-summary/</link>
        <guid isPermaLink="true">https://kimchanjung.github.io//programming/2020/05/06/kotlin-basic-syntax-summary/</guid>
        
        <category>programming</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>JAVA - 자료구조, Collection 별 특징 정리</title>
        <description>JAVA Collection별 특징과 시간 메소드별 시간 복잡도를 일목요연하게 정리한 내용입니다. JAVA - 자료구조, Collection 별 특징 정리 Collection 특징 구분 구분 종류 중복허용 순서 존재 정렬여부 Thread-safe LIST ArrayList LinkedList Vector Yes YesYes</description>
        <pubDate>Wed, 15 Jan 2020 00:00:00 +0900</pubDate>
        <link>https://kimchanjung.github.io//etc/2020/01/15/java-collection/</link>
        <guid isPermaLink="true">https://kimchanjung.github.io//etc/2020/01/15/java-collection/</guid>
        
        <category>etc</category>
        
        
        <category>etc</category>
        
      </item>
    
      <item>
        <title>실시간 메시징 서버(socket.io)</title>
        <description>배달의민족 배민라이더스의 실시간 배달처리 시스템을 위한 실시간 메시징 서버(socket.io)개발 프로젝트의 소개입니다. 실시간 메시징 서버(socket.io) 멀티플랫폼(web/ios/android)을 지원하는 실시간 메시징 서버 [그림 1] 메인화면 관련 기술블로그 실시간 서비스 경험기(배달운영시스템) 프로젝트 기간 2015.08 ~ 2016.08 프로젝트</description>
        <pubDate>Sat, 04 Jan 2020 11:00:00 +0900</pubDate>
        <link>https://kimchanjung.github.io//projects/2020/01/04/socket-io-server/</link>
        <guid isPermaLink="true">https://kimchanjung.github.io//projects/2020/01/04/socket-io-server/</guid>
        
        <category>projects</category>
        
        
        <category>projects</category>
        
      </item>
    
      <item>
        <title>배민라이더스운영시스템(BROS 1.0)</title>
        <description>배달의민족 배민라이더의 배민라이더스운영시스템(BROS 1.0) 프로젝트 소개입니다. 배민라이더스운영시스템(BROS 1.0) 배달접수와 실시간 배달처리 현황 및 라이더 관제기능을 지원하는 종합 운영 시스템 [그림 1] 메인화면 관련 기술블로그 실시간 서비스 경험기(배달운영시스템) 프로젝트 기간 2015.02 ~ 2016.08 프로젝트</description>
        <pubDate>Fri, 03 Jan 2020 10:00:00 +0900</pubDate>
        <link>https://kimchanjung.github.io//projects/2020/01/03/bros-v1/</link>
        <guid isPermaLink="true">https://kimchanjung.github.io//projects/2020/01/03/bros-v1/</guid>
        
        <category>projects</category>
        
        
        <category>projects</category>
        
      </item>
    
      <item>
        <title>라이더운영시스템</title>
        <description>배달의민족 배민라이더스의 라이더운영시스템 프로젝트의 소개 라이더운영시스템 기존 배민라이더운영시스템에서 라이더관련 부분을 분리하여 MSA로 구성한 라이더관리 전용 시스템 [그림 1] 메인화면 관련 기술블로그 React에서 Mobx 경험기 (Redux와 비교기) [마이크로서비스] 스프링 마이크로서비스 정리 (spring microservice, msa)</description>
        <pubDate>Thu, 02 Jan 2020 09:00:00 +0900</pubDate>
        <link>https://kimchanjung.github.io//projects/2020/01/02/brms/</link>
        <guid isPermaLink="true">https://kimchanjung.github.io//projects/2020/01/02/brms/</guid>
        
        <category>projects</category>
        
        
        <category>projects</category>
        
      </item>
    
      <item>
        <title>배민라이더스운영시스템(BROS 2.0)</title>
        <description>배달의민족 배민라이더스의 배민라이더스운영시스템(BROS 2.0) 프로젝트 소개입니다. 배민라이더스운영시스템(BROS 2.0) 배민라이더스의 업무처리 및 관리를 위한 메인 시스템 대부분 배민라이더스운영시스템을 운영 하고 신규 기능을 개발한는 것이 주 업무 [그림 1] 메인화면 프로젝트 기간 2016.02 ~ 2019.01</description>
        <pubDate>Wed, 01 Jan 2020 08:00:00 +0900</pubDate>
        <link>https://kimchanjung.github.io//projects/2020/01/01/bros-v2/</link>
        <guid isPermaLink="true">https://kimchanjung.github.io//projects/2020/01/01/bros-v2/</guid>
        
        <category>projects</category>
        
        
        <category>projects</category>
        
      </item>
    
  </channel>
</rss>
