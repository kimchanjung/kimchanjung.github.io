<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title> - Articles</title>
    <description>Developer KimChanJung's Blog</description>
    <link>http://localhost:4000</link>
    
      
      <item>
        <title>프로그래머스 - 괄호변환 [2020 KAKAO BLIND RECRUITMENT]</title>
        
          <description>&lt;p&gt;깔끔한 코드와 재귀로 프로그래머스 괄호변환 문제를 해석하고 풀이합니다.&lt;/p&gt;

</description>
        
        <pubDate>Mon, 13 Jul 2020 16:00:00 +0900</pubDate>
        <link>
        http://localhost:4000/algorithm/2020/07/13/bracket/</link>
        <guid isPermaLink="true">http://localhost:4000/algorithm/2020/07/13/bracket/</guid>
      </item>
      
    
      
      <item>
        <title>[typescript] npm 모듈 import시 오류를 해결하는 방법(d.ts 파일 생성법)</title>
        
          <description>&lt;p&gt;typescript npm 모듈 import시 오류의 원인과 해결하는 방법을 알아봅니다.&lt;/p&gt;

</description>
        
        <pubDate>Sun, 05 Jul 2020 21:00:00 +0900</pubDate>
        <link>
        http://localhost:4000/programming/2020/07/05/typescipt-import-js-module-error/</link>
        <guid isPermaLink="true">http://localhost:4000/programming/2020/07/05/typescipt-import-js-module-error/</guid>
      </item>
      
    
      
      <item>
        <title>[Spring Security] 스프링시큐리티 커스텀 필터의 구현(3)</title>
        
          <description>&lt;p&gt;스프링시큐리티의 커스텀 필터를 생성하고 적용하는 방법을 예제코드와 함께 알아봅니다.&lt;/p&gt;

</description>
        
        <pubDate>Fri, 03 Jul 2020 14:00:00 +0900</pubDate>
        <link>
        http://localhost:4000/programming/2020/07/03/spring-security-03/</link>
        <guid isPermaLink="true">http://localhost:4000/programming/2020/07/03/spring-security-03/</guid>
      </item>
      
    
      
      <item>
        <title>[Spring Security] 스프링시큐리티 설정값들의 역할과 설정방법(2)</title>
        
          <description>&lt;p&gt;스프링시큐리티의 여러가지 설정값들의 역할과 설정방법을 상세히 알아봅니다.&lt;/p&gt;

</description>
        
        <pubDate>Thu, 02 Jul 2020 12:00:00 +0900</pubDate>
        <link>
        http://localhost:4000/programming/2020/07/02/spring-security-02/</link>
        <guid isPermaLink="true">http://localhost:4000/programming/2020/07/02/spring-security-02/</guid>
      </item>
      
    
      
      <item>
        <title>[Spring Security] 스프링시큐리티 동작구조의 이해(1)</title>
        
          <description>&lt;p&gt;스프링시큐리티의 기본적인 동작구조와 별도의 인증을 도입할 때 필요한 커스텀 필터를 작성하고 적용하는 방법을 알아봅니다”&lt;/p&gt;

</description>
        
        <pubDate>Wed, 01 Jul 2020 01:00:00 +0900</pubDate>
        <link>
        http://localhost:4000/programming/2020/07/01/spring-security-01/</link>
        <guid isPermaLink="true">http://localhost:4000/programming/2020/07/01/spring-security-01/</guid>
      </item>
      
    
      
      <item>
        <title>[Spring] JPA EntityListeners에서 @Autowired를 통한 의존성 주입이 미동작하는 문제 해결</title>
        
          <description>&lt;p&gt;@EntityListeners로 지정한 클래스에 의존성이 필요한 경우 @autowired를 통한 의존성 주입이 동작하지 않는 문제가 있습니다 설명과 예제를 통하여 원인과 해결방법을 알아보도록 하겠습니다&lt;/p&gt;

</description>
        
        <pubDate>Sun, 28 Jun 2020 20:00:00 +0900</pubDate>
        <link>
        http://localhost:4000/programming/2020/06/28/spring-jpa-antity-listner-autowired-not-working/</link>
        <guid isPermaLink="true">http://localhost:4000/programming/2020/06/28/spring-jpa-antity-listner-autowired-not-working/</guid>
      </item>
      
    
      
      <item>
        <title>[React] 로딩처리용 spinner를 사용시 position 옵션 문제를 Portal을 사용해 해결하는 방법</title>
        
          <description>&lt;p&gt;NPM react용 Spinner 모듈을 가져와 사용할 때 발생하는 position 옵션 문제를 Portal을 이용해 해결하고 깔끔한 방식으로 사용할 수 있는 방법을 알아봅니다&lt;/p&gt;

</description>
        
        <pubDate>Fri, 26 Jun 2020 14:00:00 +0900</pubDate>
        <link>
        http://localhost:4000/programming/2020/06/26/react-spinner/</link>
        <guid isPermaLink="true">http://localhost:4000/programming/2020/06/26/react-spinner/</guid>
      </item>
      
    
      
      <item>
        <title>[React] 페이지 이동시 스크롤을 상단으로 초기화 하는 방법(scroll top)</title>
        
          <description>&lt;p&gt;React로 개발 하다보면 기본 매카니즘이 상태란 것 남아 있기 때문에 나는 분명 다른페이지로 이동 했는데도 새로 고침을 하였는데도 불구하고 이전의 스크롤위치로 페이지가 나타나는 현상이 있습니다.&lt;/p&gt;

</description>
        
        <pubDate>Thu, 25 Jun 2020 16:00:00 +0900</pubDate>
        <link>
        http://localhost:4000/programming/2020/06/25/react-scroll-top/</link>
        <guid isPermaLink="true">http://localhost:4000/programming/2020/06/25/react-scroll-top/</guid>
      </item>
      
    
      
      <item>
        <title>[React] react-router에서 인증 및 권한 Router(Private) 구현하기(권한별 routing)</title>
        
          <description>&lt;p&gt;react-router의 url 권한을 체크하여 routing 이 가능하도록 하고 권한이 없으면 권한이 없다는 페이지로 redirect하는 방법을 알아보고자 합니다&lt;/p&gt;

</description>
        
        <pubDate>Wed, 24 Jun 2020 18:00:00 +0900</pubDate>
        <link>
        http://localhost:4000/programming/2020/06/24/react-router-private-router/</link>
        <guid isPermaLink="true">http://localhost:4000/programming/2020/06/24/react-router-private-router/</guid>
      </item>
      
    
      
      <item>
        <title>[Gradle] node yarn 빌드 react 프로젝트를 gradle에 통합 포함하여 빌드하는 방법</title>
        
          <description>&lt;p&gt;스프링 프로젝트를 빌드할 때 백엔드 API + 프론트엔드 구성의 프로젝트 빌드시 node yarn을 사용하여 빌드하는 프론트엔드 빌드를 Gradle 빌드에 포함하여 빌드하는 방법을 알아 봅니다.&lt;/p&gt;

</description>
        
        <pubDate>Wed, 24 Jun 2020 14:00:00 +0900</pubDate>
        <link>
        http://localhost:4000/programming/2020/06/24/spring-gradle-build-with-front-end/</link>
        <guid isPermaLink="true">http://localhost:4000/programming/2020/06/24/spring-gradle-build-with-front-end/</guid>
      </item>
      
    
      
      <item>
        <title>[React] Mobx의 async action(비동기 액션) 처리를 mobx-utils를 이용하여 가장 깔끔하게 구현하는 방법</title>
        
          <description>&lt;p&gt;Mobx 공식 문서에 제공하는 async action(비동기 액션) 처리를 mobx-utils를 이용하여 더 깔끔한 처리방법을 살펴봅니다&lt;/p&gt;

</description>
        
        <pubDate>Wed, 24 Jun 2020 14:00:00 +0900</pubDate>
        <link>
        http://localhost:4000/programming/2020/06/24/react-mobx-async-action/</link>
        <guid isPermaLink="true">http://localhost:4000/programming/2020/06/24/react-mobx-async-action/</guid>
      </item>
      
    
      
      <item>
        <title>[React] Material-UI에서 withStyle 사용시 1개 이상 여러개 style을 함께 사용하는 방법(multiple)</title>
        
          <description>&lt;p&gt;Material-UI에서 withStyle 함수로 JSS 스타일을 적용할때 1개 이상 여러개(multiple) 스타일을 같이 사용하는 방법을 알아봅니다.&lt;/p&gt;

</description>
        
        <pubDate>Wed, 24 Jun 2020 14:00:00 +0900</pubDate>
        <link>
        http://localhost:4000/programming/2020/06/24/react-material-ui-combine-with-style/</link>
        <guid isPermaLink="true">http://localhost:4000/programming/2020/06/24/react-material-ui-combine-with-style/</guid>
      </item>
      
    
      
      <item>
        <title>[React] Mobx 와 react-router 사용시 history를 이용한 url 이동이 미동작 않는 경우 해결방법</title>
        
          <description>&lt;p&gt;Ract에서 mobx와 react-router를 함께 사용할 시 history를 이용한 페이지 이동이 미동작 문제점을 해결합니다.&lt;/p&gt;

</description>
        
        <pubDate>Mon, 22 Jun 2020 12:00:00 +0900</pubDate>
        <link>
        http://localhost:4000/programming/2020/06/22/react-router-history-with-mobx-problem/</link>
        <guid isPermaLink="true">http://localhost:4000/programming/2020/06/22/react-router-history-with-mobx-problem/</guid>
      </item>
      
    
      
      <item>
        <title>[React] mobx-react-form 사용시 material-ui datepicker의 date format이 미동작 해결 방법</title>
        
          <description>&lt;p&gt;Mobx사용시 form validation 라이브러리로 mobx-react-form을 사용했을 때 material-ui datepicker의 날짜를 변경한 후 화면에 표시되는 날짜는 설정한 date format 대로 표시가 되지만 실제 값은 적용되어 있지 않은 미동작 문제를 해결하는 방법을 알아봅니다&lt;/p&gt;

</description>
        
        <pubDate>Mon, 22 Jun 2020 12:00:00 +0900</pubDate>
        <link>
        http://localhost:4000/programming/2020/06/22/react-material-ui-datepicker-binding/</link>
        <guid isPermaLink="true">http://localhost:4000/programming/2020/06/22/react-material-ui-datepicker-binding/</guid>
      </item>
      
    
      
      <item>
        <title>[React] react-router 에서 트리구조의 부모자식 URL 페이지를 구성하는 방법</title>
        
          <description>&lt;p&gt;react-router를 이용해서 아래와 같은 부모자식 트리구조 URL 구조가 있을 때 구현 하는 방법을 알아 봅니다&lt;/p&gt;

</description>
        
        <pubDate>Mon, 22 Jun 2020 09:00:00 +0900</pubDate>
        <link>
        http://localhost:4000/programming/2020/06/22/react-router-overlab-routing/</link>
        <guid isPermaLink="true">http://localhost:4000/programming/2020/06/22/react-router-overlab-routing/</guid>
      </item>
      
    
      
      <item>
        <title>방문자 패턴 - Visitor Pattern [디자인패턴/코틀린/kotlin]</title>
        
          <description>&lt;p&gt;방문자 패턴은 정의가 가장 어려운 패턴 중에 하나인 듯 하다 수많은 블로그의 방문자 패턴을 정의하는 문구를 아무리 봐도 이해가 가장 어려웠다&lt;/p&gt;

</description>
        
        <pubDate>Fri, 29 May 2020 18:00:00 +0900</pubDate>
        <link>
        http://localhost:4000/design-pattern/2020/05/29/visitor-pattern/</link>
        <guid isPermaLink="true">http://localhost:4000/design-pattern/2020/05/29/visitor-pattern/</guid>
      </item>
      
    
      
      <item>
        <title>템플릿 메소드 패턴 - Template Method Pattern [디자인패턴/코틀린/kotlin]</title>
        
          <description>&lt;p&gt;템플릿 메소드 패턴 전체적으로는 동일하지만 부분적으로 다른 경우 중복을 최소화 하는 패턴 동일한 기능을 상위 클래스에 정의하고 부분적으로 다른부분은 서브클래스에 정의하여 사용한다&lt;/p&gt;

</description>
        
        <pubDate>Thu, 28 May 2020 16:00:00 +0900</pubDate>
        <link>
        http://localhost:4000/design-pattern/2020/05/28/template-method-pattern/</link>
        <guid isPermaLink="true">http://localhost:4000/design-pattern/2020/05/28/template-method-pattern/</guid>
      </item>
      
    
      
      <item>
        <title>전략 패턴 - Strategy Pattern [디자인패턴/코틀린/kotlin]</title>
        
          <description>&lt;p&gt;전략 패턴은 알고리즘 및 로직을 따로 정의하여 필요에 의해 사용 또는 교체 할 수 있는 패턴&lt;/p&gt;

</description>
        
        <pubDate>Thu, 28 May 2020 04:00:00 +0900</pubDate>
        <link>
        http://localhost:4000/design-pattern/2020/05/28/strategy-pattern/</link>
        <guid isPermaLink="true">http://localhost:4000/design-pattern/2020/05/28/strategy-pattern/</guid>
      </item>
      
    
      
      <item>
        <title>상태 패턴 - State Pattern [디자인패턴/코틀린/kotlin]</title>
        
          <description>&lt;p&gt;상태 패턴은 객체가 상태에 따른 행위를 직접 구현하지 않고 상태와 행위를 구현한 별개의 상태객체에게 위임하는 패턴&lt;/p&gt;

</description>
        
        <pubDate>Tue, 26 May 2020 18:00:00 +0900</pubDate>
        <link>
        http://localhost:4000/design-pattern/2020/05/26/state-pattern/</link>
        <guid isPermaLink="true">http://localhost:4000/design-pattern/2020/05/26/state-pattern/</guid>
      </item>
      
    
      
      <item>
        <title>싱글톤 패턴 - Singleton Pattern [디자인패턴/코틀린/kotlin]</title>
        
          <description>&lt;p&gt;싱글톤 패턴은 매번 새로운 객체를 생성하지 않고 오직 하나의 객체만 생성하어 사용하려고 할때 사용한다.&lt;/p&gt;

</description>
        
        <pubDate>Mon, 25 May 2020 09:00:00 +0900</pubDate>
        <link>
        http://localhost:4000/design-pattern/2020/05/25/singleton-pattern/</link>
        <guid isPermaLink="true">http://localhost:4000/design-pattern/2020/05/25/singleton-pattern/</guid>
      </item>
      
    
      
      <item>
        <title>프록시 패턴 - Proxy Pattern [디자인패턴/코틀린/kotlin]</title>
        
          <description>&lt;p&gt;프록시 패턴은 실제객체를 대신하는 객체가 로직의 흐름을 제어하여 실제 객체를 조작하는 패턴&lt;/p&gt;

</description>
        
        <pubDate>Sun, 24 May 2020 09:00:00 +0900</pubDate>
        <link>
        http://localhost:4000/design-pattern/2020/05/24/proxy-pattern/</link>
        <guid isPermaLink="true">http://localhost:4000/design-pattern/2020/05/24/proxy-pattern/</guid>
      </item>
      
    
      
      <item>
        <title>옵저버 패턴 - Observer Pattern [디자인패턴/코틀린/kotlin]</title>
        
          <description>&lt;p&gt;옵저버 패턴은 그야 말로 발행/구독 모델 이라고 생각하면 쉽다. spring 의 ApplicationEvent 이용한 이벤트 발행/구독이나 javascript onClick 같은 이벤트 리스너를 사용한다거나 크게는 aws sns/sqs 같은 것들도 발생/구독 모델이다.&lt;/p&gt;

</description>
        
        <pubDate>Sat, 23 May 2020 18:00:00 +0900</pubDate>
        <link>
        http://localhost:4000/design-pattern/2020/05/23/observer-pattern/</link>
        <guid isPermaLink="true">http://localhost:4000/design-pattern/2020/05/23/observer-pattern/</guid>
      </item>
      
    
      
      <item>
        <title>플라이웨이트 패턴 - Flyweight Pattern [디자인패턴/코틀린/kotlin]</title>
        
          <description>&lt;p&gt;플라이웨이트 패턴은 공통으로 사용하는 클래스를 생성하는 팩토리클래스를 만들고 필요한 클래스의 인스턴스가 없는 경우 인스턴스를 새로 생성하고 이미 있는 경우는 생성해둔 인스턴스를 리턴해서 1개만 생성하여 공유해서 사용할 수 있도록 제공하는 패턴&lt;/p&gt;

</description>
        
        <pubDate>Fri, 22 May 2020 09:00:00 +0900</pubDate>
        <link>
        http://localhost:4000/design-pattern/2020/05/22/flyweight-pattern/</link>
        <guid isPermaLink="true">http://localhost:4000/design-pattern/2020/05/22/flyweight-pattern/</guid>
      </item>
      
    
      
      <item>
        <title>팩토리 메소드 패턴 - Factory Method Pattern [디자인패턴/코틀린/kotlin]</title>
        
          <description>&lt;p&gt;팩토리 메소드 패턴 객체 생성을 직접 하지 않고 객체를 생성/제공하는 클래스를 사용하여 획득하는 패턴&lt;/p&gt;

</description>
        
        <pubDate>Thu, 21 May 2020 09:00:00 +0900</pubDate>
        <link>
        http://localhost:4000/design-pattern/2020/05/21/factory-method-pattern/</link>
        <guid isPermaLink="true">http://localhost:4000/design-pattern/2020/05/21/factory-method-pattern/</guid>
      </item>
      
    
      
      <item>
        <title>퍼사드 패턴 - Facade Pattern [디자인패턴/코틀린/kotlin]</title>
        
          <description>&lt;p&gt;퍼사드 패턴은 아마도 우리가 프로그래밍 하면서 자연스럽게 사용되어지는 패턴중에 가장 흔한 패턴이 아닌가 싶다.&lt;/p&gt;

</description>
        
        <pubDate>Wed, 20 May 2020 09:00:00 +0900</pubDate>
        <link>
        http://localhost:4000/design-pattern/2020/05/20/facade-pattern/</link>
        <guid isPermaLink="true">http://localhost:4000/design-pattern/2020/05/20/facade-pattern/</guid>
      </item>
      
    
      
      <item>
        <title>데코레이터 패턴 - Decorator Pattern [디자인패턴/코틀린/kotlin]</title>
        
          <description>&lt;p&gt;데코레이터 패턴은 특정 클래스의 기본기능에 추가기능을 기존 클래스를 수정하지 않고 패턴을 통하여 덧 붙이고 싶을 때 사용한다.&lt;/p&gt;

</description>
        
        <pubDate>Tue, 19 May 2020 09:00:00 +0900</pubDate>
        <link>
        http://localhost:4000/design-pattern/2020/05/19/decorator-pattern/</link>
        <guid isPermaLink="true">http://localhost:4000/design-pattern/2020/05/19/decorator-pattern/</guid>
      </item>
      
    
      
      <item>
        <title>컴포지트 패턴 - Composite Pattern [디자인패턴/코틀린/kotlin]</title>
        
          <description>&lt;p&gt;컴포지트 패턴은 하나 또는 하나이상의 객체이거나 상관없이 하나의 객체처럼 다룰 수 있게 해주는 패턴&lt;/p&gt;

</description>
        
        <pubDate>Mon, 18 May 2020 09:00:00 +0900</pubDate>
        <link>
        http://localhost:4000/design-pattern/2020/05/18/composite-pattern/</link>
        <guid isPermaLink="true">http://localhost:4000/design-pattern/2020/05/18/composite-pattern/</guid>
      </item>
      
    
      
      <item>
        <title>커맨드 패턴 - Command Pattern [디자인패턴/코틀린/kotlin]</title>
        
          <description>&lt;p&gt;커맨드 패턴은 각각 형태가 다른 메소드를 추상화하여 클라이언트가 사용할 수 있도록 하는 패턴&lt;/p&gt;

</description>
        
        <pubDate>Sun, 17 May 2020 09:00:00 +0900</pubDate>
        <link>
        http://localhost:4000/2020/05/17/command-pattern/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/05/17/command-pattern/</guid>
      </item>
      
    
      
      <item>
        <title>책임 연쇄 패턴 - Chain Of Reponsibility Pattern [디자인패턴/코틀린/kotlin]</title>
        
          <description>&lt;p&gt;요청을 처리를 하나이상의 체인형태로 구성된 객체에게 위임하고 요청을 처리할 수 있는 객체를 만날 때까지 다음 객체로 처리를 위임하는 패턴&lt;/p&gt;

</description>
        
        <pubDate>Sat, 16 May 2020 09:00:00 +0900</pubDate>
        <link>
        http://localhost:4000/design-pattern/2020/05/16/chain-of-reponsibility-pattern/</link>
        <guid isPermaLink="true">http://localhost:4000/design-pattern/2020/05/16/chain-of-reponsibility-pattern/</guid>
      </item>
      
    
      
      <item>
        <title>어댑터 패턴 - Adapter Pattern [디자인패턴/코틀린/kotlin]</title>
        
          <description>&lt;p&gt;사용자는 어댑터 패턴의 인터페이스를 사용함으로써 각각 구현체의 세부로직과 변경에 관계없이 일관성있는 사용이 가능하다.&lt;/p&gt;

</description>
        
        <pubDate>Fri, 15 May 2020 09:00:00 +0900</pubDate>
        <link>
        http://localhost:4000/design-pattern/2020/05/15/adapter-pattern/</link>
        <guid isPermaLink="true">http://localhost:4000/design-pattern/2020/05/15/adapter-pattern/</guid>
      </item>
      
    
      
      <item>
        <title>추상팩토리 패턴 - Abstract Factory Pattern [디자인패턴/코틀린/kotlin]</title>
        
          <description>&lt;p&gt;추상팩토리 패턴은 어떤 연관된 클래스들을 팩토리를 통하여 일관성 있게 객체생성이 가능하도록 그룹으로 묶어 제공하고 변경도 유연하도록 제공한다.&lt;/p&gt;

</description>
        
        <pubDate>Thu, 14 May 2020 09:00:00 +0900</pubDate>
        <link>
        http://localhost:4000/design-pattern/2020/05/14/abstract-factory-pattern/</link>
        <guid isPermaLink="true">http://localhost:4000/design-pattern/2020/05/14/abstract-factory-pattern/</guid>
      </item>
      
    
      
      <item>
        <title>[Mobx] React 에서 Mobx 사용기</title>
        
          <description>&lt;p&gt;react와 mobx그리고 material-ui를 이용한 개발기와 예제코드를 통한 mobx vs react 차이점 비교 및 atomic design을 통한 프로젝트구조 react 서드파티 라이브러리 리뷰정보등을 알아봅니다.&lt;/p&gt;

</description>
        
        <pubDate>Fri, 08 May 2020 00:00:00 +0900</pubDate>
        <link>
        http://localhost:4000/tech/2020/05/08/react-mobx/</link>
        <guid isPermaLink="true">http://localhost:4000/tech/2020/05/08/react-mobx/</guid>
      </item>
      
    
      
      <item>
        <title>[Socket.io][websocket] 실시간 서비스 경험기(배달운영시스템 BROS1.0)</title>
        
          <description>&lt;p&gt;배달의민족 배민라이더스의 배달처리시스템 개발기와 socket.io(websocket)를 이용한 실시간 시스템 구현 방법을 자세히 알아 봅니다.&lt;/p&gt;

</description>
        
        <pubDate>Fri, 08 May 2020 00:00:00 +0900</pubDate>
        <link>
        http://localhost:4000/tech/2020/05/08/real-time-service/</link>
        <guid isPermaLink="true">http://localhost:4000/tech/2020/05/08/real-time-service/</guid>
      </item>
      
    
      
      <item>
        <title>주식가격 (42584) - 프로그래머스 [코테][알고리즘]</title>
        
          <description>&lt;p&gt;프로그래머스 programers 주식가격 (42584)문제의 풀이와 해설을 합니다.&lt;/p&gt;

</description>
        
        <pubDate>Fri, 08 May 2020 00:00:00 +0900</pubDate>
        <link>
        http://localhost:4000/algorithm/2020/05/08/stock-prices-42584/</link>
        <guid isPermaLink="true">http://localhost:4000/algorithm/2020/05/08/stock-prices-42584/</guid>
      </item>
      
    
      
      <item>
        <title>등굣길 (42898) - 프로그래머스 [코테][알고리즘]</title>
        
          <description>&lt;p&gt;프로그래머스 programers 등굣길 (42898)문제의 풀이와 해설을 합니다.&lt;/p&gt;

</description>
        
        <pubDate>Fri, 08 May 2020 00:00:00 +0900</pubDate>
        <link>
        http://localhost:4000/algorithm/2020/05/08/way-to-school-42898/</link>
        <guid isPermaLink="true">http://localhost:4000/algorithm/2020/05/08/way-to-school-42898/</guid>
      </item>
      
    
      
      <item>
        <title>정수삼각형 (43105) - 프로그래머스 [코테][알고리즘]</title>
        
          <description>&lt;p&gt;프로그래머스 programers 정수삼각형 (43105)문제의 풀이와 해설을 합니다.&lt;/p&gt;

</description>
        
        <pubDate>Fri, 08 May 2020 00:00:00 +0900</pubDate>
        <link>
        http://localhost:4000/algorithm/2020/05/08/integer-triangle-43105/</link>
        <guid isPermaLink="true">http://localhost:4000/algorithm/2020/05/08/integer-triangle-43105/</guid>
      </item>
      
    
      
      <item>
        <title>타일장식물 (43104) - 프로그래머스 [코테][알고리즘]</title>
        
          <description>&lt;p&gt;프로그래머스 programers 타일장식물 (43104)문제의 풀이와 해설을 합니다.&lt;/p&gt;

</description>
        
        <pubDate>Fri, 08 May 2020 00:00:00 +0900</pubDate>
        <link>
        http://localhost:4000/algorithm/2020/05/08/tile-deco-43104/</link>
        <guid isPermaLink="true">http://localhost:4000/algorithm/2020/05/08/tile-deco-43104/</guid>
      </item>
      
    
      
      <item>
        <title>네트워크 (43162) - 프로그래머스 [코테][알고리즘]</title>
        
          <description>&lt;p&gt;프로그래머스 programers 네트워크 (43162) 문제의 풀이와 해설을 합니다.&lt;/p&gt;

</description>
        
        <pubDate>Fri, 08 May 2020 00:00:00 +0900</pubDate>
        <link>
        http://localhost:4000/algorithm/2020/05/08/network-43162/</link>
        <guid isPermaLink="true">http://localhost:4000/algorithm/2020/05/08/network-43162/</guid>
      </item>
      
    
      
      <item>
        <title>Coin Change  - LeetCode [코테/알고리즘]</title>
        
          <description>&lt;p&gt;리트코드 LeetCode Coin Change문제의 풀이와 해설을 합니다.&lt;/p&gt;

</description>
        
        <pubDate>Fri, 08 May 2020 00:00:00 +0900</pubDate>
        <link>
        http://localhost:4000/algorithm/2020/05/08/Coin-Change/</link>
        <guid isPermaLink="true">http://localhost:4000/algorithm/2020/05/08/Coin-Change/</guid>
      </item>
      
    
      
      <item>
        <title>Longest Substring Without Repeating Characters - LeetCode [코테/알고리즘]</title>
        
          <description>&lt;p&gt;코테 코딩테스트 알고리즘 리트코드 LeetCode Longest Substring Without Repeating Characters 문제의 풀이와 해설을 합니다&lt;/p&gt;

</description>
        
        <pubDate>Fri, 08 May 2020 00:00:00 +0900</pubDate>
        <link>
        http://localhost:4000/algorithm/2020/05/08/Longest-Substring-Without-Repeating-Characters-copy/</link>
        <guid isPermaLink="true">http://localhost:4000/algorithm/2020/05/08/Longest-Substring-Without-Repeating-Characters-copy/</guid>
      </item>
      
    
      
      <item>
        <title>Sherlock and anagrams - hackerank [코테/알고리즘]</title>
        
          <description>&lt;p&gt;해커랭크 hackerank Sherlock and anagrams 문제의 풀이와 해설을 합니다.&lt;/p&gt;

</description>
        
        <pubDate>Fri, 08 May 2020 00:00:00 +0900</pubDate>
        <link>
        http://localhost:4000/algorithm/2020/05/08/sherlock-and-anagrams/</link>
        <guid isPermaLink="true">http://localhost:4000/algorithm/2020/05/08/sherlock-and-anagrams/</guid>
      </item>
      
    
      
      <item>
        <title>[마이크로서비스] 스프링 마이크로서비스 요약 정리 (spring microservice, msa)</title>
        
          <description>&lt;p&gt;스프링마이크로서비스의 책내용중 마이크로서비스를 개발함에 있어 가장 중요한 개념과 원칙들 설계방법 부분을 예제 와 함께 정리&lt;/p&gt;

</description>
        
        <pubDate>Wed, 06 May 2020 00:00:00 +0900</pubDate>
        <link>
        http://localhost:4000/tech/2020/05/06/spring-microservice-summary/</link>
        <guid isPermaLink="true">http://localhost:4000/tech/2020/05/06/spring-microservice-summary/</guid>
      </item>
      
    
      
      <item>
        <title>코틀린 기본 문법 요약 정리 강좌 - [kotlin/cheat sheet]</title>
        
          <description>&lt;p&gt;코틀린의 기본문법을 치트형식의 예제코드와 설명을 포함한 깔끔하게 요약정리한 문법정리입니다.&lt;/p&gt;

</description>
        
        <pubDate>Wed, 06 May 2020 00:00:00 +0900</pubDate>
        <link>
        http://localhost:4000/programming/2020/05/06/kotlin-basic-syntax-summary/</link>
        <guid isPermaLink="true">http://localhost:4000/programming/2020/05/06/kotlin-basic-syntax-summary/</guid>
      </item>
      
    
      
      <item>
        <title>JAVA - 자료구조, Collection 별 특징 정리</title>
        
          <description>&lt;p&gt;JAVA Collection별 특징과 시간 메소드별 시간 복잡도를 일목요연하게 정리한 내용입니다.&lt;/p&gt;

</description>
        
        <pubDate>Wed, 15 Jan 2020 00:00:00 +0900</pubDate>
        <link>
        http://localhost:4000/etc/2020/01/15/java-collection/</link>
        <guid isPermaLink="true">http://localhost:4000/etc/2020/01/15/java-collection/</guid>
      </item>
      
    
      
      <item>
        <title>실시간 메시징 서버(socket.io)</title>
        
          <description>&lt;p&gt;배달의민족 배민라이더스의 실시간 배달처리 시스템을 위한 실시간 메시징 서버(socket.io)개발 프로젝트의 소개입니다.&lt;/p&gt;

</description>
        
        <pubDate>Sat, 04 Jan 2020 11:00:00 +0900</pubDate>
        <link>
        http://localhost:4000/projects/2020/01/04/socket-io-server/</link>
        <guid isPermaLink="true">http://localhost:4000/projects/2020/01/04/socket-io-server/</guid>
      </item>
      
    
      
      <item>
        <title>배민라이더스운영시스템(BROS 1.0)</title>
        
          <description>&lt;p&gt;배달의민족 배민라이더의 배민라이더스운영시스템(BROS 1.0) 프로젝트 소개입니다.&lt;/p&gt;

</description>
        
        <pubDate>Fri, 03 Jan 2020 10:00:00 +0900</pubDate>
        <link>
        http://localhost:4000/projects/2020/01/03/bros-v1/</link>
        <guid isPermaLink="true">http://localhost:4000/projects/2020/01/03/bros-v1/</guid>
      </item>
      
    
      
      <item>
        <title>라이더운영시스템</title>
        
          <description>&lt;p&gt;배달의민족 배민라이더스의 라이더운영시스템 프로젝트의 소개&lt;/p&gt;

</description>
        
        <pubDate>Thu, 02 Jan 2020 09:00:00 +0900</pubDate>
        <link>
        http://localhost:4000/projects/2020/01/02/brms/</link>
        <guid isPermaLink="true">http://localhost:4000/projects/2020/01/02/brms/</guid>
      </item>
      
    
      
      <item>
        <title>배민라이더스운영시스템(BROS 2.0)</title>
        
          <description>&lt;p&gt;배달의민족 배민라이더스의 배민라이더스운영시스템(BROS 2.0) 프로젝트 소개입니다.&lt;/p&gt;

</description>
        
        <pubDate>Wed, 01 Jan 2020 08:00:00 +0900</pubDate>
        <link>
        http://localhost:4000/projects/2020/01/01/bros-v2/</link>
        <guid isPermaLink="true">http://localhost:4000/projects/2020/01/01/bros-v2/</guid>
      </item>
      
    
  </channel>
</rss>
