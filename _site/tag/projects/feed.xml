<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator>
  <link href="https://kimchanjung.github.io/tag/projects/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://kimchanjung.github.io/" rel="alternate" type="text/html" />
  <updated>2020-07-29T16:48:16+09:00</updated>
  <id>https://kimchanjung.github.io/tag/projects/feed.xml</id>

  
  
  

  
    <title type="html">kimchanjung | </title>
  

  
    <subtitle>Developer KimChanJung's Blog</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">실시간 메시징 서버(socket.io)</title>
      <link href="https://kimchanjung.github.io/projects/2020/01/04/socket-io-server/" rel="alternate" type="text/html" title="실시간 메시징 서버(socket.io)" />
      <published>2020-01-04T11:00:00+09:00</published>
      <updated>2020-01-04T11:00:00+09:00</updated>
      <id>https://kimchanjung.github.io/projects/2020/01/04/socket-io-server</id>
      <content type="html" xml:base="https://kimchanjung.github.io/projects/2020/01/04/socket-io-server/">&lt;p&gt;배달의민족 배민라이더스의 실시간 배달처리 시스템을 위한 실시간 메시징 서버(socket.io)개발 프로젝트의 소개입니다.&lt;/p&gt;

&lt;h1 id=&quot;실시간-메시징-서버socketio&quot;&gt;실시간 메시징 서버(socket.io)&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;멀티플랫폼(web/ios/android)을 지원하는 실시간 메시징 서버&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post-img/projects/websocket-server/socket-server-monitor.png&quot; alt=&quot;websocket-server-main&quot; /&gt;
[그림 1] 메인화면&lt;/p&gt;

&lt;h2 id=&quot;관련-기술블로그&quot;&gt;관련 기술블로그&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://woowabros.github.io/woowabros/2017/09/12/realtime-service.html&quot;&gt;실시간 서비스 경험기(배달운영시스템)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;프로젝트-기간&quot;&gt;프로젝트 기간&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;2015.08 ~ 2016.08&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;프로젝트-참여도&quot;&gt;프로젝트 참여도&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;프로젝트 인원 1명&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;전담하여 개발&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;주요-기능&quot;&gt;주요 기능&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;websocket 실시간 메시징을 지원하여 실시간 서비스 개발을 지원함&lt;/li&gt;
  &lt;li&gt;web/android/ios 등 &lt;code class=&quot;highlighter-rouge&quot;&gt;멀티 플랫폼을 지원&lt;/code&gt;함&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;채팅 기능 구현 가능&lt;/code&gt;함&lt;/li&gt;
  &lt;li&gt;개별/채널/브로드캐스팅 등 다양한 이벤트송수신 그룹 지원&lt;/li&gt;
  &lt;li&gt;서버사용량/개설채널 및 클라이언트현황등의 &lt;code class=&quot;highlighter-rouge&quot;&gt;서버모니터링 페이지 제공&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;적용된-기술-및-라이브러리&quot;&gt;적용된 기술 및 라이브러리&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Node.js&lt;/li&gt;
  &lt;li&gt;Socket.io&lt;/li&gt;
  &lt;li&gt;Redis pub/sub&lt;/li&gt;
  &lt;li&gt;socketio-sticky-session&lt;/li&gt;
  &lt;li&gt;Node.js Cluster&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;간략한-시스템-구성도&quot;&gt;간략한 시스템 구성도&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post-img/projects/websocket-server/socket-server-architecture.png&quot; alt=&quot;websocket-server-architecture&quot; /&gt;&lt;br /&gt;
[그림 2] 구성도&lt;/p&gt;

&lt;h3 id=&quot;시스템-구성-설명&quot;&gt;시스템 구성 설명&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;백오피스 서버는 API 서버와 angularjs 프론트엔드로 구성 되어 있음&lt;/li&gt;
  &lt;li&gt;라이더앱과 백오피스는 Socket.io로 개발된 websocket 서버를 통하여 실시간으로 배달 및 라이더 현황을 관리함&lt;/li&gt;
  &lt;li&gt;웹소켓 서버는 nodejs 기반 이라 싱글 프로세스로 동작하지만 서버자원을 효율적으로 사용하기 위하여 멀티프로세스로 프로그래밍하였음&lt;/li&gt;
  &lt;li&gt;멀티프로세스로 구동시 각각의 프로세스에 메시지를 공유하기 위해 Redis pub/sub를 사용&lt;/li&gt;
  &lt;li&gt;일반적으로 클라이언트가 서버 접속시 L4가 sticky session 처리를 해서 처음 접속한 서버로만 접속이 되지만 Node.js 멀티 프로세스의 경우 멀티 쓰레드가 아니므로 내부적으로 처음 접속한 프로세스에 클라이언트가 접속되도록 별도의 sticky session 처리를 해주었음&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;효과&quot;&gt;효과&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;SaaS서비스인 pubnub을 사용하여 실시간 처리를 구현 하였지만 &lt;code class=&quot;highlighter-rouge&quot;&gt;주말 개인 프로젝트로 시작하여 내재화에 성공함&lt;/code&gt;,&lt;/li&gt;
    &lt;li&gt;실시간 이벤트가 필요한 서비스에 기능을 제공, 이를 활용하여 실시간 서비스를 실현 함에도 DB 호출 트래픽을 현저하게 낮춤&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;느낀점&quot;&gt;느낀점&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;초기 개발 문서에 간략히 기술 된 이벤트 수신후 송신 부분만 구현 하면 되는 비교적 간단한 로직으로 생각(빙산의 일각)&lt;/li&gt;
  &lt;li&gt;Node.js는 싱글 프로세스, 서버의 CPU Core 수만큼 Multi-Processing을 코드로 구현 해야 함&lt;/li&gt;
  &lt;li&gt;Multi-Processing로 인하여 process간 상태(이벤트 메시지 데이터 및 관리 데이터)공유 이슈는 Redis pub/sub사용하여 해결.&lt;/li&gt;
  &lt;li&gt;Client의 접속이 처음 접속한 Process에만 통신 하도록 sticky-session을 적용하여 해결함.&lt;/li&gt;
  &lt;li&gt;서버현황데이터 제공을 위하여 Client, NameSpace, Room 현황 데이터를 Redis로 관리하던 중 간혹 동기식 처리로직으로 인하여 급격한 성능저하를 경험.&lt;/li&gt;
  &lt;li&gt;Redis에는 데이터구조를 되도록 단순하게 설계, 관리 필요성과, Node.js는 동기적으로 처리하는 로직은 지양 해야함을 크게 느낌&lt;/li&gt;
  &lt;li&gt;NameSpace, Room, EventType 별로 적절한 구조화 필요&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>김찬정</name>
        
        
      </author>

      

      
        <category term="projects" />
      

      
        <summary type="html">배달의민족 배민라이더스의 실시간 배달처리 시스템을 위한 실시간 메시징 서버(socket.io)개발 프로젝트의 소개입니다.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">배민라이더스운영시스템(BROS 1.0)</title>
      <link href="https://kimchanjung.github.io/projects/2020/01/03/bros-v1/" rel="alternate" type="text/html" title="배민라이더스운영시스템(BROS 1.0)" />
      <published>2020-01-03T10:00:00+09:00</published>
      <updated>2020-01-03T10:00:00+09:00</updated>
      <id>https://kimchanjung.github.io/projects/2020/01/03/bros-v1</id>
      <content type="html" xml:base="https://kimchanjung.github.io/projects/2020/01/03/bros-v1/">&lt;p&gt;배달의민족 배민라이더의 배민라이더스운영시스템(BROS 1.0) 프로젝트 소개입니다.&lt;/p&gt;

&lt;h1 id=&quot;배민라이더스운영시스템bros-10&quot;&gt;배민라이더스운영시스템(BROS 1.0)&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;배달접수와 실시간 배달처리 현황 및 라이더 관제기능을 지원하는 종합 운영 시스템&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post-img/projects/bros1.0/bros-chatting.jpg&quot; alt=&quot;bros-main&quot; /&gt;
[그림 1] 메인화면&lt;/p&gt;

&lt;h2 id=&quot;관련-기술블로그&quot;&gt;관련 기술블로그&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://woowabros.github.io/woowabros/2017/09/12/realtime-service.html&quot;&gt;실시간 서비스 경험기(배달운영시스템)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;프로젝트-기간&quot;&gt;프로젝트 기간&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;2015.02 ~ 2016.08&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;프로젝트-참여도&quot;&gt;프로젝트 참여도&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;프로젝트 인원 5명&lt;/li&gt;
  &lt;li&gt;배민라이더스운영시스템 사이트 &lt;code class=&quot;highlighter-rouge&quot;&gt;Back-End API&lt;/code&gt;와 Angularjs &lt;code class=&quot;highlighter-rouge&quot;&gt;Front-End 전담&lt;/code&gt;하여 개발&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Websocket 서버를 전담&lt;/code&gt;하여 개발&lt;/li&gt;
  &lt;li&gt;나머지 인원은 라이더앱 및 라이더앱 API 개발과 결제시스템 개발함&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;주요-기능&quot;&gt;주요 기능&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;배달접수처리 기능&lt;/li&gt;
  &lt;li&gt;실시간 배달연황 및 라이더 현황 관제&lt;/li&gt;
  &lt;li&gt;배달료 정산을 위한 데이터 제공&lt;/li&gt;
  &lt;li&gt;채팅 기능 제공&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;적용된-기술셋&quot;&gt;적용된 기술셋&lt;/h2&gt;
&lt;h3 id=&quot;back-end&quot;&gt;Back-End&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;PHP 5.6&lt;/li&gt;
  &lt;li&gt;CodeIgniter 3.1&lt;/li&gt;
  &lt;li&gt;Nodejs&lt;/li&gt;
  &lt;li&gt;Socket.io&lt;/li&gt;
  &lt;li&gt;sqlserver&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;front-end&quot;&gt;Front-End&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;AngularJS 1.8&lt;/li&gt;
  &lt;li&gt;Bootstrap 2.x&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;etc&quot;&gt;Etc&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Websocket&lt;/li&gt;
  &lt;li&gt;Redis&lt;/li&gt;
  &lt;li&gt;winston&lt;/li&gt;
  &lt;li&gt;socketio-sticky-session&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;간략한-시스템-구성도&quot;&gt;간략한 시스템 구성도&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post-img/projects/bros1.0/bros-v1.png&quot; alt=&quot;bros-architecture&quot; /&gt;
[그림 2] 구성도&lt;/p&gt;

&lt;h3 id=&quot;시스템-구성-설명&quot;&gt;시스템 구성 설명&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;백오피스 서버는 API 서버와 angularjs 프론트엔드로 구성 되어 있음&lt;/li&gt;
  &lt;li&gt;라이더앱과 백오피스는 Socket.io로 개발된 websocket 서버를 통하여 실시간으로 배달 및 라이더 현황을 관리함&lt;/li&gt;
  &lt;li&gt;웹소켓 서버는 nodejs 기반 이라 싱글 프로세스로 동작하지만 서버자원을 효율적으로 사용하기 위하여 멀티프로세스로 프로그래밍하였음&lt;/li&gt;
  &lt;li&gt;멀티프로세스로 구동시 각각의 프로세스에 메시지를 공유하기 위해 Redis pub/sub를 사용&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;효과&quot;&gt;효과&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;실시간 이벤트 서버 도입으로 Polling 방식에 비하여 DB호출 횟수를 현저하게 낮춤에도 불구 실시간 서비스가 가능하게 됨.&lt;/li&gt;
    &lt;li&gt;AngularJs 특징인 양방향 데이터 바인딩 기능을 실시간 데이터 제공에 적극 활용&lt;/li&gt;
    &lt;li&gt;실시간 이벤트 서버 Socket.io(Node.js) 를 이용하여 데이터 생성, 변경, 삭제 시 실시간 이벤트로 데이터를 송수신 하여 AngularJS 모델에 반영하도록 하고 뷰의 갱신을 신경쓸 필요없는 구조.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;느낀점&quot;&gt;느낀점&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;AngularJS + Socket.io 신기술의 장점을 활용하여 개발 해볼 수 있었던 기회 통해 출근이 기다려지는 기분을 경험.&lt;/li&gt;
  &lt;li&gt;실시간 서비스라는 다소 생소하고 복잡한 서비스 경험에 엄청난 개발욕구를 경험&lt;/li&gt;
  &lt;li&gt;실무를 통해서만 습득 할 수 있는 실시간 서비스만의 개발, 운영 이슈에 대한 깊이 있는 경험.&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>김찬정</name>
        
        
      </author>

      

      
        <category term="projects" />
      

      
        <summary type="html">배달의민족 배민라이더의 배민라이더스운영시스템(BROS 1.0) 프로젝트 소개입니다.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">라이더운영시스템</title>
      <link href="https://kimchanjung.github.io/projects/2020/01/02/brms/" rel="alternate" type="text/html" title="라이더운영시스템" />
      <published>2020-01-02T09:00:00+09:00</published>
      <updated>2020-01-02T09:00:00+09:00</updated>
      <id>https://kimchanjung.github.io/projects/2020/01/02/brms</id>
      <content type="html" xml:base="https://kimchanjung.github.io/projects/2020/01/02/brms/">&lt;p&gt;배달의민족 배민라이더스의 라이더운영시스템 프로젝트의 소개&lt;/p&gt;

&lt;h1 id=&quot;라이더운영시스템&quot;&gt;라이더운영시스템&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;기존 배민라이더운영시스템에서 라이더관련 부분을 분리하여 MSA로 구성한 라이더관리 전용 시스템&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post-img/projects/brms/rider-management-list.jpg&quot; alt=&quot;bros-main&quot; /&gt;
[그림 1] 메인화면&lt;/p&gt;

&lt;h2 id=&quot;관련-기술블로그&quot;&gt;관련 기술블로그&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://woowabros.github.io/experience/2019/01/02/kimcj-react-mobx.html&quot;&gt;React에서 Mobx 경험기 (Redux와 비교기)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/tech/2020/05/06/spring-microservice-summary.html&quot;&gt;[마이크로서비스] 스프링 마이크로서비스 정리 (spring microservice, msa)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;프로젝트-기간&quot;&gt;프로젝트 기간&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;2019.02 ~ 2019.05&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;프로젝트-참여도&quot;&gt;프로젝트 참여도&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;프로젝트 인원 2 명&lt;/li&gt;
  &lt;li&gt;백엔드 전반적인 &lt;code class=&quot;highlighter-rouge&quot;&gt;설계&lt;/code&gt; 및 프로젝트 &lt;code class=&quot;highlighter-rouge&quot;&gt;BASE 코드 및 비즈니스 코드&lt;/code&gt; 작성&lt;/li&gt;
  &lt;li&gt;React 프론트는 대부분 90% 전담 개발&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;주요-기능&quot;&gt;주요 기능&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;라이더기본정보 및 운영, 정산에 필요한 정보 관리&lt;/li&gt;
  &lt;li&gt;배달운영시스템과 MSA로 분리 구성이 됨으로써 AWS SNS/SQS이용한 상호 연동 처리&lt;/li&gt;
  &lt;li&gt;SAP(ERP) 시스팀과 연동 처리&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;적용된-기술셋&quot;&gt;적용된 기술셋&lt;/h2&gt;
&lt;h3 id=&quot;back-end&quot;&gt;Back-End&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Java v1.8&lt;/li&gt;
  &lt;li&gt;Spring-Boot v2.1&lt;/li&gt;
  &lt;li&gt;JPA v2.1&lt;/li&gt;
  &lt;li&gt;MySql v5.1&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;front-end&quot;&gt;Front-End&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;React v16.8&lt;/li&gt;
  &lt;li&gt;Mobx v5.9&lt;/li&gt;
  &lt;li&gt;Material-UI v3.9&lt;/li&gt;
  &lt;li&gt;Webpack v4.29&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;etc&quot;&gt;Etc&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;AWS - Elastic Beanstalk, SNS, SQS&lt;/li&gt;
  &lt;li&gt;Redis&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;간략한-시스템-구성도&quot;&gt;간략한 시스템 구성도&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post-img/projects/brms/brms-architecture.png&quot; alt=&quot;bros-architecture&quot; /&gt;
[그림 2] 구성도&lt;/p&gt;

&lt;h3 id=&quot;시스템-구성-설명&quot;&gt;시스템 구성 설명&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;각 서버는 Elastic Beanstalk으로 구성되며 내부 적으로 EC2인스턴스가 autoscaling으로 구성 되어 있음&lt;/li&gt;
  &lt;li&gt;MySql DB는 AWS-RDS를 사용, 마스터/슬레이브로 2중화 되어 운영&lt;/li&gt;
  &lt;li&gt;REDIS를 서버인증세션 저장 및 캐시의 용도로 사용&lt;/li&gt;
  &lt;li&gt;MSA로 분리된 라이더관리 시스템의 라이더관련 데이터를 AWS SNS/SQS를 이용, event-sourcing으로 이벤트를 발행하고 배달운영시스템(BROS) 및 타 시스템은 이벤드를 구독하여 동기화 처리를 할수 있도록 서버를 구성&lt;/li&gt;
  &lt;li&gt;사내 타 팀과 외부 업체와의 연동을 위해서 우리 시스템에 접근 하기위한 공개 API 서버를 운영함,&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;효과&quot;&gt;효과&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;React + Mobx의 &lt;code class=&quot;highlighter-rouge&quot;&gt;주말 개인 프로젝트로&lt;/code&gt; Front-End의 &lt;code class=&quot;highlighter-rouge&quot;&gt;60% 정도의 베이스코드를 완성&lt;/code&gt;하여 &lt;code class=&quot;highlighter-rouge&quot;&gt;실제 개발 기간단축&lt;/code&gt; 및 팀내 &lt;code class=&quot;highlighter-rouge&quot;&gt;차기 Front-End SPA 프레임워크 채택&lt;/code&gt;의 결정적 역할`을 함(vs Vue.js)&lt;/li&gt;
    &lt;li&gt;기존 배달운영시스템에 포함 되어 있던 라이더 관련 기능을 MSA로 별도의 시스템으로 분리 신규 개발&lt;/li&gt;
    &lt;li&gt;시스템간 강한 의존성을 제거&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;느낀점&quot;&gt;느낀점&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;MSA로 구성시 시스템간 단순 ACTION을 처리하는 것과는 다르게 DB 데이터를 완전히 분리하여 이벤트소싱으로 서로 동기화 하고 부가적인 연동 처리 (Email 발송, 회계시스템 연동 등등)등 다소 복잡한 구성을 MSA 로 처리한다는 것은 기술 문서나 기술동향에 정답이 있다기 보다 상황에 맞게 절절히 (비동기, 동기) 처리 해야함을 느낌&lt;/li&gt;
  &lt;li&gt;실무적인 경험이 더 중요한 분야 같음&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>김찬정</name>
        
        
      </author>

      

      
        <category term="projects" />
      

      
        <summary type="html">배달의민족 배민라이더스의 라이더운영시스템 프로젝트의 소개</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">배민라이더스운영시스템(BROS 2.0)</title>
      <link href="https://kimchanjung.github.io/projects/2020/01/01/bros-v2/" rel="alternate" type="text/html" title="배민라이더스운영시스템(BROS 2.0)" />
      <published>2020-01-01T08:00:00+09:00</published>
      <updated>2020-01-01T08:00:00+09:00</updated>
      <id>https://kimchanjung.github.io/projects/2020/01/01/bros-v2</id>
      <content type="html" xml:base="https://kimchanjung.github.io/projects/2020/01/01/bros-v2/">&lt;p&gt;배달의민족 배민라이더스의 배민라이더스운영시스템(BROS 2.0) 프로젝트 소개입니다.&lt;/p&gt;

&lt;h1 id=&quot;배민라이더스운영시스템bros-20&quot;&gt;배민라이더스운영시스템(BROS 2.0)&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;배민라이더스의 업무처리 및 관리를 위한 메인 시스템 
대부분 배민라이더스운영시스템을 운영 하고 신규 기능을 개발한는 것이 주 업무&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post-img/projects/bros2.0/brms-dashboard.png&quot; alt=&quot;bros-main&quot; /&gt;
[그림 1] 메인화면&lt;/p&gt;

&lt;h2 id=&quot;프로젝트-기간&quot;&gt;프로젝트 기간&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;2016.02 ~ 2019.01&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;프로젝트-참여도&quot;&gt;프로젝트 참여도&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;프로젝트 인원 6명&lt;/li&gt;
  &lt;li&gt;1차 신규 오픈 프로젝트에 참여함, 각자 분배된 분량의 백엔드 API 및 JS 프론트엔드 개발&lt;/li&gt;
  &lt;li&gt;추후 지속적인 운영과 신규 기능 추가 개발 업무&lt;/li&gt;
  &lt;li&gt;사실상 팀내 메인 운영 개발 시스템&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;주요-기능&quot;&gt;주요 기능&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;라이더의 실시간 주문처리현황 관제 및 운영을 제공&lt;/li&gt;
  &lt;li&gt;배달권역 설정, 배달료관련 설정 등등 운영에 필요한 설정 기능을 제공&lt;/li&gt;
  &lt;li&gt;라이더 배달료 정산에 필요한 각종 데이터 및 지표 제공&lt;/li&gt;
  &lt;li&gt;BROS 1.0에 더 추가된 각종 기능 셋 제공&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;적용된-기술셋&quot;&gt;적용된 기술셋&lt;/h2&gt;
&lt;h3 id=&quot;back-end&quot;&gt;Back-End&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Java v1.8&lt;/li&gt;
  &lt;li&gt;Spring-Boot v1.5&lt;/li&gt;
  &lt;li&gt;JPA v1.5&lt;/li&gt;
  &lt;li&gt;MySql v5.1&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;front-end&quot;&gt;Front-End&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;WoowahanJS(사내 Javascript SPA Framework)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;etc&quot;&gt;Etc&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;AWS - Elastic Beanstalk, SNS, SQS&lt;/li&gt;
  &lt;li&gt;Redis&lt;/li&gt;
  &lt;li&gt;Websocket&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;간략한-시스템-구성도&quot;&gt;간략한 시스템 구성도&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post-img/projects/bros2.0/bros-architecture.png&quot; alt=&quot;bros-architecture&quot; /&gt;
[그림 2] 구성도&lt;/p&gt;

&lt;h3 id=&quot;시스템-구성-설명&quot;&gt;시스템 구성 설명&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;각 서버는 Elastic Beanstalk으로 구성되며 내부 적으로 EC2인스턴스가 autoscaling으로 구성 되어 있음&lt;/li&gt;
  &lt;li&gt;MySql DB는 AWS-RDS를 사용, 마스터/슬레이브로 2중화 되어 운영&lt;/li&gt;
  &lt;li&gt;REDIS를 서버인증세션 저장 및 캐시의 용도로 사용&lt;/li&gt;
  &lt;li&gt;웹소켓 서버는 redis pub/sub 사용하여 메시지가 여러대의 서버에 공유될 수 있도록 처리&lt;/li&gt;
  &lt;li&gt;라이더앱과 백오피스는 웹소켓서버를 통하여 실시간 배달상태변경 및 라이더의 배달현황/위치를 동기화 함&lt;/li&gt;
  &lt;li&gt;MSA로 분리된 라이더관리 시스템의 라이더관련 데이터를 AWS SNS/SQS를 이용, event-sourcing으로 동기화 처리를 담당하는 서버를 운영함&lt;/li&gt;
  &lt;li&gt;사내 타 팀과 외부 업체와의 연동을 위해서 우리 시스템에 접근 하기위한 공개 API 서버를 운영함,&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;효과&quot;&gt;효과&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;AWS 인프라 위에서 개발된 팀내 최초 프로젝트로써 수직 상승하는 사업 니즈에 맞춰 flexible한 인프라 자원 운영이 가능해짐&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;느낀점&quot;&gt;느낀점&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;본격적으로 팀내 코드 리뷰, 테스트코드, Pair Programming 문화가 정착 되기 시작한 프로젝트&lt;/li&gt;
  &lt;li&gt;팀내 개발 문화가 시스템 안정성을 높이는 결과를 가져왔음(무장애 300일)&lt;/li&gt;
  &lt;li&gt;장애 발생시 대외 신뢰성 추락, 금전적 피해를 감안해 보았을 때 안정성은 매우 중요한 가치라는 것을 증명해 보임(결과물을 빨리 내는 것에 대비하여)&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>김찬정</name>
        
        
      </author>

      

      
        <category term="projects" />
      

      
        <summary type="html">배달의민족 배민라이더스의 배민라이더스운영시스템(BROS 2.0) 프로젝트 소개입니다.</summary>
      

      
      
    </entry>
  
</feed>
