<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator>
  <link href="https://kimchanjung.github.io/tag/tech/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://kimchanjung.github.io/" rel="alternate" type="text/html" />
  <updated>2020-07-29T19:36:43+09:00</updated>
  <id>https://kimchanjung.github.io/tag/tech/feed.xml</id>

  
  
  

  
    <title type="html">kimchanjung | </title>
  

  
    <subtitle>Developer KimChanJung's Blog</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">[Mobx] React 에서 Mobx 사용기</title>
      <link href="https://kimchanjung.github.io/tech/2020/05/08/react-mobx/" rel="alternate" type="text/html" title="[Mobx] React 에서 Mobx 사용기" />
      <published>2020-05-08T00:00:00+09:00</published>
      <updated>2020-05-08T00:00:00+09:00</updated>
      <id>https://kimchanjung.github.io/tech/2020/05/08/react-mobx</id>
      <content type="html" xml:base="https://kimchanjung.github.io/tech/2020/05/08/react-mobx/">&lt;p&gt;react와 mobx그리고 material-ui를 이용한 개발기와 예제코드를 통한 mobx vs react 차이점 비교 및 atomic design을 통한 프로젝트구조 react 서드파티 라이브러리 리뷰정보등을 알아봅니다.&lt;/p&gt;

&lt;h1 id=&quot;react에서-mobx-경험기-redux와-비교기&quot;&gt;React에서 Mobx 경험기 (Redux와 비교기)&lt;/h1&gt;

&lt;p&gt;안녕하세요 딜리버리플랫폼팀 김찬정입니다.&lt;/p&gt;

&lt;h2 id=&quot;이-글의-목적&quot;&gt;이 글의 목적&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;React와 함께 사용하는 State(상태)관리 라이브러리&lt;/strong&gt;중 가장 많이 사용되고 있는 &lt;strong&gt;Redux&lt;/strong&gt;와 또 다른 라이브러리인 &lt;strong&gt;Mobx&lt;/strong&gt;를 직접 사용하여 개발해 보고 느낀 &lt;strong&gt;차이점과 Mobx만의 장점&lt;/strong&gt;, 그리고 &lt;strong&gt;Java Spring Framework와 Mobx의 유사성&lt;/strong&gt;을 예제 코드와 함께 비교 해보려고 합니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;많은 분들이 &lt;strong&gt;React 자체 보다는 Redux를 적용&lt;/strong&gt; 하기 위해서 경험하는 &lt;strong&gt;러닝커브가 생각보다 높아서 React가 어렵다고&lt;/strong&gt;들 느끼시는 것 같고 저도 공감이 되는 부분이긴 합니다. 하지만 초반 러닝커브를 극복하면 단순히 React만 사용 했을 때보다 &lt;strong&gt;장점들이 분명&lt;/strong&gt;히 있기 때문에 State관리 라이브러리를 사용하는 것이 결론적으로 &lt;strong&gt;더 낫다고 개인적&lt;/strong&gt;으로는 생각합니다. (이유는 이후에 설명하도록 하겠습니다.) 그런 맥락에서 &lt;strong&gt;Mobx는 Redux에 비해서 눈에 띄는 강력한 장점&lt;/strong&gt;들이 있습니다. 용어 설명 이후에 바로 장점을 이야기 해보도록 하겠습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;이 글은 경험에 의한 지극히 주관적인 견해임을 미리 밝혀 둡니다.&lt;br /&gt;
튜토리얼 개념으로 예제 코드를 작성한 것이 아닌, 부연설명을 위한 목적이므로 코드상 빠진 부분이 있음을 미리 밝힙니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Mobx의 장점과 특징(예제코드)&lt;/li&gt;
  &lt;li&gt;Mobx와 Redux의 비교 (예제 코드)&lt;/li&gt;
  &lt;li&gt;Mobx와 Java Spring의 유사성(예제 코드)&lt;/li&gt;
  &lt;li&gt;React 개발시 효율적인 Directory 구조와 예시 (Atomic Design)&lt;/li&gt;
  &lt;li&gt;React Component를 구분 하여 사용하는 예&lt;/li&gt;
  &lt;li&gt;Redux와 일반적으로 같이 사용하는 라이브러리들&lt;/li&gt;
  &lt;li&gt;React용으로 재구성된 UI 라이브러리들의 적용기 및 장단점(Material-UI, React-Bootstrap, Reactstrap)분석&lt;/li&gt;
  &lt;li&gt;Redux Form Validation 라이브러리들의 적용기 및 장단점 분석&lt;/li&gt;
  &lt;li&gt;Mobx Model 라이브러리들의 적용기 및 장단점 분석&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;용어-설명&quot;&gt;용어 설명&lt;/h2&gt;

&lt;h3 id=&quot;react&quot;&gt;React&lt;/h3&gt;

&lt;p&gt;Javascript Web Front-End Rendering 라이브러리 중 하나&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;보통 Single Page Application Framework가 대부분의 기능을 포함 하고 있는 반면에 React는 대부분의 기능을 포함하고 있는. Framework가 아니라 View를 Rendering 하는 것이 주 기능이며 나머지 기타 기능들(router, ajax등등)은 서드파티 라이브러리를 추가적으로 사용해야 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;component&quot;&gt;Component&lt;/h3&gt;

&lt;p&gt;React에서 &lt;strong&gt;데이터를 화면에 렌더링하는 가장 기본이 되는 단위&lt;/strong&gt; 라고 할 수 있겠습니다. &lt;strong&gt;React.Component를 상속하는 클래스형태&lt;/strong&gt;의 Component와 &lt;strong&gt;함수형태의 Component 두가지 형태&lt;/strong&gt;를 가지고 있으며 &lt;strong&gt;목적에 따라 구분해서 사용&lt;/strong&gt;합니다. React는 작은 단위 부터 큰단위의 &lt;strong&gt;Component의 조합으로 구성&lt;/strong&gt;되며 상단메뉴, 검색폼, 검색 데이터 그리드와 같이 Component를 분리하여 개발하고 &lt;strong&gt;각각을 적절히 조합하여 하나의&lt;/strong&gt; Page를 구성하는 형태로 개발 합니다.&lt;/p&gt;

&lt;h3 id=&quot;state&quot;&gt;State&lt;/h3&gt;

&lt;p&gt;React Component에서 변경가능한 데이터를 state라고 부릅니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;본 포스팅에서 데이터와 State는 거의 같은 의미로 사용됩니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;props&quot;&gt;Props&lt;/h3&gt;

&lt;p&gt;자식 컴포넌트가 부모 컴포넌트로 부터 Parameter로 받아 오는 값을 말하며 변경을 할 수 없습니다.&lt;/p&gt;

&lt;h3 id=&quot;store&quot;&gt;Store&lt;/h3&gt;

&lt;p&gt;Global영역에서 애플리케이션의 State와 비즈니스로직을 가지고 있고 있는 주체를 Store라고 합니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;State를 Global한 영역에서 관리한다는 말은 즉 State관리 라이브러리 사용의 목적중 한가지 입니다.&lt;/p&gt;

  &lt;p&gt;Redux에서는 State와 State를 핸들링하는 비즈니스로직을 가지고 있는 Reducer, Action등을 포함하는 의미 이기도 하지만, Mobx에서 Store는 명확히 State와 비즈니스로직을 포함하는 Class를 Store라고 부릅니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;redux&quot;&gt;Redux&lt;/h3&gt;

&lt;p&gt;Flux개념을 바탕으로한 React에서 현재 가장 많이 사용되는 State 관리 라이브러리 입니다.&lt;/p&gt;

&lt;h3 id=&quot;mobx&quot;&gt;Mobx&lt;/h3&gt;

&lt;p&gt;Redux와 또 다른 &lt;strong&gt;State관리 라이브러리&lt;/strong&gt;이며 이글을 작성하는 목적의 라이브러리입니다. 기본적으로 &lt;strong&gt;객체지향 느낌&lt;/strong&gt;이 강하며 Component와 State를 연결하는&lt;strong&gt;(Redux와 달리)&lt;/strong&gt; 번잡한 보일러플레이트 코드들을 데코레이터(애노테이션)제공으로 깔끔하게 해결합니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;추후 예제 코드를 보면 아시 겠지만 데코레이터를 사용하는 장점이 얼마나 큰지 느끼실 수 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;observable&quot;&gt;Observable&lt;/h3&gt;

&lt;p&gt;Mobx에서 Rerendering 대상이 되는 state(상태, 값)를 관찰 대상(observable value)라고 칭하며 &lt;strong&gt;@observable&lt;/strong&gt; 데코레이터로 지정한 &lt;strong&gt;State는 관찰대상&lt;/strong&gt;으로 지정되고 그 State는 값이 변경될 때 마다 &lt;strong&gt;Rerendering&lt;/strong&gt;됩니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;이것이 사실 Mobx가 동작하는 가장 기본 개념입니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;불변성&quot;&gt;불변성&lt;/h3&gt;

&lt;p&gt;React에서 렌더링을 할 때 판단 하는 방법은 State가 변경 되었을 때 인데 &lt;strong&gt;변경전/변경후&lt;/strong&gt; State를 서로 비교 할 때 복잡도가 높은 객체의 경우 자식 Property까지 비교하는 것 보다 효율적인 방법으로 &lt;strong&gt;State의 레퍼런스가 변경&lt;/strong&gt;되었을 때 변경된 것으로 간주 하고 렌더링을 합니다. 이경우 &lt;strong&gt;기존 State 값을 직접 변경하는 것이 아니라&lt;/strong&gt;. 기존 State값을 바탕으로 변경되어 새로 생성된 객체의 레퍼런스를 &lt;strong&gt;setState&lt;/strong&gt; 메소드를 통하여 변경하는데, 이것을 즉 &lt;strong&gt;불변성&lt;/strong&gt;을 유지한다 라고 표현합니다.&lt;/p&gt;

&lt;h2 id=&quot;mobx의-장점&quot;&gt;Mobx의 장점&lt;/h2&gt;

&lt;h3 id=&quot;객체지향적&quot;&gt;객체지향적&lt;/h3&gt;

&lt;p&gt;보다 &lt;strong&gt;객체지향적&lt;/strong&gt;입니다 ES6에서 추가된 Class를 이름뿐인 Class가 아니라 객체지향적으로 사용하고 개발하는 것을 권장하고 있습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;도메인모델로 분리됨으로 써 집중된 비즈니스 로직은 적절히 분산되고 도메인간의 상호작용은 message를 주고 받는 형태로 구현 할 수 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;서버개발자들에게-친숙한-아키텍쳐&quot;&gt;서버개발자들에게 친숙한 아키텍쳐&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Java Spring Framework&lt;/strong&gt;와 유사한 아키텍쳐구조를 지향하고 있어 &lt;strong&gt;서버개발자들에게 보다 친숙하고 낮은 러닝커브&lt;/strong&gt;를 제공, 장점을 그대로 적용할 수 있습니다. (흥분되는 부분 이기도 합니다)&lt;/p&gt;

&lt;h3 id=&quot;decorator&quot;&gt;Decorator&lt;/h3&gt;

&lt;p&gt;데코레이터(java 애노테이션과 유사하다고 보면 된다)를 제공하기 때문에 Redux를 사용할 때 React Component와 state를 연결 하기위한 &lt;strong&gt;mapStateToProps&lt;/strong&gt;, Redux action을 연결을 위한 &lt;strong&gt;mapDispatchToProps&lt;/strong&gt; 그리고 &lt;strong&gt;bindActionCreators&lt;/strong&gt;…. 등등의 &lt;strong&gt;보일러플레이트 코드가 사라지고&lt;/strong&gt; 데코레이터가 처리하기 때문에 너무나도 깔끔한 코드가 생성됩니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Redux로 개발 해보신 분이라면 느끼시겠지만 보일러플레이트 코드들의 양 만만하지 않고 또 그런 코드들을 작성하기 위해서는 어느정도 학습이 동반되어야 합니다.&lt;/p&gt;

  &lt;p&gt;Redux가 어렵다가 아니라 React가 Vue보다 어렵다고 하는 이유에도 이부분도 한 몫하는 것 같습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;캡슐화&quot;&gt;캡슐화&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Mobx Configuration 설정&lt;/strong&gt;으로 &lt;strong&gt;State를 오직 메소드&lt;/strong&gt;를 통하여 변경할 수 있도록 &lt;strong&gt;Private&lt;/strong&gt;하게 관리 할 수 있습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Javascript는 기본적으로 접근제어자를 제공하지 않아서 데이터 핸들링 비즈니스 로직이 펴져 버리고, 사이드 이펙트가 발생할 확률이 높고 또한 잘 관리하지 않으면 번잡스러운 코드가 생산되기 쉽습니다.&lt;/p&gt;

  &lt;p&gt;하지만 접근제어자가 없다고 해도 캡슐화를 구현할 수 있는 방법들이 있긴하지만 잘 활용되어 지지는 않습니다.&lt;/p&gt;

  &lt;p&gt;Mobx는 Configuration에서 옵션 한줄로 state의 변경은 해당 클래스의 메소드를 통해서만 변경할 수 있도록 할 수 있고&lt;/p&gt;

  &lt;p&gt;도메인 모델간의 message를 통한 상호작용 코드 패턴을 유지해 나갈 수 있도록 해줍니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;불변성-유지를-위한-노력이-불필요&quot;&gt;불변성 유지를 위한 노력이 불필요&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;State의 불변성을 유지&lt;/strong&gt;하기 위해서 번잡스러운 코드나 &lt;strong&gt;ImmutableJs&lt;/strong&gt;같은 라이브러리를 따로 사용할 필요가 없습니다. 이것이 왜 장점이 되냐 하면 &lt;strong&gt;불변성을 유지하면 서 State를 변경하는 코드&lt;/strong&gt;는 Object가 Depth가 깊어지게 되면 &lt;strong&gt;코드의 가독성이 매우 떨어&lt;/strong&gt;집니다. 그래서 &lt;strong&gt;ImmutableJs&lt;/strong&gt; 라이브러리를 사용하게 되는데 &lt;strong&gt;Redux와 같이 사용하게 될 경우&lt;/strong&gt; 여러가지 설정이 필요하고 추가적인 라이브러리도 필요할 뿐 만 아니라 추가적인 학습도 동반 되어야 합니다.&lt;/p&gt;

&lt;h2 id=&quot;state관리-라이브러리-사용-목적&quot;&gt;State관리 라이브러리 사용 목적&lt;/h2&gt;

&lt;h3 id=&quot;다중-계증-컴포넌트에서-데이터와-메소드-접근의-복잡성-해결&quot;&gt;다중 계증 컴포넌트에서 데이터와 메소드 접근의 복잡성 해결&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;여러개의 Component 컴포넌트가 조합&lt;/strong&gt;되에 페이지가 구성된다고 할때 &lt;strong&gt;Component간 상호작용&lt;/strong&gt; 즉 &lt;strong&gt;데이터(State, Props)와 메소드&lt;/strong&gt;의 접근이 까다롭게 됩니다. SPA 개발이 없던 시절 서버렌더링 페이지에서 Jquery로 Dom을 조작하고 함수를 호출 할때는 &lt;strong&gt;Global Scope에서 대부분 이루어져서&lt;/strong&gt; 크게 문제가 없었습니다. 그러나 &lt;strong&gt;기능 단위의 Component&lt;/strong&gt;로 이루어진 최근의 SPA Framework에서는 &lt;strong&gt;부모자식의 관계로 Scope&lt;/strong&gt;이루어져 있기 때문이 각 Component간 state와 method 접근이 복잡해 질수 있습니다. 이를 해결하기 위해서 State를 Global한 Store영역에서 관리하는 방법을 사용하여 state와 method의 접근이 용이 하게 됩니다.&lt;/p&gt;

&lt;h3 id=&quot;컴포넌트에-집중된-비즈니스-로직의-분리&quot;&gt;컴포넌트에 집중된 비즈니스 로직의 분리&lt;/h3&gt;

&lt;p&gt;State관리 라이브러리 없이 &lt;strong&gt;React Component로만 개발&lt;/strong&gt;하게 되면 거의 대부분의 &lt;strong&gt;비즈니스로직이 Component에만 집중&lt;/strong&gt;되게 되고 코드는 점점더 스파게티화 되기 마련입니다. 하지만 State관리 라이브러리를 사용하게 되면 &lt;strong&gt;Component는 Controller에 해당하는 역할&lt;/strong&gt;을 주로 하게 두고 나머지 로직은 적절히 분리하여 아키텍쳐를 구성할 수 있는 이점이 있습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;복잡한 페이지의 프로그램이 아니라면 사용할 필요가 없다는 의견도 있지만, 개인적으로는 실무에서 가장 기본적인 형태의 페이지라도 비즈니스로직을 분리하지 않고도 깔끔하게 코드를 유지할 정도으 규모는 보지 못해서 사용하는 편이 낫다고 생각이 됩니다. 어디까지나 개인적인 경험에서 오는 견해임을 밝혀 둡니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;mobx에-앞서-redux&quot;&gt;Mobx에 앞서 Redux&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Redux에 비해 Mobx를 사용했을 때 장점을 이야기 하는 것 이지 State관리 라이브러리인 Redux를 사용하는 것 자체를 단점으로 이야기하는 것이 아닙니다. 다시 생각해도 State관리 라이브러리 없는 Component만 가지고 개발 하는 것 보다 다소 러닝커브가 있더라도 개인적으로는 State 관리 라이브러리를 사용 할 것 같습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;redux의-데이터-흐름&quot;&gt;Redux의 데이터 흐름&lt;/h3&gt;

&lt;p&gt;다음 이미지는 &lt;strong&gt;Google로 ‘redux diagram’ 키워드&lt;/strong&gt;로 검색했을 때 검색된 결과 들입니다. 리덕스의 개념을 설명하는데 &lt;strong&gt;Data Flow Diagram&lt;/strong&gt;이 자주 등장 합니다. &lt;strong&gt;Action, Reducer, Dispatcher, Store, View&lt;/strong&gt; 이런 개념들은 사실 State를 렌더링 하고 변경하기 위한 어떤 메소드 즉 서비스 같은 것을 가져다 그냥 사용하는 것 뿐인 데 개념을 장황하게 설명합니다. 그리고 그것들이 상호 작용하기 위해서 추가 해주는 보일러플레이트 코들이 매 Component마다 추가 해주어야합니다. 컴포넌트와 리덕스를 연결하기위해서 &lt;strong&gt;mapStateToProps, mapDispatchToProps&lt;/strong&gt; 함수를 사용하고 &lt;strong&gt;Action을 정의&lt;/strong&gt; 하고.. 등등 &lt;strong&gt;Javascript의 높은 문법 자유&lt;/strong&gt;도 때문에 &lt;strong&gt;예제 코드들의 선언 방식 또한 자유 분방&lt;/strong&gt;합니다. 바로 이런 것들이 React가 다소 어렵다라는 인식을 주게되는 하나의 요인 같댜는 생각이 개인적으로 들기도 합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post-img/react-mobx/redux-diagram.jpg&quot; alt=&quot;redux-data-flow-diagram&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그림 1. redux diagram 키워드 검색한 결과&lt;/p&gt;

&lt;h3 id=&quot;redux의-테크트리&quot;&gt;Redux의 테크트리?&lt;/h3&gt;

&lt;p&gt;Redux를 사용하다보면 &lt;strong&gt;redux-thunk, redux-saga, reselect&lt;/strong&gt; 등등 관련 라이브러리들이 등장합니다. 아래 링크는 어떤 개발자가 약간? 위트를 가미한 React + Redux를 개발하는 개발자가 겪게 되는 일련의 흐름을 포스팅 한 내용입니다. &lt;a href=&quot;https://repo.yona.io/doortts/blog/post/297&quot;&gt;리액트개발자가 겪게되는 길&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Redux를 사용하기 위해 더 많은 라이브러리를 선택하고 사용해야 하는 고민에 빠지게 되는 점도 React가 어렵다(Redux가 어려운 것 인데.)라고 인식하게 되는 요인중 하나라로 생각됩니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;본격적으로-mobx&quot;&gt;본격적으로 Mobx&lt;/h2&gt;

&lt;p&gt;앞서 언급한 대로 &lt;strong&gt;Mobx는 Redux와 비슷한 종류의 State관리 라이브러리&lt;/strong&gt;입니다. 위 언급한 Redux와는 다르게 너무나도 &lt;strong&gt;간결하고 깔끔한 구조&lt;/strong&gt;를 가지고 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;mobx의-기본개념-및-특징&quot;&gt;Mobx의 기본개념 및 특징&lt;/h3&gt;

&lt;p&gt;Mobx의 &lt;strong&gt;State(데이터)의 흐름과 핵심 개념&lt;/strong&gt;을 간단하게 표현 해보았습니다. 사실 더 자세한 개념은 공식문서에 있지만 이해하는 데 방해가되는 개념은 제외하고 제가 이해한 부분을 간략하게 그려보았습니다. 배달 리스트를 가져오기 위해서 &lt;strong&gt;DeliveryStore&lt;/strong&gt;(Spring의 서비스의 역할과 거의 비슷하다)의 &lt;strong&gt;findAllDeliveries&lt;/strong&gt;를 호출하여 서버로 부터 가져온 데이터를 선언해둔 &lt;strong&gt;deliveries&lt;/strong&gt; state에 할당 해주면 &lt;strong&gt;DeliveryComponent&lt;/strong&gt;에서 &lt;strong&gt;deliveries&lt;/strong&gt; 를 Rendering 하게 되는데 이것이 기본 동작 개념입니다. 기타 &lt;strong&gt;Mobx Store&lt;/strong&gt;와 &lt;strong&gt;React 컴포넌트를 연결&lt;/strong&gt;하는 방법은 Redux와 달리 &lt;strong&gt;@inject&lt;/strong&gt; 데코레이더 한줄로 이루어 집니다. 물론 그외 여러가지 기능을 하는 &lt;strong&gt;데코레이더 들이 제공&lt;/strong&gt;되고 있으며 설명은 이후 자세히 하겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post-img/react-mobx/mobx-data-flow.jpg&quot; alt=&quot;mobx-data-flow-diagram&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그림 2. mobx 데이터 흐름&lt;/p&gt;

&lt;h3 id=&quot;mobx의-아키텍쳐&quot;&gt;Mobx의 아키텍쳐&lt;/h3&gt;

&lt;p&gt;Mobx는 렌더링 할 State를 관찰대상으로 지정, State를 변경하면 React Component Render 메소드에 의해서 Rerendering 되는 아키텍쳐를 기본 골격으로 합니다. 예제와 함께 Mobx의 작동 방식과 특징을 알아 보겠습니다. 마치 &lt;strong&gt;Java Spring Framework유사한 Layer 아키텍쳐&lt;/strong&gt;를 가지고 있고 실제로 그런식으로 Layer를 분리하여 아키텍쳐를 구성하는 것을 권장하고 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post-img/react-mobx/mobx-spring-layer.png&quot; alt=&quot;mobx-spring-layer-table&quot; /&gt;&lt;br /&gt;
표 1.spring과 mobx layer 비교&lt;/p&gt;

&lt;h3 id=&quot;store--service&quot;&gt;Store = Service&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Java Spring Service와 비슷한 역할&lt;/strong&gt;을 합니다. 차이점 이라면 BackEnd Server의 Service(Spring)에서는 다수의 요청자에 의해서 요청 되기 때문에 &lt;strong&gt;특별한 상황이 아니라면 상태를 가지고 있지 않는데&lt;/strong&gt; Mobx Store는 &lt;strong&gt;observable한 state(상태)&lt;/strong&gt;를 가지고 있다는 점 입니다. Client는 사용자와 1:1 이기 때문에 서버측의 Service에서 상태와는 상황이 다릅니다. 하지만&lt;strong&gt;Store는 싱글톤으로 유지 해야&lt;/strong&gt; 합니다. 만약 싱글톤이 아니라면 Component에 Inject된 Store는 매번 새로운 Instance가 되고 &lt;strong&gt;Observable State&lt;/strong&gt;가 따로 생성되어 지게 됩니다. 이런 경우 상단 &lt;strong&gt;메뉴 바의 크기를 변경하는 Store&lt;/strong&gt;를 각각 페이지에서 Inject하여 &lt;strong&gt;changeMenuBarSize&lt;/strong&gt;라는 메소드를 통하여 &lt;strong&gt;menuBarSize&lt;/strong&gt;라는 State를 변경한다고 하면 싱글톤이 아닐 때는 menuBarSize = ‘50px’라고 변경해도 menuBarSize는 실제 메뉴바의 사이즈를 가지고 실제 렌더링하는 state가 아닌 개별 Instance Store의 State일 것 입니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Autobind&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RiderStore&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;observable&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;riderList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rootStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rootStore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rootStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// 비동기인 경우 @action 대신 @asyncAction&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;asyncAction&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;findAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;riderRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;findAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;riderList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rider&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RiderModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// 라이더 리스트에서 특정 요소를 제거 하는 메소드 인데 @observable로 지정된 property의&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 변경은 store의 메소드에 의해서만 가능하다(@action decorator를 추가한)&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 그렇게 때문에 비즈니스 로직이 여기저기 퍼져 나가는 것을 애초에 막을 수&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 있어서 객체지향적인 코드를 유지 해 나갈 수 있다.&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;action&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;removeRider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;riderList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;splice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// 비즈니스 로직이 포함된 getter다 @computed 데코레이터는 반환하는 값이 변경되 었을 때&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// rerendering을 하는데 값이 변경 되었다 하더라도 변경되기 전과 같은 값이라면 불필요하게 &lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// rerendering을 하지 않는다.&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;computed&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;activeRiders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;riderList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rider&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isActive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RiderStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;코드 1.Mobx의 Store&lt;/p&gt;

&lt;h3 id=&quot;repository--repository&quot;&gt;Repository = Repository&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Mobx Repository&lt;/strong&gt;는 &lt;strong&gt;Ajax로 데이터를 가져오는 부분&lt;/strong&gt;입니다. 데이터를 가져오는 부분도 Layer를 나누어 구성하는 것을 권장하고 있습니다. &lt;strong&gt;비즈니스 로직 분리&lt;/strong&gt;의 이점도 있지만 Test 코드 작성 시 &lt;strong&gt;Mocking이 용이&lt;/strong&gt; 하다는 장점도 있습니다. (물론 ajax 자체를 mocking 할 수 있는 라이브러리도 있지만)&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RiderRepository&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;URL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/v1/api/riders&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;URL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;findAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;axios&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;findOne&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;riderAccountId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;axios&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;agencyId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 싱글톤으로 리턴 (매번 새로운 객체를 생성 할 필요가 없다면 처음 부터 싱글톤으로 export)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RiderRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;코드 2. Mobx Repositry Layer&lt;/p&gt;

&lt;h3 id=&quot;model--entity-or-dto&quot;&gt;Model = Entity or Dto&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Spring의 Entity/Dto&lt;/strong&gt; 와 유사하다고 보면 됩니다. 도메인 로직을 Model Layer에 구성하는데 차이 점이라면 미리 필드 (property)들을 선언 하지 않아도 &lt;strong&gt;Object.assign&lt;/strong&gt; 사용해서 &lt;strong&gt;동적으로 추가&lt;/strong&gt;하면 되기 때문에 특별히 미리 선언할 필드가 없다면 아래 처럼 간단하게 선언 할 수 있습니다. &lt;strong&gt;extendObservable&lt;/strong&gt;은 &lt;strong&gt;Mobx가 제공하는 api&lt;/strong&gt;로 Object.assign 처럼 property와 값을 Target 오브젝트에 합쳐 주는데, 특징이라면 &lt;strong&gt;관찰 가능한&lt;/strong&gt;(Rerendering 대상이 되는 값으로 만들어 추가해준다) &lt;strong&gt;Property로 만들어 추가&lt;/strong&gt;합니다. 합치려는 객체의 Property가 &lt;strong&gt;이미 선언 되어 있는 경우는 사용 할 수 없기 때문에&lt;/strong&gt; 그런경우는 &lt;strong&gt;Mobx에서 제공하는 set api를 사용&lt;/strong&gt;하면 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;미리 선언된 property가 없고 서버에서 받아온 JSON을 RiderModel로 생성하는 가장 심플한 예&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Autobind&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RiderModel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;extendObservable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// 라이더명과 지점명을 합친 getter&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 모델 자신의 비즈니스로직을 가지고 있다. 모델 레이어가 없다면 아마도 아래 예제 처럼&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 비즈니스 로직이 널리 퍼졌을 것이다.&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;computed&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;riderWithAgency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;riderName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;agencyName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;)`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;action&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;changeRiderName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;riderName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;riderName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;riderName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;c1&quot;&gt;// 렌더링 대상이 아니면 @computed는 필요없다.&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;isActive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ACTIVE'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RiderModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;코드 3. Mobx Model Layer - extendObservable&lt;/p&gt;

&lt;h4 id=&quot;미리-선언된-property가-있는-model에-서버에서-가져온-json으로-객체를-생성하는-경우&quot;&gt;미리 선언된 Property가 있는 Model에 서버에서 가져온 JSON으로 객체를 생성하는 경우&lt;/h4&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Autobind&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RiderModel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;observable&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;riderName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;computed&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;riderNameWithAgency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;riderName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;agencyName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;)`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;action&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;changeRiderName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;riderName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;riderName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;riderName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RiderModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;코드 4. Mobx Model Layer - set&lt;/p&gt;

&lt;h4 id=&quot;model-layer가-없는-경우-비즈니스-로직의-집중&quot;&gt;Model Layer가 없는 경우 비즈니스 로직의 집중&lt;/h4&gt;

&lt;p&gt;일반적으로 &lt;strong&gt;Model Layer&lt;/strong&gt; 없이 JavaScript 개발을 해왔다면 아마도 이런 식으로 &lt;strong&gt;Component에 비지니스 로직이 집중&lt;/strong&gt; 되었을 것입니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 이런형태의 배열 데이터가 있다고 하자.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;riderList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'홀길동'&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;agencyName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'강남지점'&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'이순신'&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;34&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;agencyName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'송파지점'&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SearchRider&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

   &lt;span class=&quot;nx&quot;&gt;componentDidMount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Component가 Mount될 때 서버에서 라이더 리스트를 가져오는 로직&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;riders&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;axios&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'http://www.rider.com/api/riders'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rider&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;rider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;riderNameWithAgency&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;riderName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;agencyName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;)`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;riders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 특정 라이더의 이름을 변경하는 경우의 로직도 Component 메소드에..&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;chanageRiderName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;riderName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;riderId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;riders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rider&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;riderId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;riderId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;rider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;riderName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;riderName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;riders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;riders&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.........&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;코드 5. Component에 집중된 비즈니스 로직.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;위 예제 처럼 도메인 로직이 해당 컴포넌트에 있었을 것이다 이런 것들이 한두개씩 늘어나면 Component는 그야말로 hell이다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;observable-1&quot;&gt;Observable&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Rendering 대상이 되는 State를 관찰 대상&lt;/strong&gt;이라고 칭하고 &lt;strong&gt;@observable&lt;/strong&gt; 데코레이터로 &lt;strong&gt;Observable State로 만들어&lt;/strong&gt; 줍니다. &lt;strong&gt;Presentational Component&lt;/strong&gt;에서 값이 변경될 때 마다 값이 반영 되어 보여지게 됩니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Autobind&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// javascript this bind를 자동으로 해주는 데코레이(arrow function 사용 없이)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SearchRiderStore&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 라이더 리스트 state를 렌더링 할 것 이고 @observable 데코레이터를 추가하면 선언됩니다.&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;observable&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;riderList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rootStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// rootStore를 통하여 다른 store(spring 서비스라고 생각하면 이해가 쉽다.)를 사용 할 수 있다.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// rootStore.deliveryStore.findAll() &amp;lt;- 이런식으로&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rootStore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rootStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;asyncAction&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;findAllRider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;riderRepositiry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;findAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;riderList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rider&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RiderModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;코드 6. 라이더 리스트 데이터를 핸들링하는 역할을 하고 있는 Mobx Store&lt;/p&gt;

&lt;p&gt;위에 선언된 &lt;strong&gt;SearcRiderStore&lt;/strong&gt;에 &lt;strong&gt;riderList&lt;/strong&gt;는 아래와 같이 렌더링 state로 사용됩니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// @inject 데코레이터 만으로 쉽게 riderStore를 inject한(redux와 비교하면 정말 간단하다)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;inject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;searchRiderStore&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;observer&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// mobx observable state 를 rerendring 하기위에선언해준다&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Autobind&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// arrow function 없이 this를 자동으로 바인딩시켜준다.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SearchRiderContainer&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;extendsReact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;componentDidMount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;searchRiderStore&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 컴포넌트가 마운트 되면 라이더를 가져온다&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;searchRiderStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;findAllRider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;riderList&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;searchRiderStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 라이더 리스트를 데이블로 렌터링&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;코드 7. Component에서 RiderStore를 연결하고 RiderList를 렌더링&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Mobx의 Observable State가 작동하는 경우와 그렇지 않는 경우는 공식문서에 나와 있는 설명을 잘 살펴 보아야 합니다.분명히 @observable 데코레이터로 지정하고 값을 변경했는데 Rerendering이 되지 않는 경우의 케이스를 잘 파악해 놓아야 삽질을 피할 수 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;mobx와-redux의-비교&quot;&gt;Mobx와 Redux의 비교&lt;/h2&gt;

&lt;p&gt;이제 부터 Mobx와 Redux의 차이점을 예제 코드와 함께 비교해 보도록 하겠습니다.&lt;/p&gt;

&lt;h3 id=&quot;같은-역할을-하는-두-라이브러리의-layer또는-라이브러리&quot;&gt;같은 역할을 하는 두 라이브러리의 Layer(또는 라이브러리)&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post-img/react-mobx/mobx-redux-layer.png&quot; alt=&quot;mobx-redux-layer-table&quot; /&gt;&lt;br /&gt;
표 2. Mobx와 Redux Layer 비교&lt;/p&gt;

&lt;h3 id=&quot;service-layer---storemobx-vs-reducerredux&quot;&gt;Service Layer - Store(Mobx) VS Reducer(Redux)&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Service Layer의 역할&lt;/strong&gt;을 담당하는 &lt;strong&gt;Mobx의 Store&lt;/strong&gt;와 &lt;strong&gt;Redux의 Reducer&lt;/strong&gt;를 예제 코드를 통하여 비교해 보도록 하겠습니다. 역할은 비슷하지만 선언 방식이 각각 Class, Function으로 스타일이 서로 다르고 Redux의 경우 ACTION 타입을 정의하고, ACTION을 생성하는 행위들이 추가로 들어가야 된다는 차이가 있습니다. 코드상으로는 Mobx의 Class 선언 방식이 서버개발자들에게 익숙해 보이는 모양새 입니다.&lt;/p&gt;

&lt;h3 id=&quot;reducer---redux&quot;&gt;Reducer - Redux&lt;/h3&gt;

&lt;p&gt;Redux에서 실제 &lt;strong&gt;비즈니스 로직을 담당&lt;/strong&gt;하는 곳이라고 이해하면 될 듯 합니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Redux에서 Action정의, Action생성 , Reducer생성 등이 각각 개별 파일에 하는 것이 기본 예제인데 구지? 라는 의문이 생겼고 그래서 그런지 ducks pattern 이라는 Action 정의, 생성 Reducer 생성을 하나의 파일에 하는 pattern이 있습니다. (Redux를 하다보면 계속 뭐가 나옵니다. 이런 점이 Redux가 아니라 React가 어렵다는 오래를 불러 일으킵니다.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;ACTION TYPE 정의&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// RiderActionType.js&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// ACTION 타입을 정의 한다. 정의한 액션 타입으로 액션을 생성하고&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 추후 React Component에서 action을 디스패치하면 해당하는 액션타입에&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 매핑된 리듀서가 호출된디..... 뭔가 번잡&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FIND_ALL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;rider/FIND_ALL&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;REMOVE_RIDER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;rider/REMOVE_RIDER&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ACTIVE_RIDERs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;rider/ACTIVE_RISERS&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;코드 8. action을 정의&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ACTION을 생성&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// RiderAction.js&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 정의된 ACTION 타입을 가지고 ACTION을 생성한다.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;findAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;FIND_ALL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;removeRider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;REMOVE_RIDER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;activeRider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;REMOVE_RIDER&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;코드 9. action을 생성&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;정의된 Action이 Dispatch 되었을 때 수행될 로직이 있는 Reducer&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// RiderReducer.js&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 정의된 액션션에 해당하는 비즈니스로직을 구현한다..&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;initialState&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;riderList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;riderReducer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;initialState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;FIND_ALL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;riderList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;REMOVE_RIDER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;riderList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;riderList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;splice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ACTIVE_RIDERS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;activeRiders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;riderList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rider&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ACTIVE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;코드 10. Reducer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Getter(Mobx getter와 유사한)에 해당하는 reselect를 이용한 로직&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createSelector&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;reselect&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getRiderList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rider&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;riderList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;activeRiders&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createSelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getRiderList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;riderList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;riderList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rider&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ACTIVE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;getRiderList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;activeRiders&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;코드 11. getter역할을 하는 reselect.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;React Component에서 Redux와의 연결&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RiderContainer&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;componentDidMount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;riderAction&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;onSubmitSearchRider&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;riderAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;findAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;riderList&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;riderStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Component와 Redux에 연결하기 위한 구문이 Component 아래에존재하는데. mobx는 @inject 데코레이트 하나면 연결되는데&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Redux는 명시적인 연결로직이 필요하다. mapStateToProps,mapDispatchToProps, bindActionCreators&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 의 이해와 사용 법을 알아야 하고 계속 이야기하는 javascript 문법자유도 때문에 예제들의 형식도 제각각이라 무척이나&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 학습하는데 가독성을 많이 떨어 뜨린다..&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 간단한 예제이지만 데이터와 메소드가 많아지면 복잡도는 무척이나 높아진다.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// mapStateToProps&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rider&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;rider&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;findAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SearchRiderSelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getRiderList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;activeRiders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SearchRiderSelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;activeRiders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// mapDispatchToProps&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;dispatch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;riderAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bindActionCreators&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SearchRiderAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;searchRider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;RiderContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;코드 12. React Componet와 Redux의 연결.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;개인적으로 느낀 아쉬운 점을 나열해 보자면&lt;/p&gt;

  &lt;ol&gt;
    &lt;li&gt;어떤 행위를 하기위한. &lt;strong&gt;하나의 메소드를 정의 하기위하여 3가지&lt;/strong&gt; 즉 ACTION 타입정의, ACTION생성, REDUCER 생성 해줘야 하는 것이 &lt;strong&gt;조금 번잡 스럽다는 느낌&lt;/strong&gt;을 받았다.&lt;/li&gt;
    &lt;li&gt;실제 비즈니스 로직이 들어가는 부분의 예제가 swich case문으로 되어 있어 생소한 느낌이 많이 아쉬었다. (실제로 redux를 사용해서 개발 할때는 사실 메소드를 분리해서 했다.)&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Javascript의 문법적 자유도가 높은 특징&lt;/strong&gt; 때문에 다양한 방식으로 선언된 예제들을 보면 혼란이 가중되고 코드 가독성이 떨어지는 느낌을 받았다.&lt;/li&gt;
    &lt;li&gt;그런 불편 때문에 보일러 플레이트를 줄여주는 단순한 기능을 하는 라이브러리나, Util이 많이 존재하는데 Action을 생성 해주는 &lt;strong&gt;createActions&lt;/strong&gt;, Action과 Reducer를 매핑해주는 &lt;strong&gt;handleActions&lt;/strong&gt; Component와 Redux연결을 위한 &lt;strong&gt;mapStateToProps&lt;/strong&gt;, &lt;strong&gt;mapDispatchToProps&lt;/strong&gt;, &lt;strong&gt;bindActionCreators&lt;/strong&gt; getter로직의 성능을 위해서 &lt;strong&gt;reselect&lt;/strong&gt;(mobx @computed 처럼 값이 변경되었다 하더라도 동일한 값이면 불필요하게 다시 렌더링하지 않는다)등등 이런 라이브러리등을 선택하고 학습하는 것 또한 Redux러닝 커브를 높이는데 한 몫을 하는 것 같다&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;store---mobx&quot;&gt;Store - Mobx&lt;/h3&gt;

&lt;p&gt;Mobx의 &lt;strong&gt;Store&lt;/strong&gt;는 &lt;strong&gt;Java Spring의 Service와 유사&lt;/strong&gt;한 역할을 하며 내부 상태가 존재한다는 것이 차이점이라고 할 수 있습니다. Mobx의 &lt;strong&gt;상태(State)&lt;/strong&gt;는 &lt;strong&gt;@observable(관찰가능한)&lt;/strong&gt;로 지정하여 React Component에서 렌더링될 state로 사용합니다. React Component에서 사용할 Mobx Store의 Dependency Injection은 &lt;strong&gt;@inject&lt;/strong&gt; 데코레이터 하나로 끝나는데 Redux에서는 &lt;strong&gt;mapStateToProps, mapDispatchToProps&lt;/strong&gt;, 등의 함수로 &lt;strong&gt;연결 해줘야하는 번잡스러운 보일러플레이트 코드&lt;/strong&gt;에 비해서 너무나도 간결하고 가독성도 뛰어납니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Autobind&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RiderStore&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;observable&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;riderList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rootStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rootStore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rootStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;asyncAction&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;findAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;riderRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;findAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;riderList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rider&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RiderModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;action&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;removeRider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;riderList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;splice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;computed&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;activeRiders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;riderList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rider&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ACTIVE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;코드 13. Mobx Store.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;React Component에서 Mobx Store를 Inject하는 방식&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// inject 데코레이터로 riderStore를 inject 한다. reactcomponent의 props으로 접근할 수 있다.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// observer는 mobx가 @observable로 지정된 state를 적절히rerendering시킨다&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;inject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;riderStore&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;observer&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RiderListContainer&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;fetchRiderList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;riderStore&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;riderStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;findAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;riderList&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;riderStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;코드 14. React Component에서 Mobx Store를 Injection.&lt;/p&gt;

&lt;h3 id=&quot;repository-layer---classmobx-vs-redux-thunk-또는-redux-sagaredux&quot;&gt;Repository Layer - class(Mobx) VS redux-thunk 또는 redux-saga(Redux)&lt;/h3&gt;

&lt;p&gt;Api 호출같은 비동기 Action의 경우 Redux에서는 &lt;strong&gt;redux-thunk라는 라이브러리를 주로 사용&lt;/strong&gt; 하다가 최근에는 &lt;strong&gt;redux-saga&lt;/strong&gt;라는 라이브러리로 옮겨가는 추세입다. 특히나 redux-saga는 &lt;strong&gt;es6 generator&lt;/strong&gt;를 사용하여 &lt;strong&gt;callback 메소드 없이&lt;/strong&gt; 사용할 수 있는 장점 때문에 옮겨 가는 추세이긴 하지만 사용방법 자체는 &lt;strong&gt;러닝커브도 있는 편&lt;/strong&gt;이고 익숙하지 않는 형태입니다. 그에 반에 Mobx는 Ajax call 하는 메소드를 Class로 정의 해놓고 Store에서 &lt;strong&gt;async/await&lt;/strong&gt;, 또는 &lt;strong&gt;generator&lt;/strong&gt; 를 사용하여 &lt;strong&gt;callback 없이 사용&lt;/strong&gt;하면 됩니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;별도의 추가 라이브러리를 사용할 필요가 없으며 문법적인 깔끔함을 유지하기 위해서 &lt;strong&gt;@asyncAction&lt;/strong&gt;데코레이터, flow 같은 함수도 제공하기 때문에 제법 &lt;strong&gt;깔끔한 코드&lt;/strong&gt;로 작성이 된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;redux-saga---redux&quot;&gt;Redux-Saga - Redux&lt;/h3&gt;

&lt;p&gt;비동기 Action을 처리하기위한 라이브러리인 Redux-Saga를 사용하여 비동기 Action을 구현 합니다. ES6 Generator를 사용하기 때문에 Callback Method 없이 구성이 가능한 장점이 있습니다. Redux-Saga 역시 Action이기 때문에 Action Type, Action을 생성해 주어야 합니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Redux-Thunk 에서 Redux-Saga로 넘어가는 추세로 보이는데 혹자는 Redux 보다 Redux-Saga의 러닝커브가 더 높다고 이야기합니다. (Redux에 딸려오는 식구들이 왜 이렇게 많은지…)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;ACTION TYPE 정의&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// RiderActionType.js&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ACTION 타입을 정의 한다. redux-saga의 어떤 행위도 ACTION정의하고 ACTION을 dispatch하는 형태는 마찬가지다&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FETCH_RIDER_LIST&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;rider/FETCH_RIDER_LIST&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;코드 15. Redux-Saga Action Type 정의&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ACTION 생성&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// RiderAction.js&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 정의된 ACTION 타입을 가지고 ACTION을 생성한다.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fetchRiderList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;FETCH_RIDER_LIST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;meta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;get&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/v1/api/riders&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;코드 16. Redux-Saga Action 생성.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Redux-Saga Async Method&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// RiderSaga.js&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/**
 * call, put, all, takeEvery 같은 redux-saga에서 제공하는 api를 학습해야 이해 할 수 있다.
 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fetchRiderList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Axios&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;meta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;payload&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fetchSuccess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fetchFail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/**
 * types.FETCH_REQEUST &amp;lt;- 이 ACTION이 dispatch되는 것을 감지하고 있다가 dispatch 되면
 * getRiderListSuccess  task를 실행한다
 */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;watchSearchRiderSaga&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;takeEvery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;searchRider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fetchRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fetchRiderList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;코드 17. Redux-Saga Async Method 생성.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Redux-Saga에서 받아온 API 데이터를 처리할 Reducer&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// RiderReducer.js&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// riderList JSON을 처리할 reducer를 정의하고 redux-saga에서비동기 API를 호출 후&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 받아온 데이터를 fetch할 ACTION을 dispatch한다(중간 단계가 너무많다... 익숙하지 않은 스타일로..)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;initialState&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;riderList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;riderReducer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;initialState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;FETCH_SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;riderList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;FETCH_FAIL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;isError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;코드 18. Redux-Saga 에서 받아온 데이터를 처리할 Reducer.&lt;/p&gt;

&lt;h3 id=&quot;api-호출을-담당하는-class---mobx&quot;&gt;API 호출을 담당하는 Class - Mobx&lt;/h3&gt;

&lt;p&gt;Mobx에서는. &lt;strong&gt;API호출을 담당하는 Repository 성격의 Class&lt;/strong&gt;를 만들고 Mobx Store에서 async 또는 generator를 사용해서 간단하게 callback 메소드 없는 패턴으로 구현되기 때문에 가독성도 좋습니다. &lt;strong&gt;Redux 처럼 Redux-Saga, Redux-Thunk&lt;/strong&gt; 같은 추가 라이브러리는 필요하지 않습니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RiderRepository&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;URL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/v1/api/riders&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;assign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;findAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;axios&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;findOne&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;riderAccountId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;axios&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;riderAccountId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 싱글톤으로 리턴&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RiderRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;코드 19. Mobx Repository Layer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mobx Store에서는 Callback Method 없이 사용&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Autobind&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RiderStore&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;observable&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;riderList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rootStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rootStore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rootStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// promise를 반환하는 riderReposiotry.findAll 메소드를 @asyncAction추가하고 generator를 사용하면&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 콜백없이 마치 sync한 로직처럼 코드를 작성할 수 있어 가독성이 높다.&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;asyncAction&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;findAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;riderRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;findAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;riderList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rider&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RiderModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;action&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;removeRider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;riderList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;splice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;computed&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;activeRiders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;riderList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rider&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ACTIVE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;코드 20. Mobx Store에서 Repository 를 사용하는 예.&lt;/p&gt;

&lt;h3 id=&quot;model-layer---classmobx-vs-redux는-object-리터럴&quot;&gt;Model Layer - class(Mobx) VS Redux는 object 리터럴&lt;/h3&gt;

&lt;p&gt;Redux에서는 State를 Model layer로 구성하는 아키텍쳐를 권유하는 개념이 아닌 듯 합니다. 학습을 하다보면 Redux는 함수형프로그래밍, 불변성, 사이드 이펙트에 대한 이야기가 자주 나오는데, 설계적으로 나쁜 접근은 아닌듯 하나(오로지 개인적인 생각일 뿐입니다.) 쉽지는 않습니다… &lt;strong&gt;Mobx에서는 객체지향적인 아키텍쳐를 권유&lt;/strong&gt; 하고 있고 State를 객체리터럴을 사용해서 단순하게 구성하는 것 보다는 &lt;strong&gt;Model Class를 선언해서 도메인 자신의 로직은 자기가 가지고 있도록&lt;/strong&gt; 하여 비즈니스로직이 철저하게 분리되도록 권장하고 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;redux-불변성-state&quot;&gt;Redux 불변성 State&lt;/h3&gt;

&lt;p&gt;Redux에서는 따로 Model Layer를 구성 하는 형태는 아니고 보편적인 &lt;strong&gt;객체 리터럴 형태&lt;/strong&gt;를 그대로 사용 하고 있습니다. 그리고 불변성 유지를 위해 &lt;strong&gt;스프레드 분법&lt;/strong&gt;을 사용해 변경된 데이터와 변경되지 않은 데이터를 가지고 적절히 잘 합쳐서 새 객체를 생성 합니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 초기 값을 지정해 놓은 state, 그냥 단순한 객체 리터럴이다 자신의값을 처리하는 비즈니스 로직을 가진 메소드는&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 없다 그냥 값만 있을 뿐&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;initialState&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;isLoading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;isOpent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;riderList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 리듀서에서는 불변성 유지를 위해서 기존 state를 변경하는 것이 아닌 새변경한 값으로 객체를 생성한 state를 리턴한다&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 변경하지 않는 값들은 스프레드로(...) 객체를 풀어서 넣어주고 변경할값들은 변경해서 원래 state와 같은 모양으로 만든다&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;riderReducer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;initialState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;FETCH_SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;riderList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;FETCH_FAIL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;isError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;코드 21. Redux 불변성 State.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Redux 불변성 state를 편하게 하기 위한 ImmutableJs라이브러리를 사용한 예&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// immutablejs의 fromJS api를 사용하여 불변성 객체로 만든다.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;initialState&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fromJS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;isLoading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;isOpent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;riderList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// set api로 riderList의 값을 변경해주고 return하면 기존 값을변경 리턴하는 것이 아니고 기존값은 놔두고 새로운 변경된 state를return한다&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 비교적 스프레드 문법을 이용한 방법 보다 직관적이다&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;riderReducer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;initialState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;FETCH_SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'riderList'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;FETCH_FAIL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;returnstate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'isError'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;코드 22. Redux에서 ImmutableJS 적용&lt;/p&gt;

&lt;h3 id=&quot;model-class---mobx&quot;&gt;Model Class - Mobx&lt;/h3&gt;

&lt;p&gt;Java Spring에서 DTO 선언하는 것과 별반 다르지 않습니다. 차이점이라면 Javascript 특성상 &lt;strong&gt;프로퍼티를&lt;/strong&gt; 미리 추가 하지 않고 동적으로 추가할 수 있어서 그냥 &lt;strong&gt;동적으로 추가 한것 뿐&lt;/strong&gt; 도메인 클래스 선언이 크게 차이나 보이지 않습니다. 도메인 자신의 &lt;strong&gt;값과 자신의 값을 핸들링하는 메소드&lt;/strong&gt;를 가지고 있는 형태로 구성됩니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Autobind&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RiderModel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Object.assign과 유사한 mobx가 제공하는 api를 사용하여 @observable(관찰가능한 state, rendering 되는) state로 만들어&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// RiderModel에 멤머 property로 추가해준다.&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;extendObservable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// 라이더명과 지점명을 합친 getter&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// @computed는 값이 변경되도 이전 값과 값이 같으면 불필요한 렌더링을 하지 않는다.&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;computed&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;riderWithAgency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;riderName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;agencyName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;)`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;action&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;changeRiderName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;riderName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;riderName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;riderName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;코드 23. Mobx Model Layer&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;서버에서 가져온 데이터를 RiderModel클래스로 생성&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;마치 모양세가 Java Spring Service에서 &lt;strong&gt;Repository에서 가져온 Entity를 stream을 이용해서 DTO로 변환하는 과정&lt;/strong&gt;과 별반 다를게 없다. Spring 개발자라면 Redux에 비해서 친숙 하게 다가 올 수 밖에 없는 것 같다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Autobind&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RiderStore&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;observable&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;riderList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rootStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rootStore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rootStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;asyncAction&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;findAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;riderRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;findAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;riderList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rider&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RiderModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RiderStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;코드 24. Mobx Model 생성&lt;/p&gt;

&lt;h2 id=&quot;mobx와-java-spring의-유사성-비교&quot;&gt;Mobx와 Java Spring의 유사성 비교&lt;/h2&gt;

&lt;h3 id=&quot;service-layer---mobx-store-spring-service&quot;&gt;Service Layer - Mobx Store, Spring Service&lt;/h3&gt;

&lt;p&gt;Mobx의 Layer와 Spring Layer의 비교 입니다. 언어적인 특성이 다르기 때문에 약간의 차이는 존재하지만 구현 해놓은 모양새는 크게 다르지 않고 비슷한 형태를 가지고 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;spring-service&quot;&gt;Spring Service&lt;/h3&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Transactional&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Service&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RiderServiceeImpl&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RiderService&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Autowired&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RiderRepository&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;riderRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Override&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;findAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;RiderSearchRequest&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;riderRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;findAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reqeust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;RiderDto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Collectors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Override&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;activeRiders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;riderRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;findAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reqeust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isActive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;RiderDto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Collectors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;​&lt;/p&gt;

&lt;p&gt;코드 25. Spring Service&lt;/p&gt;

&lt;h3 id=&quot;mobx-store&quot;&gt;Mobx Store&lt;/h3&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Autobind&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RiderStore&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;observable&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;riderList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rootStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rootStore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rootStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;asyncAction&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;findAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;riderRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;findAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;riderList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rider&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RiderModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;computed&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;activeRiders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// rider.isActive는 아래 소스 예제에서 Rider Model Class에서 선언된 메소드를 호출 하여 사용한다.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Rider Model의 비즈니스 로직은 자기가 담당한다.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;riderList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rider&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isActive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;코드 26. Mobx Store&lt;/p&gt;

&lt;h3 id=&quot;repository-layer&quot;&gt;Repository Layer&lt;/h3&gt;

&lt;h3 id=&quot;spring-repository&quot;&gt;Spring Repository&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RiderRepositoryImpl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extendsQueryDslRepositorySupport&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;implementsRiderRepositoryCustom&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QRider&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rider&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QRider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;rider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RiderStartCashOnHandRepositoryImpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Rider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RiderSearchRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;riderName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRiderName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;코드 27. Spring Repository&lt;/p&gt;

&lt;h3 id=&quot;mobx-repository-class&quot;&gt;Mobx Repository class&lt;/h3&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RiderRepository&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;URL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/v1/api/riders&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;assign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;findAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;axios&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;코드 28. Mobx Repository Layer&lt;/p&gt;

&lt;h3 id=&quot;model-layer&quot;&gt;Model Layer&lt;/h3&gt;

&lt;h3 id=&quot;java-dto&quot;&gt;Java DTO&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Getter&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RiderDto&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;riderName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Status&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;agencyName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RiderDto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RiderDto&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Rider&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;RiderDto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RiderDto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;riderName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRiderName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;instancee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;agencyName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAgencyName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;riderWithAgency&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s(%s)&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;riderName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;agencyName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isActive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ACTIVE&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;코드 29. Java DTO&lt;/p&gt;

&lt;h3 id=&quot;mobx-model-class&quot;&gt;Mobx Model Class&lt;/h3&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Autobind&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RiderModel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;cm&quot;&gt;/**
  생성자에서 서버로 부터 받아온 JSON에 서 property와 value 추가 해버를 것 이므로  property를 미리 선안 안해도 관계는 없다.
  id;
  riderName;
  status;
  agencyName;
  */&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;extendObservable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;computed&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;riderWithAgency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;riderName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;agencyName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;)`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// 내부 처리시 상태값을 확인하는 메소드임으로&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ReactComponent에서 redering 할일이 없는 값이라면 구지 @computed를 붙일 필요는 없다&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isActive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ACTIVE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;코드 30. Mobx Model Class&lt;/p&gt;

&lt;h2 id=&quot;react로-project를-구성-할-때-하는-고민들&quot;&gt;React로 Project를 구성 할 때 하는 고민들&lt;/h2&gt;

&lt;p&gt;올해 중순 즈음 우리 팀의 &lt;strong&gt;다음 Front-End Framework를 어떤 것을 사용할지에 대한 니즈&lt;/strong&gt;가 있었고 그 &lt;strong&gt;임무가 나에게 떨어졌습니다. 면밀힌 조사&lt;/strong&gt;를 통하여 React로 해보기 로 했고, 실제 실무에서 사용하기 위해서는 어느 정도 까지 기반이 갖춰져 있는 수준까지 개발이 필요했기 때문에 같은 팀 &lt;strong&gt;구인본님과 함께 React + Redux 조합의 P.O.C&lt;/strong&gt;를 진행 했었습니다. 그리고 최근 &lt;strong&gt;Redux 보다 Mobx&lt;/strong&gt;가 장점이 많다는 것을 알게 되었고 개인적으로 &lt;strong&gt;휴가와 주말을 거의 집근처 카페에서 보내며 새로 React + Mobx + Material-UI 조합&lt;/strong&gt;으로 tutorial 수준이 아닌 실제 사이트 수준의 개발을 진행 했습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;단순히 아웃풋을 빨리 뽑아내는데 집중한 것이 아니라 NPM에 넘쳐나는 React 관련 라이브러리들과 패턴을 관련 블로그나 문서들을 통하여 비교 조사하고 적용 해보면서 최상의 패턴과 라이브러리를 조합하는데 더 집중 하였습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Mobx와 Material-UI를 적용한 배달현황&lt;/strong&gt; &lt;img src=&quot;/assets/post-img/react-mobx/brms-dashboard.png&quot; alt=&quot;brms-dashboard&quot; /&gt;&lt;br /&gt;
그림 5. mobx와 material-ui를 배달현황&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mobx와 Material-UI를 적용한 라이더관리&lt;/strong&gt; &lt;img src=&quot;/assets/post-img/react-mobx/brms-search-rider.png&quot; alt=&quot;brms-search-rider&quot; /&gt;&lt;br /&gt;
그림 5. mobx와 material-ui를 라이더 관리&lt;/p&gt;

&lt;p&gt;이를 통하여 &lt;strong&gt;마주한 고민&lt;/strong&gt;과 더불어 실제 &lt;strong&gt;개발 해보면서 느낀 것&lt;/strong&gt; 들과 약간의 정보 그런 이야기를 한번 해보고자 합니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;아마도 처름 React를 시작 하시는 분들이라면 이런 고민들을 마주 하게 될 가능성이 높다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;효율적인-directory-구조&quot;&gt;효율적인 Directory 구조&lt;/h3&gt;

&lt;p&gt;보통 어느 프로젝트나 디렉토리를 구분할 때 &lt;strong&gt;파일 종류별&lt;/strong&gt;로 아니면 &lt;strong&gt;페이지별(관련이 높은 파일들)&lt;/strong&gt;로 디렉토리를 구성해 놓는 &lt;strong&gt;2가지 방식을 많이 사용할 텐데&lt;/strong&gt; 별 것 아니지만 초반에 고민이 되이서 리서치를 해본결과 우선 &lt;strong&gt;기본적으로는 페이지별&lt;/strong&gt;로 디렉토리를 나누어 관리하고 &lt;strong&gt;공통적인 React Component&lt;/strong&gt;는 &lt;a href=&quot;https://brunch.co.kr/@ultra0034/63&quot;&gt;atomic design&lt;/a&gt;라는 &lt;strong&gt;UI design 개념&lt;/strong&gt;을 도입하여 프로젝트 폴더 구조로 가는것이 Component 기반인 &lt;strong&gt;React에서 아주 효율적인 구조&lt;/strong&gt;라고 판단 되서 적용 해보았습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;프로젝트의 폴더구조는 정답이 없어서 취향에 맞게 선택 하시면 될듯 합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;atomic-design-적용-예&quot;&gt;Atomic Design 적용 예&lt;/h3&gt;

&lt;p&gt;간략한 특징은 다음과 같이 Atoms(원자), Molecules(분자), Organisms(유기체), Templates, Pages 분류로 React Component의 종류와 규모에 맞게 적절히 분류해서 생성하여 관리합니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Atomic Design 단계 구분&lt;/strong&gt; &lt;img src=&quot;/assets/post-img/react-mobx/atomic-design.png&quot; alt=&quot;atomic-design&quot; /&gt;&lt;br /&gt;
그림 5. Atomic Design 단계구분&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Atomic Design 적용한 폴더 구조&lt;/strong&gt; &lt;img src=&quot;/assets/post-img/react-mobx/atomic-design-folder.png&quot; alt=&quot;atomic-design-folder&quot; /&gt;&lt;br /&gt;
그림 5. Atomic Design 폴더 구조&lt;/p&gt;

&lt;h3 id=&quot;react-component의-유형-구분&quot;&gt;React Component의 유형 구분&lt;/h3&gt;

&lt;p&gt;기본적으로 React로 개발시 &lt;strong&gt;2가지 형태의 Component를 생성&lt;/strong&gt; 할 수 있습니다. &lt;strong&gt;React Component를 상속&lt;/strong&gt;받은 Class로 Component를 작성하는 방법과 &lt;strong&gt;React Component를 상속받지않은 순수 함수 형태&lt;/strong&gt;로 작성하고 Props만 받아서 구현하는 방법이 있는데 두 형태의 차이는 &lt;strong&gt;상속받은 Class는 내부적으로 state(변경하는 가능한 값), props(변경하지 못하는 값), react lifecycle method&lt;/strong&gt;등등으로 구성되어 있고 두번째 형태는 &lt;strong&gt;내부에 state와 lifecycle 메소드가 없고 Props만 받아서 구현&lt;/strong&gt;하는 함수 형태입니다. 그럼 이 &lt;strong&gt;두가지를 어떤 경우에 적절히 사용해야 할지 애매한 상황&lt;/strong&gt;이 생기는데 현재 facebook react 팀에 있고 redux를 개발한 &lt;strong&gt;Dan Abramov는 두가지 경우로 구분하고 사용하기를 추천&lt;/strong&gt; 하고 있습니다. &lt;a href=&quot;https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0&quot;&gt;원문링크&lt;/a&gt; 위 개념을 바탕으로 실제 개발시에 &lt;strong&gt;저의 경우는 대략 3가지 정도의 유형으로 구분&lt;/strong&gt; 해서 사용하고 있습닏다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;React는 기본적으로 명확하게 두 영역을 구분해서 설계된 것이 아니기 때문에 Tutorial에서는 구분해서 코드를 설명하지는 않는다. 하지만 이런 식으로 두 영역을 명확하게 구분하여 개발하는 것이 좀더 구조적으로 유용하기 때문에 구분하는 것을 권장하고 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Component 유형구분&lt;/strong&gt; &lt;img src=&quot;/assets/post-img/react-mobx/component-type.png&quot; alt=&quot;component-type&quot; /&gt;&lt;br /&gt;
그림 5. React Component의 유형&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Container Component&lt;/strong&gt; React Component 를 상속한 RiderSearchContainer는 State와 Method를 적절히 중간에서 연결해 주는 &lt;strong&gt;Controller와 같은 역할&lt;/strong&gt;만 수행하고 HTML 렌더링은 RiderListTemplate 같은 Presentational 영역을 담당하는 Component가 담당한다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;inject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'riderStore'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;observer&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RiderSearchContainer&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 검색버튼 클릭 시 수행 될 메소드(RiderSearchFromTemplate에서 사용)&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;fetchRiderList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;riderStore&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;riderStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;findAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 상세보기 클릭 시 수행 될 메소드(RiderListTemplate에서 사용)&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;fineOneRider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;riderStore&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;riderAccountId&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentTarget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dataset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;riderStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;findOne&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;riderAccountId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;riderList&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;riderStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
     	
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;코드 31. Container Component&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Presentational Component&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;React Component 를 상속하지 않은 순수한 Function&lt;/strong&gt;으로 Component를 작성하고 내부에 state를 생성할 수 없고 RiderSearchContainer가 Parameter로 넘긴 State와 Method를 받아서 &lt;strong&gt;state는 렌터링 하고 method는 사용&lt;/strong&gt;하는 역할만 수행한다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RiderListTemplate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;riders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;riderDetail&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;For&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;rider&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;riders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;accountId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/li&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/li&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/li&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/For&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/ul&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;코드 32. Presontational Component&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Component&lt;/strong&gt;&lt;br /&gt;
공통으로 사용할 지점 리스트를 서버에서 가져와 SelectBox를 구성한 Component이다. 내부 비즈니스 로직은 별로 없고, 서버로부터 지점 리스트를 가져와 option들을 생성하는 로직만 존재하고 &lt;strong&gt;Presentational을 따로 구분하여 개발 할 정도로 View영역 HTML 코드가 많지 않아&lt;/strong&gt; 이런 경우에는 구지 Layer를 나누지 않고 그야말로 Component로 구성해서 사용했습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Vue나 Angular 의 directive와 거의 같다고 보면 이해가 빠를 것 같다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AgencySelectBoxComponent&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;agencies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getAgencyList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getAgencyList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;axios&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/v1/api/agencies'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;agencies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;agencies&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;agencies&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;agencyId&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;For&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;agency&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;agencies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;option&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;agency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;agency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;agency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/option&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/For&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/select&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;코드 33. Component&lt;/p&gt;

&lt;h3 id=&quot;react용으로-재구성된-ui-라이브러리-선택&quot;&gt;React용으로 재구성된 UI 라이브러리 선택&lt;/h3&gt;

&lt;p&gt;React용으로 재구성된 여러 UI 라이브러가 있고 Front-End 특성상 css style만 관련이 있는 것이 아니라 &lt;strong&gt;UI 표현과 동작이 React 코드와 밀접하게 상호 작용&lt;/strong&gt;을 하고 특히 Redux나 Mobx와 함께 사용하는 경우 관련 라이브러리들 (Form Validation 라이브러리, Router 라이브러리 등등)과 밀접하게 연관이 있기 때문에 각 라이브러리간의 궁합과 이슈들이 어느정도 해결되어 안정적으로 관리되는 라이브러리 인지가 매우 중요한 요소입니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Angular 1.x 때 경험에 비춰 보면 Angular용 Bootstrap 라이브러리의 Popover를 사용 했을 때 &lt;strong&gt;Popover를 클릭하면 화면 모서리&lt;/strong&gt;에서 생성되어 &lt;strong&gt;클릭지점으로 Popover가 이동되어 위치&lt;/strong&gt;되어 버리는 버그가 있었고 &lt;strong&gt;버그가 픽스된 버전&lt;/strong&gt;은 &lt;strong&gt;Angular 1의 마지막 버전과 Dependency&lt;/strong&gt;가 있어서 Angular의 버전을 올려야 했다. &lt;strong&gt;Angular 마지막 버전과 사용하던 버전에서 변경된 Feature들이 많아&lt;/strong&gt; 프로젝트의 &lt;strong&gt;모든 코드(Popover이슈와 직접적인 연관이 없는)를 수정&lt;/strong&gt;할 수 밖에 없었다… 이와 유사한 경우가 생겨버리면 프로젝트를 뒤엎는 수준의 리펙토링이 필요하거나 다른 라이브러리로 재개발을 하는 최악의 상황이 발생 할 수 도 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;적용해본 UI 라이브러는 각각 &lt;strong&gt;Reactstrap(bootstrap4), React-Bootstrap(Bootstrap3), Material-UI(Google Material Design)&lt;/strong&gt;이고 사용해본 소감을 정리 해보고자 합니다.&lt;/p&gt;

&lt;h4 id=&quot;reactstrapbootstrap4&quot;&gt;Reactstrap(Bootstrap4)&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;장점&lt;/strong&gt;&lt;br /&gt;
최신 bootstrap 4를 react용으로 사용하도록 개발 된 라이브러리 이며 &lt;strong&gt;bootstrap 4의 최신 style&lt;/strong&gt;을 적용할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;단점&lt;/strong&gt;&lt;br /&gt;
React-Bootstrap(bootstrap3)보다 &lt;strong&gt;미해결된 이슈&lt;/strong&gt;들이 남아 있었고 Redux-Form(form validation라이브러리)과 함께 사용시 몇 가지 &lt;strong&gt;이슈로 인하여 component를 커스텀 해야하는 경우가 있는 경우&lt;/strong&gt;가 있는 것이 단점이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;사용 시점이 2018년 5월 즈음이라 적용하고자 한다면 현재 상황을 살펴보는 것을 당부 드린다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;react-bootstrapbootstrap3&quot;&gt;React-Bootstrap(Bootstrap3)&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;장점&lt;/strong&gt;&lt;br /&gt;
이슈들이 많이 해결되고 어느정도 성숙된 라이브러리&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;다른 라이브러리들(react-router-bootstrap,redux-form..)이 react-bootrap을 기본으로하고 개발된 경우가 많아&lt;br /&gt;
reactstrap보다 이슈가 적었다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;단점&lt;/strong&gt;&lt;br /&gt;
Bootstrap 4가 나온 상황에서 &lt;strong&gt;style이 좀 예전 것&lt;/strong&gt;이라는 점&lt;/p&gt;

&lt;h4 id=&quot;material-ui&quot;&gt;Material-UI&lt;/h4&gt;

&lt;p&gt;개인적으로 Mobx로 개발을 진행 했을 때 Material-UI도 같이 적용 했습니다. 사실 처음에 &lt;strong&gt;우려되는 점이 다른 라이브러들과의 궁합&lt;/strong&gt;을 걱정했지만 이제 정식으로 3대 버전까지 개발되었으며 &lt;strong&gt;Mobx-React-Form(form validation 라이브러리 with mobx)이 Material-UI를 지원&lt;/strong&gt;하기 때문에 input의 &lt;strong&gt;유효성 검사와 그에 따른 UI의 변화와 오류 메시지 표시&lt;/strong&gt;등이 별다른 custom 작업없이 Style이 틀어지거나 하지 않고 자연스럽게 작동했고, 사용율도 Bootstrap 기반의 라이브러리들보다 훨씬 높은 수치를 나타내고 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;최근 NPM 경향&lt;/strong&gt; &lt;img src=&quot;/assets/post-img/react-mobx/npm-trend-ui-lib.png&quot; alt=&quot;npm-trend-ui-lib&quot; /&gt;&lt;br /&gt;
그림 5. npm trend ui 라이브러리&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;장점&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Web, Mobile, Desktop&lt;/strong&gt;에 까지 광범위하게 사용되고 있는 &lt;strong&gt;Google Material Design의 깔끔한 style&lt;/strong&gt;을 적용할 수 있다.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;테마변경의 경우 &lt;strong&gt;css, sass를 새로 변경 rebuild&lt;/strong&gt;하는 것이 아니라 아주 &lt;strong&gt;간편하게 코드상&lt;/strong&gt;으로 &lt;strong&gt;변경&lt;/strong&gt;할 수 있어서 &lt;strong&gt;Dark Mode&lt;/strong&gt; 및 &lt;strong&gt;색상테마&lt;/strong&gt;를 사용자가 &lt;strong&gt;직접 설정해서 변경 할수 있도록 기능으로도 제공&lt;/strong&gt; 할 수 도 있다. &lt;br /&gt;
&lt;img src=&quot;/assets/post-img/react-mobx/brms-dashboard-dark.png&quot; alt=&quot;brms-dashboard-dark&quot; /&gt;&lt;br /&gt;
그림 5. material-ui dark mode&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;css를 적용하는 방식이 아닌 [&lt;strong&gt;jss]&lt;a href=&quot;https://medium.com/@oleg008/jss-is-css-d7d41400b635&quot;&gt;15&lt;/a&gt; 방식으로 style을 해당 페이지에서 사용하는 스타일만 따로 격리&lt;/strong&gt;된 javascript객체로 관리가능 하고 &lt;strong&gt;동적으로 style 변경 적용이 직관적&lt;/strong&gt;이다&lt;/li&gt;
  &lt;li&gt;우리가 모르는 사이 많이 적용되어 있던 &lt;strong&gt;Google Material Design&lt;/strong&gt;이라 제공하는 컴포넌트로 &lt;strong&gt;항샹된 UX&lt;/strong&gt;로 적용할 수 도 있다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;단점&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;bootstrap에 많이 적응된 사람이라면 Material-UI 적용을 위해서는 &lt;strong&gt;약간의 학습&lt;/strong&gt;이 요구된다.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;처음 학습기간을 투자 한 이후로는 그다음에는 눈에 익어서 단계별 학습이 더 요구 되지는 않았다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;redux와-함께-주로-사용되는-라이브러리들&quot;&gt;Redux와 함께 주로 사용되는 라이브러리들&lt;/h3&gt;

&lt;p&gt;Redux만 npm에서 다운받으면 되는 줄 알았는데 &lt;strong&gt;이게 다뭐야 하시는 분들&lt;/strong&gt;이 분명히 계실 것 이라고 생각됩니다. 리서치 하다보면 &lt;strong&gt;꼬리에 꼬리를 무는 수많은 추가 라이브러리&lt;/strong&gt;들과 그 것들이 뭐하는 라이브러리인지 파악하는 일도 상당한 리소스가 투여되는 경험이였습니다. 일단 Redux를 사용 할 것이라면 2018년 5월 기준으로 보편 아래 나열한 키워드의 라이브러리들을 기본적으로 사용하면 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Redux와 관련 라이브러리&lt;/strong&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/post-img/react-mobx/redux-with-libs.png&quot; alt=&quot;redux-with-lib&quot; /&gt;&lt;br /&gt;
그림 5. Redux와 관련 라이브러리들&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;물론 추가적인 조사는 필요합니다. 다른 라이브러리가 나왔을 수도 있기 때문에..&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;redux와-연동-하는-form-validation-라이브러리들&quot;&gt;Redux와 연동 하는 Form Validation 라이브러리들&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Form Validation 없이&lt;/strong&gt; 한땀 한땀 Dom을 Select하여 &lt;strong&gt;값을 정규식과 비교&lt;/strong&gt;해서 일치하지 않는 경우 Submit를 중지하고 &lt;strong&gt;UI 컴포넌트에 css class를 변경&lt;/strong&gt;하고 &lt;strong&gt;오류메시지를 추가&lt;/strong&gt;하고 하는 작업은 정말 지겹고 &lt;strong&gt;많은 라인의 보일러플레이트 코드를 양산&lt;/strong&gt;합니다. input 항목이 많으면 코드량도 만만치 않아서 &lt;strong&gt;Form Validation 라이브러리의 사용은 개인적으로 꼭 필요&lt;/strong&gt;하다고 생각하는 편입니다. &lt;strong&gt;실제로 적용 해본 라이브러리&lt;/strong&gt;는 &lt;strong&gt;Redux-Form, React-Redux-Form&lt;/strong&gt; 두가지 이고 나머지 라이브러리들의 문서를 면밀히 검도 해본 리서치 결과 입니다. Redux와 함께 적용을 고려 해보시는 분들이라면 참고 하시면 좋을 듯 합니다.&lt;/p&gt;

&lt;h4 id=&quot;redux-form&quot;&gt;&lt;a href=&quot;https://redux-form.com/8.1.0/&quot;&gt;Redux-Form&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;보편적으로 &lt;strong&gt;Redux와 함게 가장 많이 사용하는 라이브러리&lt;/strong&gt;, 기능과 성숙도가 높으나 러닝커브가 조금 있습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;결론적으로는 Redux-Form 개발하다가 React-Redux-Form을 따로 적용 해보았고 2% 부족함을 느껴 결론적으로는 Redux-Form을 사용했습니다.(Redux로 개발 시)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;react-redux-form&quot;&gt;&lt;a href=&quot;https://davidkpiano.github.io/react-redux-form/docs.html&quot;&gt;React-Redux-Form&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;일단 문서가 깔끔하고 redux-form에 비하여 깔끔한 설정 때문에 코드를 구현 해보았습니다. 하지만 최종적로 몇가지 기능의 코드 패턴이 매우 번잡스러워 결국은 Redux-Form으로 돌아 왔습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;편의성 3/5&lt;br /&gt;
문서 4/5&lt;br /&gt;
커스텀 스타일 : 가능&lt;br /&gt;
코드구성 복잡도 : 3/5&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;redux-form-과-비교&quot;&gt;Redux-Form 과 비교&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;장점&lt;/strong&gt;&lt;br /&gt;
Redux 와 연결 작업 코드 구분은 Redux-Form에 비해 약간 깔끔, 기본적으로 Field에 설정하는 prop들이 Redux-Form에 비해 약간 간결한 느낌이였습니다. 문서는 Redux-Form보다 훨씬 잘되어 있다고 느겼습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;단점&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;Validation 구현 아주 깔끔하지 않고 번잡 스러움&lt;/strong&gt; (함수로 바로 구현 하거나 , 오류 메시지 부분도 따로 명시적으로 구현), Redux-Form이 더 깔끔, redux-form 은 validation 관련 boolean 과 메시지를 prop으로 제공해줘서 그냥 명시하면되는데 &lt;strong&gt;React-Redux-Form은 validation 이후 error 메시지, error class 처리를 하기 위한 자유도가 낮고&lt;/strong&gt; 구현 하려면 번잡스럽게 구현(제일 큰단점), &lt;strong&gt;redux store에 저장된 form state 접근이 redux-form 이 제공하는 것 보다 엄청 복잡&lt;/strong&gt;, state에 form의 값만 있는게 아니라 엄청 많은 값들이 들어 가 있는데 그걸 보고 작업자가 직접 추려야 ,됨 반면 redux-form은 다양한 selector를 제공해서 원하는 값을 딱 추려서 가져올수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;총평&lt;/strong&gt;&lt;br /&gt;
React-Redux-Form이 Redux-Form을 불편한 기능을 해결해 줄 것을 기대 하였으나 &lt;strong&gt;redux와 연결, fileld의 설청 prop들 몇가지 선언 구문은 깔끔&lt;/strong&gt;해 졌지만 &lt;strong&gt;validation 처리를 깔끔하게 처리하는 기본 방법이 제공 되지 않는 것&lt;/strong&gt;이 제일 큰 &lt;strong&gt;단점&lt;/strong&gt;으로 작용하고 오히려 &lt;strong&gt;자동화된 기능이 redux-form보다 더 부족함&lt;/strong&gt;다는 느낌을 받았습니다. (많은 기대를 했는데 ㅠㅠ).&lt;/p&gt;

&lt;h4 id=&quot;formik&quot;&gt;&lt;a href=&quot;https://github.com/jaredpalmer/formik&quot;&gt;Formik&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;가벼운 라이브러리라고 표방하지만 validation이 각필드에 정의 되는 방식이 아니라 모든 필드의 validation을 한꺼번에 따로 설정하는 방식이라 &lt;strong&gt;너저분한 방식의 느낌이 강함하고 문서가 가독성이 떨어지는 스타일로 제공&lt;/strong&gt;되고 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;편의성 3/5&lt;br /&gt;
문서 2/5&lt;br /&gt;
커스텀 스타일 : 가능&lt;br /&gt;
코드구성 복잡도 : 4/5&lt;br /&gt;
redux-form 과 비교 : 장점이 낮음&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;formsy-react&quot;&gt;&lt;a href=&quot;https://github.com/formsy/formsy-react/&quot;&gt;Formsy-React&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Validation을 각필드에 선언 할수 있지만 그외 &lt;strong&gt;error 메시지 표시, 필수여부 onClick onChange, onSumit같은 조작들은 한땀 한땀&lt;/strong&gt; 해줘야 하는 방식이라 library에서 제공하는 것이 많이 없음, 문서가 github 문서 뿐입니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;편의성 2/5&lt;br /&gt;
문서 2/5&lt;br /&gt;
커스텀 스타일 : 가능&lt;br /&gt;
코드구성 복잡도 : 3/5&lt;br /&gt;
redux-form 과 비교 : 장점이 낮음&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;react-form&quot;&gt;&lt;a href=&quot;https://github.com/react-tools/react-form&quot;&gt;React-Form&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Validation을 각필드에 구성하는 방식이지만, 나머지 &lt;strong&gt;event 및 오류 표시는 직접 해야됨&lt;/strong&gt; 코스 스타일 복잡도도 그렇게 낮은 편은 아닙니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;편의성 2/5&lt;br /&gt;
문서 3/5&lt;br /&gt;
커스텀 스타일 : 가능&lt;br /&gt;
코드구성 복잡도 : 3/5&lt;br /&gt;
Redux-Form 과 비교 : 장점이 낮음&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;mobx-연동-하는-form-validation-라이브러리&quot;&gt;Mobx 연동 하는 Form Validation 라이브러리&lt;/h3&gt;

&lt;p&gt;Mobx 와 연동하여 사용하는 &lt;strong&gt;Form Validation 라이브러리&lt;/strong&gt;는 &lt;a href=&quot;https://foxhound87.github.io/mobx-react-form/&quot;&gt;Mobx-React-Form&lt;/a&gt;이 가장 보편적인데 &lt;strong&gt;Material-UI와 연동에서도 별도의 커스텀 작업이 필요 없이 깔끔하게 연동&lt;/strong&gt;되었고 Form 에 포함된 Field들의 Validation Rule의 정의 와 Validation이 성공과 실패 했을 때 &lt;strong&gt;처리 등등을 하나의 클래스로 완전히 격리 시켜 구현 하는 형태&lt;/strong&gt;로 코드의 분리가 아주 괜찮고 &lt;strong&gt;Mobx Store에서 Form을 핸들링할 수 있는 API도 제공&lt;/strong&gt;해서 깔끔하게 구현이 가능했습니다.(다른 라이브러리의 필요성을 아직까지는 못느꼈다.)&lt;/p&gt;

&lt;h3 id=&quot;mobx-model-라이브러리들&quot;&gt;Mobx Model 라이브러리들&lt;/h3&gt;

&lt;p&gt;Mobx에서 Model Layer를 구현 하는데 순수 Class형태로 구현이 가능 하지만 Model 라이브러리를 사용하면 라이브러리에서 제공하는 기능들을 사용할 수 있는데 대부분의 라이브러리가 &lt;strong&gt;기능이 너무 많은 경우와 결정적 기능이 없는 경우 그리고 선언방식이 제각각이라 결론적으로는 적용하지 않았습니다&lt;/strong&gt;. 하지만 한번쯤 살펴볼 만한 가치는 있는 듯 하여 아래는 평가항목을 기준으로 하여 그동안 리서치 및 적용 테스트 결과를 정리 했습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;순전히 주관적인 평가 임을 미리 밝혀 둡니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;평가항목&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;모델 선언 방식이 직관적인가?
    &lt;ul&gt;
      &lt;li&gt;객체 선언 및 다루는 코드스타일이 기본 JAVASCRIPT Class선언에 크게 벗어나지 않는 방식&lt;/li&gt;
      &lt;li&gt;서버로부터 가져온 json 데이터를 객체로 생성하고 메소드를 추가 하는 방식이 편리하고 직관적인가?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;객체와 컬렉션을 다루는 편의 method가 제공 되나?
    &lt;ul&gt;
      &lt;li&gt;컬렉션을 find, filter, save 등등 기존 array의 map, filter, some을 대체 가능한가?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;fetch, delete, fetchAll 처럼 제공되는 method 만으로 간편하게 rest api 통신을 통한 객체(데이터) 업데이트 가능한가?&lt;/li&gt;
  &lt;li&gt;serializer 제공 되는가?
    &lt;ul&gt;
      &lt;li&gt;json -&amp;gt; observable 가능한 객체로 변환 및 -&amp;gt; json으로 변환 가능한 기능이 제공되는가&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;mobx-state-tree&quot;&gt;&lt;a href=&quot;https://github.com/mobxjs/mobx-state-tree&quot;&gt;Mobx-State-Tree&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;선언 방식이 &lt;strong&gt;class 문법이 아니고 객체 리터럴 방식&lt;/strong&gt; a = {} 으로 action, observable 을 선언하는 방식이라 &lt;strong&gt;직관성이 떨어지고&lt;/strong&gt; 기존 react component 선언이 class 문법을 주로 사용하는데 이질감이 느껴집니다.&lt;/p&gt;

&lt;p&gt;특징 - 모델객체를 생성할 때 객체차제 타입을 지정할 수 있는 기능을 제공함.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;직관성 - 1/5&lt;br /&gt;
객체-컬렉션 편의 메소드 - X&lt;br /&gt;
rest-api method - X&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;json-mobx&quot;&gt;&lt;a href=&quot;https://github.com/danielearwicker/json-mobx&quot;&gt;Json-Mobx&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;모델라이브러리 이긴하나 원래값을 되돌리는 목적으로 만들어 진 듯 하며 찾고자하는 모델라이브러리의 목적에 부합하지 않았습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;직관성 - 1&lt;br /&gt;
객체-컬렉션 편의 메소드 - X&lt;br /&gt;
rest-api method - X&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;mobx-rest---직접테스트완료&quot;&gt;&lt;a href=&quot;https://github.com/masylum/mobx-rest&quot;&gt;Mobx-Rest&lt;/a&gt; - 직접테스트완료&lt;/h4&gt;

&lt;p&gt;모델생성과 rest api method 및 객체 관리 자체 편의 메소드가 제공됨 &lt;strong&gt;유력한 후보&lt;/strong&gt;였으나 테스트로 사용해본결과 Model List 구조에서 array가 observable 안되는 경우가 있었습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;직관성 - 4/5&lt;br /&gt;
객체-컬렉션 편의 메소드 - 4/5&lt;br /&gt;
Rest Api Method - 4/5&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;libx---직접-테스트-완료&quot;&gt;&lt;a href=&quot;https://github.com/jeffijoe/libx&quot;&gt;Libx&lt;/a&gt; - 직접 테스트 완료&lt;/h3&gt;

&lt;p&gt;모델 선언 방식은 &lt;strong&gt;직관적&lt;/strong&gt;임, &lt;strong&gt;모델간에 관계&lt;/strong&gt;를 맺을 수도 있음, 모델 객체를 자체를 &lt;strong&gt;편의 메소드도 제공됨&lt;/strong&gt; 다만 rest-api method는 없음 다른 객체와 관계 맺는 것이 조금 직관성이 떨어짐, 객체를 생성하고 다루는 방식이 별도의 제공되는 메소드를 이용해야지만 의도한대로 동작해서 혼란스럽고 개발시에 많은 삽질을 요구할 듯 합니다. collection을 지정된 모델에 매핑 할때 object.assign 즉 &lt;strong&gt;기존 모델 class에 attribute를 추가하는게 아니라 완전히 대체&lt;/strong&gt; 해버립니다. 그래서 Model class 에 메소드나 기본 property를 선언 해놓고 &lt;strong&gt;api 호출한 데이터의 property를 추가하고 싶을 경우&lt;/strong&gt;에는 사용 할 수가 없었습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;직관성 - 4/5&lt;br /&gt;
객체-컬렉션 편의 메소드 - 4/5&lt;br /&gt;
Rest Api Method - X&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;mobx-collection-store&quot;&gt;&lt;a href=&quot;https://github.com/infinum/mobx-collection-store&quot;&gt;Mobx-Collection-Store&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;모델선언방식이 이상함 클래스안에 프로퍼티를 선언하는게 아니고 클래스를 생성해놓고 이후에 프로퍼티를 추가하는 형태 (직관성이 떨어짐) rest-api method가 포함된건 mobx-jsonapi-store를 사용해야합니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;같은 라이브러린데 rest-api 로 호출한 객체를 생성하는 거라서 따로 써야됨&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;직관성 - 1/5&lt;br /&gt;
객체-컬렉션 편의 메소드 - 3/5&lt;br /&gt;
Rest Api Method - X&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;mobx-model&quot;&gt;&lt;a href=&quot;http://wearevolt.github.io/mobx-model/&quot;&gt;Mobx-Model&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;모델 선언 시 프로퍼티를 선언하는 방식이 static 으로 선언하게 되어 있습니다. 관계도 설정할 수 있는데 좀 번잡스러운 느낌, rest-api method 제공되는데 제일 번잡스럽습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;직관성 - 1/5&lt;br /&gt;
객체-컬렉션 편의 메소드 - 1/5&lt;br /&gt;
Rest Api Method - X&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;mobx-spine&quot;&gt;&lt;a href=&quot;https://github.com/CodeYellowBV/mobx-spine&quot;&gt;Mobx-Spine&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;모델선언은 직관적이나 관계형성 serialize, 객체 관리 편의 메소드가 미제공, rest-api method는 제공되나 store에 선언하는 방식임 전제적으로 좀 빈약합니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;직관성 - 2/5&lt;br /&gt;
객체-컬렉션 편의 메소드 - X &lt;br /&gt;
Rest Api Method - 1/5&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;mmlpx&quot;&gt;&lt;a href=&quot;https://github.com/mmlpxjs/mmlpx&quot;&gt;Mmlpx&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;모델선언 직관적임, 특이점은 DI 방식을 적용 @inject 데코레이션으로 다른 mobx 스토어나 mobx model 객체를 Inject 할 수 있습니다.(spring과 유사함) 그러나 객체나 컬렉션 자체 편의 메소드는 없고, rest-api method 없음, 특징으로는 snapshot기능이 있어서 변경되기 전 데이터로 돌리기 하는 기능이 있는 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;직관성 - 4/5&lt;br /&gt;
객체-컬렉션 편의 메소드 - X&lt;br /&gt;
rest-api method - X&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;이글을-마치며&quot;&gt;이글을 마치며&lt;/h2&gt;

&lt;p&gt;주관적 경험을 통해 느낀점이지만 Mobx는 Redux에 비해서 낮은 러닝 커브와 높은 가독성이 확실한 장점으로 다가 왔습니다. React State관리 라이브러리를 선택할 때 조금이나마 도움이 되었으면 하는 바램과 함께 글을 마칩니다.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>김찬정</name>
        
        
      </author>

      

      
        <category term="tech" />
      

      
        <summary type="html">react와 mobx그리고 material-ui를 이용한 개발기와 예제코드를 통한 mobx vs react 차이점 비교 및 atomic design을 통한 프로젝트구조 react 서드파티 라이브러리 리뷰정보등을 알아봅니다.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">[Socket.io][websocket] 실시간 서비스 경험기(배달운영시스템 BROS1.0)</title>
      <link href="https://kimchanjung.github.io/tech/2020/05/08/real-time-service/" rel="alternate" type="text/html" title="[Socket.io][websocket] 실시간 서비스 경험기(배달운영시스템 BROS1.0)" />
      <published>2020-05-08T00:00:00+09:00</published>
      <updated>2020-05-08T00:00:00+09:00</updated>
      <id>https://kimchanjung.github.io/tech/2020/05/08/real-time-service</id>
      <content type="html" xml:base="https://kimchanjung.github.io/tech/2020/05/08/real-time-service/">&lt;p&gt;배달의민족 배민라이더스의 배달처리시스템 개발기와 socket.io(websocket)를 이용한 실시간 시스템 구현 방법을 자세히 알아 봅니다.&lt;/p&gt;

&lt;h2 id=&quot;경험기&quot;&gt;경험기&lt;/h2&gt;

&lt;p&gt;들어가기 앞서 이 글은 신기술 사용기 또는 소개가 아닌 실시간 서비스 즉 &lt;strong&gt;배민라이더스 BROS 1.0&lt;/strong&gt; 을 개발 하면서 겪어왔던 다소 특별한 개발 및 운영 경험기 입니다. BROS 2.0이 나온 상황에서 1.0을 이야기 하는 것이 다소 순서가 맞지 않지만 그 때 당시 경험기를 남겨놓지 못 한 것을 이번 기회에 남겨 보고자 합니다.&lt;/p&gt;

&lt;h2 id=&quot;용어설명&quot;&gt;용어설명&lt;/h2&gt;

&lt;h3 id=&quot;bros-10&quot;&gt;BROS 1.0&lt;/h3&gt;

&lt;p&gt;BROS는 배민라이더스의 주문을 접수(콜센터접수)를 시작으로 배달건을 라이더가 고객에게 신속하고 안전하게 배달하기 위한 통합 운영 관제 시스템입니다.&lt;/p&gt;

&lt;h3 id=&quot;real-time-또는-실시간-서비스&quot;&gt;REAL-TIME 또는 실시간 서비스&lt;/h3&gt;

&lt;p&gt;여기서 Real Time 또는 실시간서비스란 &lt;strong&gt;websocket&lt;/strong&gt;으로 통신하는 서버를 이용하여 웹페이지 및 모바일 앱에서 실시간으로 데이터를 주고 받고 갱신하는 시스템을 말합니다.&lt;/p&gt;

&lt;h3 id=&quot;양방향바인딩&quot;&gt;양방향바인딩&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;AngularJS&lt;/strong&gt;의 양방향 바인딩을 뜻 하며 뷰의 데이터가 변하면 모델이 자동으로 변경되고 반대로 모델이 변하면 뷰도 자동으로 변경되는 특징을 말합니다.&lt;/p&gt;

&lt;h3 id=&quot;digest-loop&quot;&gt;Digest Loop&lt;/h3&gt;

&lt;p&gt;AngularJS에서 모델 변화를 감지하는 역할을 하여 양방향 데이터 바인딩을 적용하는 역할을 합니다. AngularJs1.0의 성능적인 면에서 단점으로 작용하기도 하지만 개별 모델의 &lt;strong&gt;one-time bind&lt;/strong&gt; 설정을 통하여 양방향 바인딩이 필요없는 모델을 제외 할 수 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;websocket&quot;&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/WebSockets/Writing_WebSocket_client_applications&quot;&gt;Websocket&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;웹브라우저는 http 프로토콜로 요청/응답으로 동작하는데 TCP/IP socket 처럼 connection이 유지되어 서로 실시간으로 통신을 할수 없습니다. 그래서 등장한것이 ws&lt;sup&gt;websocket&lt;/sup&gt; 프로토콜입니다.  websocket을 사용하면 웹브라우저에서도 socket 통신처럼 실시간으로 데이터를 주고 받을 수 있습니다. 최근에는 대부분의 브라우저가 websocket 프로토콜을 지원하지만 IE 같은 경우는 version 10 부터 지원을 하고 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;socketio&quot;&gt;&lt;a href=&quot;https://socket.io/&quot;&gt;Socket.io&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;NodeJS&lt;/strong&gt; 기반으로 실시간 이벤트 서버를 개발 할 수 있는 오픈소스 라이브러리 입니다. 특징으로는 멀티 디바이스(web, android, ios, windows)를  지원하며 &lt;strong&gt;websocket&lt;/strong&gt;을 지원하지 않는 Browser도 지원합니다.&lt;/p&gt;

&lt;h2 id=&quot;시스템구성&quot;&gt;시스템구성&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;PHP API server&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;AngularJS(1.0) front-end&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Socket.Io (NodeJs websocket open source library)&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Redis&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Sql server(MS)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;실시간-서비스가-필요했던-이유&quot;&gt;실시간 서비스가 필요했던 이유&lt;/h2&gt;

&lt;p&gt;배민라이더스의 음식 주문은 평균 1시간 내외로 주문의 접수, 처리 및 배송이 완료 되어야 합니다. 즉 주문이 발생한 경우 &lt;strong&gt;콜센터직원은 바로 주문의 발생을 알아야&lt;/strong&gt; 하며, 주문접수가 처리 되면 &lt;strong&gt;라이더는 즉시 배달건의 존재를 알아야&lt;/strong&gt; 합니다. 또한 &lt;strong&gt;배달의 상태(대기 - 배차 - 픽업 - 전달)와 라이더의 실시간 위치가 업데이트&lt;/strong&gt; 되어야 관제자와 라이더들은 원할한 관제 및 배달업무를 수행 할 수 있습니다. 또한 기존 polling 방식의 배민 콜센터 주문접수(현재는 fade out)는 주문건이 증가함에 따라 DB Select가 급증하여 서비스가 위험했던 적이 있었기  때문에 BROS개발 당시 실시간성을 유지하면서 DB Select를 줄이기 위해서 필수로 실시간 이벤트 서버 도입을 해야 했습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post-img/real-time-service/order-delivery-activity.png&quot; alt=&quot;order-activity-diagram&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그림 1. 주문 처리 activity 다이어그램&lt;/p&gt;

&lt;h2 id=&quot;angularjs-양방향-바인딩과-socketio를-이용한-실시간-데이터-동기화&quot;&gt;AngularJS 양방향 바인딩과 Socket.io를 이용한 실시간 데이터 동기화&lt;/h2&gt;

&lt;p&gt;주문과 배달의 생성 상태변경이 있을 때 마다 socket.io 실시간 이벤트를 전송하고 수신 시 api를 호출하여 배달리스트를 갱신하는 방식은 데이터의 변경이 있는 경우만 database를 select하지만 피크시간대에는 이벤트가 증가하므로 database select가 급증하게 됩니다. &lt;strong&gt;angularjs model&lt;/strong&gt; 변경은 angularjs가 알아서 뷰에 반영하기 때문에 실시간 이벤트를 송수신 할 때 마다 배달리스트를 호출 하지 않고 배달데이터를 &lt;strong&gt;생성 삭제 수정 한 후 실시간 이벤트 메시지로 angularjs model에 반영&lt;/strong&gt; 하도록 하면 뷰는 &lt;strong&gt;자동으로 실시간 반영&lt;/strong&gt; 됩니다. 또한 개발자는 뷰를 업데이트하는 비즈니스로직을 신경쓸 필요가 없고 데이터를 뷰에 나타나는 로직만 구성해 놓으면 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post-img/real-time-service/angularjs-model.png&quot; alt=&quot;angularjs-model&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그림 2. AngularJs 모델 데이터 반영&lt;/p&gt;

&lt;h3 id=&quot;1controller---실시간-이벤트-수신&quot;&gt;1.Controller - 실시간 이벤트 수신&lt;/h3&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;angular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'bros'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'bros.dlvrymgmt.common.DlvryMgmtCommCtrl'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;'bros.dlvrymgmt.common.realTimeDlvryService'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;'bros.dlvrymgmt.common.Delivery'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'SktIo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'$scope'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;realTimeDlvryService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Delivery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SktIo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      	&lt;span class=&quot;c1&quot;&gt;// 배달데이터 객체를 모델에 binding 이제 뷰와 모델은 양방향 바인딩이 된다!!&lt;/span&gt;
      	&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;delivery&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Delivery&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/**[소켓이벤트수신] 배차 생성 (상태는 대기와 동일)*/&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;SktIo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'delivery:create'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;delivery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;realTimeDlvryService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;delivery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/**[소켓이벤트수신] 배차대기*/&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;SktIo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'delivery:waiting'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;delivery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;realTimeDlvryService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onWaiting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;delivery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

       &lt;span class=&quot;p&quot;&gt;........&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;코드 1. 이벤트 수신 Controller&lt;/p&gt;

&lt;h3 id=&quot;2service---수신받은-데이터를-배달-객체에-반영&quot;&gt;2.Service - 수신받은 데이터를 배달 객체에 반영&lt;/h3&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;angular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'bros'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;factory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'bros.dlvrymgmt.common.realTimeDlvryService'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'bros.dlvrymgmt.common.Delivery'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'$resource'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;DlvryMgmtCommModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Delivery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;realTimeDlvryService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
      	&lt;span class=&quot;cm&quot;&gt;/**신규배달 처리*/&lt;/span&gt;
      	&lt;span class=&quot;nx&quot;&gt;realTimeDlvryService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onCreate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;delivery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;Delivery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;delivery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/* 배차대기 처리*/&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;realTimeDlvryService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onWaiting&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;delivery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;Delivery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setResource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;delivery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
      	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;realTimeDlvryService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;코드 2. 수신이벤트 처리 Service&lt;/p&gt;

&lt;h3 id=&quot;3model---배달-모델-객체를-변경&quot;&gt;3.Model - 배달 모델 객체를 변경&lt;/h3&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;angular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'bros'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'bros.dlvrymgmt.common.Delivery'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'$filter'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Delivery&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/**객체 초기화*/&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;Delivery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;init&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;angular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Delivery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/**배달객체생성*/&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;Delivery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;delivery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;angular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Delivery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;delivery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/**배달데이터 변경 반영*/&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;Delivery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setResource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;delivery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'setResource'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Delivery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;delivery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;angular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;코드 3. 수신받은 데이터 모델에 반영&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;데이터의 &lt;strong&gt;생성, 업데이트, 삭제&lt;/strong&gt;를 &lt;strong&gt;Database에 반영&lt;/strong&gt;하고 &lt;strong&gt;곧바로 Socket.io 서버의 실시간 이벤트 메시지&lt;/strong&gt;로 데이터를 전송 &lt;strong&gt;Angular Model에  반영&lt;/strong&gt;, 뷰는 모델의 변경에 &lt;strong&gt;자동 갱신&lt;/strong&gt; 되기 때문에 &lt;strong&gt;client수에 관계없이&lt;/strong&gt; 사실상 Database를 주기적으로 &lt;strong&gt;select하는 행위는 거의 일어나지 않으며&lt;/strong&gt;  배달데이터는 실시간으로 관제 및 라이더에게 반영된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;배달현황-화면&quot;&gt;배달현황 화면&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post-img/real-time-service/bros-delivery-list.png&quot; alt=&quot;bros-delivery-list&quot; /&gt;
그림 3. BORS 실시간 배달현황 화면&lt;/p&gt;

&lt;h3 id=&quot;라이더-관제-및-배차-화면&quot;&gt;라이더 관제 및 배차 화면&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post-img/real-time-service/bros-gps.png&quot; alt=&quot;bros-gps&quot; /&gt;
그림 3. BORS 실시간 라이더 배차 화면&lt;/p&gt;

&lt;h2 id=&quot;맞닥뜨려야했던-이슈들&quot;&gt;맞닥뜨려야했던 이슈들&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;AngularJS&lt;/strong&gt;와 &lt;strong&gt;Socket.io&lt;/strong&gt; 서버를 이용하여 DB select를 최소화 하고 주문, 배달 및 라이더 위치를 실시간으로 관제하고 배차업무를 할 수 있도록 시스템을 구성하고 실시간으로 눈앞에 데이터들이 화면 갱신 없이 변경이 되고 있었지만 가만히 화면만 바라보고 있을 때는 큰 문제가 없는 듯 하였습니다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“그러나 browser는 열일 하고 있는 중……”&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;browser의-성능&quot;&gt;Browser의 성능&lt;/h2&gt;

&lt;p&gt;실시간으로 화면이 렌더링 되는 것은 사실 아무런 문제가 없었습니다. 하지만 피크시간인 저녁시간에 배달 건수가 급격히 늘어나기 시작하면서 배차를 위해 라이더리스트 다이얼로그를 클릭한다던지 하는 이벤트를 발생 시켰을 때 0.5초 정도 움찔하는 Delay가 발생하였습니다. 사용자 입장에서는 꽤나 신경이 거슬리는 이슈였습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;요구사항으로 배달완료된 배달건도 리스트에 남기고 당일 모든 배달건(많을 때는 1000건)을 현황에 리스팅 해달라는 요구가 있었습니다. 물론 타협으로 최근 4시간 배달건만 리스팅 하기로 하였지만 피크시간대에는 수백건의 배달을 페이징없이(실시간리스트라 페이징은…) 리스팅 되고 있었습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;일반적인 초기 화면 진입 이후 뷰의 렌더링이 거의 없는 정적인 페이지와 달리 BROS의 배달/라이더 현황 페이지들 JAVASCRIPT가 실시간으로 이벤트를 수신받고 모델에 반영하고 뷰를 렌더링하고…… 실 새 없이 일을 하고 있었습니다. 그래서 성능최적화 작업에 들어갔습니다.&lt;/p&gt;

&lt;h3 id=&quot;모든-loop를-native-for로-변경&quot;&gt;모든 loop를 native for로 변경&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;forEach, angular.foreach&lt;/strong&gt;등으로 된 loop를 제거하고 &lt;strong&gt;순수 javascript의  역행 루프&lt;/strong&gt;&lt;sup&gt;reversed loop&lt;/sup&gt;로 변경하였습니다. 배열의 개수가 적을 때는 크게 상관 없지만 수백 수천개가 되면 그때는 이야기가 다릅니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// length 지역 변수에 미리 선언(매번확인하지 않는다), 루프 순서를 역으로 &lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;delivery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  	&lt;span class=&quot;c1&quot;&gt;// for문 내부에 배열을 지역변수에 할당&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;deliveryItem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;delivery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;deliveryItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;deliveryStatus&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;pickup&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;코드 4. 역행 루프&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;for (var i = delivery.length-1; &lt;strong&gt;i &amp;gt;= 0; i–&lt;/strong&gt;) 루프 순서를 역으로 하면  조건문을 0 즉, false로 평가하게 하여 속성검색(조건문 비교)을 최소화하는 효과를 얻는다.&lt;/li&gt;
  &lt;li&gt;for (&lt;strong&gt;var i = delivery.length&lt;/strong&gt;;i &amp;gt;= 0; 배열의 크가룰 마리 할당 해놓아 배열을 크기를 매번 확인하지 않는다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;var **deliveryItem&lt;/strong&gt; = delivery[i]** 배열을 미리 지역변수에 할당 해놓고 deliveryStatus 연산시 참조 하면  delivery[i].status, delivery[i].shopName 처럼 매번 배열을 검색하지 않는다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;settimeout을-사용하여-로직을-큐로-넘긴다&quot;&gt;setTimeout을 사용하여 로직을 큐로 넘긴다.&lt;/h3&gt;

&lt;p&gt;javascript는 &lt;strong&gt;단일 쓰레드로 동작&lt;/strong&gt;하며. 먼저 수행된 작업이 끝날 때 까지 다음작업은 대기하게 된다. 무거운 작업이 있다면 당연히 사용자는 Delay를 느끼게된다. 이러한 점을 해결하기위해 &lt;strong&gt;setTimeout을 이용하여 작업을 실행하면 javascript engine에서 UI 작업 큐로 작업은 넘겨&lt;/strong&gt; 지게 되고 event loop가 &lt;strong&gt;큐의 쌓여 있는 task를 처리&lt;/strong&gt; 하게 됨으로써 좀더 &lt;strong&gt;blocking이 감소&lt;/strong&gt;하여 좀더 성능향상을 시킬 수 있다. &lt;a href=&quot;https://github.com/nhnent/fe.javascript/wiki/June-13-June-17,-2016&quot;&gt;JAVASCRIPT Event Loop 링크&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;nx&quot;&gt;Rider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;updatePosition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;코드 5. setTimeout 사용&lt;/p&gt;

&lt;h3 id=&quot;angular-ng-repeat-loop-사용시--조합-index-key를-사용&quot;&gt;Angular ng-repeat loop 사용시  조합 index key를 사용.&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;ng-repeat&lt;/strong&gt;은 콜렉션을 looping하여 뷰에 리스팅 하는 angularjs의 커스텀 attribute입니다. 리스팅된 데이터는 digest loop가 양방양 데이터 바인딩을 위하여 관리하는 모델 데이터 들이며 데이터 &lt;strong&gt;개수가 많을 수록 digest loop의 성능이 떨어지게&lt;/strong&gt; 됩니다. 그래서 리스트의 각 항목 업소명, 배달상태, 배달주소.. 등등의 데이터는 &lt;strong&gt;onetime binding으로 digest loop를 가볍게&lt;/strong&gt; 하고 &lt;strong&gt;배달번호+수정일시가 조합된 index key&lt;/strong&gt;의  &lt;strong&gt;변경 감지만&lt;/strong&gt;으로 &lt;strong&gt;뷰를 자동 갱신&lt;/strong&gt;하게 됩니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;lt;tr ng-repeat=&quot;deliveryItem in delivery | track by (deliveryItem.deliverySeq+deliveryItem.modDate)&quot;&amp;gt;
    &amp;lt;td ng-bind=&quot;::deliveryItem.shopName&quot;&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;td ng-bind=&quot;::deliveryItem.status&quot;&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;td ng-bind=&quot;::deliveryItem.riderName&quot;&amp;gt;&amp;lt;/td&amp;gt;
 &amp;lt;/tr&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;코드 6. 조합 index key&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;td ng-bind=&quot;::deliveryItem.shopName&quot;&gt;&lt;/td&gt;
    &lt;p&gt;나머지 모델데이터는 onetime binding 처리&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;app-처럼-화면에-나타나는-리스트만-렌더링&quot;&gt;App 처럼 화면에 나타나는 리스트만 렌더링&lt;/h3&gt;

&lt;p&gt;v-repeat이라는 angularjs용 오픈소스 모듈을 사용하여 scroll up &amp;amp; down 할때 화면에 나타나는 tr을 렌더링하고 사라지는 tr은 제거 되도록 처리 하여 리스트가 개수가 수백 수천이 되더라도  &lt;strong&gt;화면에 보이는 데이터 모델만 존재 하게 되어 실질적으로 digest loop가 관리하는 모델의 개수가 현저하게 줄어드는 효과&lt;/strong&gt;를 낼 수 있었고 실제로 &lt;strong&gt;성능 향상에 제일 큰도움&lt;/strong&gt;이 되었습니다.&lt;/p&gt;

&lt;h3 id=&quot;web-worker-사용을-고려-하였으나-결국은-미적용&quot;&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/API/Web_Workers_API/basic_usage&quot;&gt;Web Worker&lt;/a&gt; 사용을 고려 하였으나 결국은 미적용…&lt;/h3&gt;

&lt;p&gt;javascript 실행을 메인쓰레드가 아닌 백그라운드쓰레드에서 처리하게 할 수 있게 하여 무거운 작업의 경우 백그라운드 쓰레드가 처리하도록 하여 기존 단일쓰레드에 비해서 성능향상을 이점을 얻을 수 있습니다.&lt;/p&gt;

&lt;p&gt;angularjs의 digest loop를  web worker가 처리 하도록 하고 싶었으나 digest loop를 건드리는 일은 angularjs framework core를 건드리는 일이 되어 버리므로 결국 적용을 포기하였습니다 (가장 아쉬운 부분이기도 합니다.)&lt;/p&gt;

&lt;h2 id=&quot;실시간-이벤트-서버의-안정성&quot;&gt;실시간 이벤트 서버의 안정성&lt;/h2&gt;

&lt;p&gt;사용료를 지불하고 바로 사용할 수 있는 &lt;em&gt;유료 서비스들이 존재합&lt;/em&gt;니다. 대표적으로 &lt;strong&gt;&lt;a href=&quot;https://www.pubnub.com/&quot;&gt;pubnub&lt;/a&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;a href=&quot;https://pusher.com/?gclid=EAIaIQobChMIkdbaubyY1gIVmAgqCh0OTwKSEAAYASAAEgLVY_D_BwE&quot;&gt;pusher&lt;/a&gt;&lt;/strong&gt; 같은 서비스가 대표적이며 &lt;strong&gt;websocket서버를 직접 개발할 필요없이  사용 할 수 있는 장점이&lt;/strong&gt; 있습니다. 반면에 장애나 이슈 발생시 즉각적인 처리가 어렵다는 단점도 분명 존재합니다. 실제로 BROS 2.0도 유료 서비스를 사용하다. 장애나 오류 발생시 즉각적인 대응이 어려워 결국은 websocket 서버를 개발하여 사용하고 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;“유료서비스를 사용할 것인가 직접 만들것 인가는 여건과 상황에 따라 판단은 달라 질 수 있습니다.”&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;실시간-이벤트-유실&quot;&gt;실시간 이벤트 유실&lt;/h3&gt;

&lt;p&gt;websocket server는 client와 서버 간에 http protocol로  커넥션을 초기에 맺고 ws&lt;sup&gt;websocket&lt;/sup&gt;protocol로 upgrade한 후 서로에게 heartbeat를 주기적으로 발생시켜 커넥션이 유지되고 있는지 체크하며 네트워크를 유지합니다.&lt;/p&gt;

&lt;p&gt;socket.io를 사용하여 websocket 서버를 개발 했지만 비즈니스로직 문제가 아닌 &lt;strong&gt;다양한  network 상황 때문에 이벤트 유실이 발생&lt;/strong&gt; 했습니다. 발생하는 &lt;strong&gt;건수는 매우 적은 수준&lt;/strong&gt;이였지만 BROS 서비스의 특성상 &lt;em&gt;1건이라도 누락이 발생하면 배달업무에 차질&lt;/em&gt;이 생기기 때문에  필수적으로  이벤트 유실에 대한 보완이 필요했습니다 . (&lt;strong&gt;유료 서비스도 마찬가지로 발생하는 이슈&lt;/strong&gt;)&lt;/p&gt;

&lt;p&gt;이벤트 유실을 보완하기 위해 &lt;strong&gt;&lt;a href=&quot;https://www.rabbitmq.com/&quot;&gt;RabbitMq&lt;/a&gt;같은 메시지 큐를 사용하여 이벤트를 발송하는 것도 고려&lt;/strong&gt; 하였으나 BROS 서비스의 특성상 시간이 지난 이벤트를 수신 받게 되거나 &lt;strong&gt;한참이 지난후 한꺼번에 미수신된 이벤트를 수신받게 되면&lt;/strong&gt; 잘못된 데이터가 반영될 수도 있는 문제가 발생하게 되고 그 &lt;strong&gt;문제해결을 위해 복잡한 로직을 추가하게 되면 오히려 파생되는 문제가 더 생길 것으로 판단&lt;/strong&gt;하였고 되도록이면 근본적인 해결책을 찾기로 하였습니다.&lt;/p&gt;

&lt;h3 id=&quot;브로드-캐스팅&quot;&gt;브로드 캐스팅&lt;/h3&gt;

&lt;p&gt;cron job을 사용하여 2분에 1번씩 batch proccess 한곳에서 만 배달 데이터를 select 하여 database  부하를 줄이면서socket.io 실시간 이벤트로 브로드캐스팅을 하도록 하고 client는 수신받은 데이터로 유실이 발생한 배달 리스트를 fetch 하는 것으로 이벤트 누락에 대한 데이터 미변경을 보완 하였고 적용 이후에는 사용성에 대한 문제가 보고 되지 않았습니다.(더 좋은 방법도 분명 있을 겁니다.)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post-img/real-time-service/websocket-broadcasting.png&quot; alt=&quot;namespace-room-id&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그림 4. 이벤트 유실을 보완하기 위한 Broadcasting&lt;/p&gt;

&lt;h3 id=&quot;websocket-서버-다운상황에-대비&quot;&gt;Websocket 서버 다운상황에 대비&lt;/h3&gt;

&lt;p&gt;어느 순간이나 서버가 다운되면 안되지만 만약에 다운이 된다면 심각한 장애를 초래하게 됩니다. 실시간 서비스를 개발한다면 항상 염두해 두어야 하는 이슈 입니다. BROS1.0은 socket.io server가 disconnect가 되면 바로 api 직접 호출로 변경이 되고&lt;/p&gt;

&lt;p&gt;설정해둔 주기만큼 reconnection 시도 하도록 되어 있으며 reconnection이 성공하면 api 직접호출은 중단키시고 실시간 이벤트수신으로  swiching 되도록 개발 되어 있습니다. 더좋은 방법은 메소드들을 추상화 하고 2개이상의 실시간 이벤트 서버를 switching 할 수 있으면 더욱 안정적인 시스템이 될 수 있을 것이란 생각도 해봅니다.&lt;/p&gt;

&lt;h2 id=&quot;실시간-이벤트-서버socketio&quot;&gt;실시간 이벤트 서버&lt;sup&gt;socket.io&lt;/sup&gt;&lt;/h2&gt;

&lt;p&gt;이제 실시간 서비스를 위해 필수 적으로 필요한 websocket서버에 대한 이야기를 해보고자 합니다. 앞서 잠시 언급 하였지만 &lt;strong&gt;서버자체를 구축할 필요없이 유료로 이용할 수 있는 서비스들이 많이 존재&lt;/strong&gt;합니다. 유료서비스의 장점은 &lt;strong&gt;개발과 운영에 대한 리소스가 들지않고&lt;/strong&gt;  사용할 수 있다는 장점이 있습니다. 하지만 &lt;strong&gt;이슈 발생시 빠른 대처가 어렵다는 단점도 분명 존재&lt;/strong&gt;하구요. 직접 서버를 개발하거나 유료 서비스를 이용하거나 하는 &lt;strong&gt;선택은 여러가지 상황에 따라 판단&lt;/strong&gt;해야 할 듯 싶습니다. 그리고 서버를 &lt;strong&gt;직접 개발 하고 안정적인 상태로 유지하기 까지 생각보다 기술 적인  learning curve  높은 편이며 서버가 안정적인 상태까지 올라오기 위해서는 실제로 운영을 해봐야 한다는 어려움도 존재&lt;/strong&gt;합니다. Socket.io 서버를 &lt;strong&gt;개발 하면서 겪었던 여러가지 경험에 대해서 이야기 하려고 합니다.&lt;/strong&gt; 이야기할 내용은 Socket.io 서버에만 국한된 이야기라기 보다 &lt;strong&gt;websocket 서버를 개발한다면 아마도 동일하게 겪어야 될 경험&lt;/strong&gt;이라고 생각됩니다.&lt;/p&gt;

&lt;h2 id=&quot;용어설명-1&quot;&gt;용어설명&lt;/h2&gt;

&lt;h3 id=&quot;namespace--room--event&quot;&gt;Namespace &amp;amp; Room &amp;amp; Event&lt;/h3&gt;

&lt;p&gt;socket.io에서 트래픽을 격리하여 구분하는 단위로 사용됩니다 event는 명칭 그대로 송/수신하는 이벤트의 이름입니다. 트래픽격리 구분없이 이벤트를 송/수신하면 이벤트 리스너를 등록하여 이벤트를 처리하는 코드가 없더라도 접속한 모든 client에 전송 및 수신을 하게 됩니다. 불필요한 트래픽이 발생하게 되고 서버 자체의 성능도 저하되기 때문에 적절한 설계로 구분해아합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post-img/real-time-service/namespace-room-id.png&quot; alt=&quot;namespace-room-id&quot; /&gt;&lt;/p&gt;

&lt;p&gt;표 1. Socket.io 트래픽 격리 구분&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;다른 서비스에서는 room이란 용어 대신 channel이라는 용어를 많이 사용합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;public--private--broadcasting&quot;&gt;Public &amp;amp; Private &amp;amp; Broadcasting&lt;/h3&gt;

&lt;p&gt;socket.io에서 이벤트를 송/수신하는 방식을 말합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post-img/real-time-service/public-private-broadcasting.png&quot; alt=&quot;public-private-broadcasting&quot; /&gt;&lt;/p&gt;

&lt;p&gt;표 2. Socket.io 이벤트 송수신 방식&lt;/p&gt;

&lt;h3 id=&quot;cluster&quot;&gt;Cluster&lt;/h3&gt;

&lt;p&gt;NodeJS는 기본적으로 싱글 프로세스로 동작하며 서버 CPU Core 수 만큼 proccess 생성하여 Multi Proccess로 구동하기 위해서는 Cluster를 이용하여 Proccess를 생성하게 됩니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;multi thread&lt;/strong&gt;는 thread간 데이터를 공유되지만 multi processing은 데이터공유가 되지 않는 특징이 있다.&lt;/p&gt;

  &lt;p&gt;그래서 특별한 처리들을 구현해야 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;master--worker&quot;&gt;Master &amp;amp; Worker&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;NodeJS Cluster&lt;/strong&gt; 를 이용하여 Proccess를 생성하면 실제 일을 수행하는 proccess를 &lt;strong&gt;Worker&lt;/strong&gt; 라고 하며 worker들을 제어하는 역할을 하는 proccess를 &lt;strong&gt;Master&lt;/strong&gt;라고 부른다.&lt;/p&gt;

&lt;h2 id=&quot;socketio를-선택한-이유&quot;&gt;Socket.io를 선택한 이유&lt;/h2&gt;

&lt;p&gt;socket.io는 앞서 말한것 처럼 &lt;strong&gt;websocket을 지원하지 않는 브라우저도 지원&lt;/strong&gt;합니다. websocket을 지원하지 않는 브라우저에서는  flashsocket, htmlfile, xhr-polling, jsonp-polling등의 &lt;strong&gt;적절한 방식으로 전환되어 통신&lt;/strong&gt;합니다. 최근에는 버전업이 되면서 websocket, polling만 지원하는 것으로 변경 되었습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;flashsocket같은 경우는 브라우저에 flash가 설지되어 있지않으면 작동을 하지 않는 문제가 있었고 안정성이 떨어지는 방식은 지원에서 제외 되었습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;NodeJs 특징인 &lt;strong&gt;Single Thread 기반의 Non-Blocking I/O으로 성능적인 이점&lt;/strong&gt;이 있습니다 (callback 지옥이라는 단점도 있지만..)&lt;/p&gt;

&lt;h2 id=&quot;자-이제-개발-해보자&quot;&gt;자 이제 개발 해보자…..&lt;/h2&gt;

&lt;p&gt;socket.io 홈페이지에 문서를 보니 아래 처럼 간단한 것 같은 ….. 금방 만들수 있겠다…&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;socket.io document는 detail함이 좀 부족한 느낌이다. 그리고 버전업이 되면서 deprecated 메소드나 설정 값들이 많아 혼란 스러워 socket.io object들을 실제로 console.log로 찍어서 객체를 확인 하면서 개발 해야 했다 휴……&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&quot;language-javas&quot;&gt;// 접속되면
io.on('connection', (socket) =&amp;gt; {
  // 이벤트를 수신받고	
  socket.on('say to someone', (id, msg) =&amp;gt; {
    // 보내면 되는 구나..
    socket.to(id).emit('my message', msg);
  });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;코드 7.  Server측 코드&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//수신 받고&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'news'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//데이터 처리&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 보내고&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;emit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'hello'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'world'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;코드 7.   Client측 코드&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;원래 호수에 있는 오리를 보면 편하게 둥둥 떠있는 것 처럼 보인다. 하지만 물속은 난리다…..&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;물론 기본 설정이나 여러가지를 구현해야 하지만 큰 로직은 수신/송신이라 할 것이 많이 없을 줄 알았다.(websocket 서버를 쌩으로 구현하는 예제들도 기본예제들이긴 하지만..) 하지만 실제로 실무 서비스에 사용하려고 하니 여러가지 고려 대상이 생각보다 많았다. 이제부터는 실제로 개발 하면서 겪었던 과정을 설명 하려고 한다.&lt;/p&gt;

&lt;h2 id=&quot;트래픽의-격리와-전송방식을-잘-구현-해주어야-한다꼬옥&quot;&gt;트래픽의 격리와 전송방식을 잘 구현 해주어야 한다(꼬옥~)&lt;/h2&gt;

&lt;p&gt;BROS는 각 &lt;strong&gt;지역 마다 센터로 구분&lt;/strong&gt; 되어서 일을 하기 때문에 &lt;strong&gt;이벤트의 송수신은 센터 끼리&lt;/strong&gt; 해야 된다. 그리고 같은 센터라도 배달데이터 송/수신을위한 Room과 채팅을 위한 Room은 구분 되어야 한다. 전체 센터의 배달 현황을 봐야 할 경우도 있다. 같은센터의 Room이지만 배달 상태를 전달완료로 변경하기 위해서는 Event명을 지정하여 송/수신 할 수 있어야 한다. 특정 Client에게만 선택해서 이벤트를 전송하기 위해서는 private로 전송 해야 하며 채팅의 메시지는 public이 되어야 한다.&lt;/p&gt;

&lt;p&gt;그래서 서버는 namespace/room/event 트래픽격리 구분과  public/private/broadcasting 이벤트 전송 방식을 실무에서 사용할 서버라면 필수로 구현해야 한다.&lt;/p&gt;

&lt;h2 id=&quot;scale-out에-대한-대비&quot;&gt;Scale out에 대한 대비&lt;/h2&gt;

&lt;p&gt;여기서 부터 &lt;strong&gt;&lt;em&gt;맨붕&lt;/em&gt;&lt;/strong&gt;이 왔다. 일반 웹서버처럼 세션관리만 신경쓰면 Server를 스케일아웃 하더라도 사람이 신경쓸 것이 별로 없는 상황이 아니였다. &lt;strong&gt;nodejs는 싱글 프로세스라  멀티프로세스를 생성하고 서로 완벽한 Clustering&lt;/strong&gt;을 해주어야 했다. 추후 &lt;strong&gt;서버 자체의 Scale out이 되었을 경우에도 대비해야 하므로 Clustering을 구성하는 것은 꼭 필요&lt;/strong&gt;했다. 단순히 세션에 대한 문제 뿐만 아니라 1번 서버 &amp;gt; 1번 프로세스에 접속된 Client가 이벤트를 전송하면 나머지 서버 &amp;gt; 나머지 프로세스들에 접속된 클라이언트로 이벤트를 전송하기 위해서 &lt;strong&gt;프로세스 끼리는 데이터가 연결되어 전/수송이 되게 작업&lt;/strong&gt;이 되어야 했다.&lt;/p&gt;

&lt;h3 id=&quot;clustring&quot;&gt;Clustring&lt;/h3&gt;

&lt;p&gt;nodejs는 싱글 프로세스라 node cluster로 core 수만큼 프로세스를 생성해야 했다. 중요한 것은 멀티 쓰레드 방식이 아닌 &lt;strong&gt;멀티 프로세스방식이라 데이터 공유가 되지 않는 문제&lt;/strong&gt;가 있었고 &lt;strong&gt;데이터 공유에 대한 처리&lt;/strong&gt;가 필요했다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cluster&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isMaster&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;c1&quot;&gt;//CPU의 갯수만큼 워커 생성&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cpus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cpu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;cluster&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fork&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//워커가 죽으면,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;cluster&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'exit'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;worker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;//워커를 살리고 살리고~~&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;cluster&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fork&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//생성한 워커가 보내는 메시지 처리&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;worker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'message'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;야 김찬정이가 접속했단다!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//생성한 워커에게 메시지 보내기&lt;/span&gt;
    	&lt;span class=&quot;nx&quot;&gt;worker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;워커들아 김찬정이가 접속했다는 구나!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cluster&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isWorker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//마스터에게 메시지 보내기&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;야! 여기 김찬정이가 접속했다 다른 워커에게 좀 알려줘라 마스터야! 1명 접속 추가!!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
   &lt;span class=&quot;c1&quot;&gt;//마스터가 보낸 메시지 처리&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'message'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;김찬정이가 접속했네!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 김찬정이가 접속 했으니 카운트도 추가하고~ Redis에 계정이랑 조인한 룸정보도 저장하고....&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 어휴... 번거롭기 짝이.....&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;코드 8. nodejs cluster&lt;/p&gt;

&lt;p&gt;위 코드 8 처럼 인위적으로 cpu 수만큼 woker를 생성 하고 워커들 끼리 통신 하기 위해서는  Master에게 메시지를 보내고 다시 나머지 Worker에게  데이터를 전송한다. (“&lt;em&gt;아.. 뭔가 framework이 알아서 해주는게 아니라 사람이 코드로 저렇게 해줘야 하다니… 시람은 언제나 실수를….&lt;/em&gt;”)&lt;/p&gt;

&lt;h3 id=&quot;clustering-시-데이터-공유는-redis-pubsub&quot;&gt;Clustering 시 데이터 공유는 Redis Pub/Sub&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;worker 끼리 이벤트를 전/송수신 하는 매개체로 redis pub/sub 를 이용&lt;/strong&gt;했다. worker 1에 접속된 client가 이벤트를 전송하면 나머지 worker들에게  redis pub/sub을 통해 이벤트를 전송하고 수신받아 자신에게 접속된 client들에게 최종적으로 이벤트 메시지를 전송한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post-img/real-time-service/socketio-clustring.png&quot; alt=&quot;socketio-clustring&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그림 5. 클러스터링 구성도&lt;/p&gt;

&lt;h3 id=&quot;worker의-sticky-session-처리&quot;&gt;Worker의 Sticky Session 처리&lt;/h3&gt;

&lt;p&gt;스케일 아웃 된 서버에 client가 접속할 때 마다 서버를 달리하여 접속하게 되면 세션문제를 마주하게 된다. 그래서 일관성있게 지정된 서버에만 접속 되도록 Sticky Session을 보통 L4같은 로드밸런서 장비가 해주게 되는데. 물리적인 서버는 로드밸런서가 처리해 준다고 하지만 문제는 node cluster로 생성한 worker들이다. 1대의 물리 서버에 worker들이 멀티프로세스로 동작하는 것은 사실 서버가 여러대 돌아가는 것이나 마찬가지 상황! worker들의 Sticky Session 처리도 오픈소스 모듈을 사용에 처리해주었다.(NodeJs 같은 특별한 경우가 아니면 필요 없을 수도….)&lt;/p&gt;

&lt;h2 id=&quot;wswebsocket가-아닌-http-이벤트-송신-api도-필요&quot;&gt;ws&lt;sup&gt;websocket&lt;/sup&gt;가 아닌 http 이벤트 송신 api도 필요!&lt;/h2&gt;

&lt;p&gt;Client는 Server와 websocket으로 connection을 유지하고 서로 통신하지만 http로 이벤트를 전송할 수 있는 기능도 필 수로  필요합니다.  &lt;strong&gt;client가 websocket으로 연결되어 있을 필요는 없고 event 발송만 하면 되는 경우도 필요&lt;/strong&gt;하고 수신은 websocket으로 송신은 restful api 처리 끝단에 http로 이벤트를 전송하는 방식으로 시스템을 구성 할 수도 있기 때문에 http 이벤트 전송 api도 구현 해야할 필요가 있습니다. 실제로 BROS 에서 콜센터 주문접수처리 하기 위해서 주문의 상세 화면을 보고 있는 경우 고객이 &lt;strong&gt;배민앱에서 주문 취소를 하게 되면 주문취소 api 끝단에 http로 주문 취소 이벤트를 송신&lt;/strong&gt;했고 콜센터 주문접수 화면에서는 바로 고객주문 취소 안내를 표시 했습니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// POST - http://webmsg.woowa.in/ridersorda로 요청이 들어오면&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/ridersorda'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// POST로 전송된 값들을 가져오고&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nameSpace&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'nameSpace'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;roomName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'roomName'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rcvEvtNm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'rcvEvtNm'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rcvData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'rcvData'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  
  &lt;span class=&quot;c1&quot;&gt;// websocket 이벤트로 전송&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nameSpace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;roomName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;emit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rcvEvtNm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rcvData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  
  &lt;span class=&quot;c1&quot;&gt;// http response 설정을 해주고 끝!&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Content-Type'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'application/json; charset=utf-8'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{'status':'ok','message':'성공'}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;코드 9. 이벤트 송신 http api&lt;/p&gt;

&lt;h2 id=&quot;서버를-띄어-놓긴-했다만-관리는-어떻게하나&quot;&gt;서버를 띄어 놓긴 했다만 관리는 어떻게하나…&lt;/h2&gt;

&lt;p&gt;서버를 만들어서 띄어 놓긴 했지만 서버에 대한 관리가 필요했다.&lt;strong&gt;(이런 부분때문에 유료 서비스를 사용하는 것이..)&lt;/strong&gt; 일단 서버에 접속된 &lt;strong&gt;Namespace/Room별 접속한 클라이언트 현황&lt;/strong&gt;이 필요 했고. &lt;strong&gt;서버의 cpu/memory 등의 정보&lt;/strong&gt;등이 필요했다. 그리고 서버에서 &lt;strong&gt;오류가 발생했거나 멈췄을 경우 즉각적인 Notification&lt;/strong&gt;이 필요했다.&lt;/p&gt;

&lt;h3 id=&quot;서버-현황-데이터들은-redis에-저장-관리&quot;&gt;서버 현황 데이터들은 Redis에 저장 관리&lt;/h3&gt;

&lt;p&gt;앞서 말한 것 처럼 &lt;strong&gt;접속한 Client의 수와 이름 과 Room 리스트 데이터들은 각각의 worker 프로세스에서 공유 되지 못하고 따로 관리가 되기 때문에 이런 관리 데이터들은 1곳에 저장하고 조회 할 필요성&lt;/strong&gt;이 생겼다. 또한 &lt;strong&gt;채팅 기능에서 서로 간 대화 메시지들이 보관되어야 할 저장소&lt;/strong&gt;도 필요했다. Clustering 구성시에 Redis를 사용하고 있었기 때문에 Redis를 활용하여 데이터들을 저장하고 사용했고 Client들이 접속 및 Room에 join/out 하거 할때 Redis에 정보를 update했고 실시간 이벤트로 모니터링 페이지에 전송했다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post-img/real-time-service/socket-server-monitor.png&quot; alt=&quot;socket-server-monitor&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그림 6. 소켓 서버 현황 페이지&lt;/p&gt;

&lt;h3 id=&quot;오류가-발생하면-이메일로-바로-오류-내용-전송&quot;&gt;오류가 발생하면 이메일로 바로 오류 내용 전송&lt;/h3&gt;

&lt;p&gt;사실 이부분은 유료 APM 서비스를 사용한다면 바로 해결될 부분이지만 (개발 당시는 사용하지 않았다.. 역쉬 돈이 쵝오!) 그렇지 않는 경우 필수로 오류상황에 대한 피드팩을 즉각적으로 받아야 할 필요가 있다. socket.io server를 개발 할 당시에는 winston 모듈을 사용하여 error 레벨의 로그가 남겨지거나 exception이 발생 했을 경우 설정해놓은 이메일로 바로 전송 되도록 했다.&lt;/p&gt;

&lt;h2 id=&quot;socket-서버에서-발행-했던-이슈들&quot;&gt;Socket 서버에서 발행 했던 이슈들&lt;/h2&gt;

&lt;p&gt;개발하면서 다양한 문제들을 접했는데 client 수가 낮은 데도 cpu 100%로 서버마비를 겪은 적도 있고 redis는 메모리 저장소이지만 메모리데이터를 파일에 백업을 하는데 백업옵션에 문제가 생겨오류가 발생 했던 일, IE 브라우저에서 접속한 Client가 창이 닫혔을 경우 disconnected를 서버가 인지하지 못한 경우등등을 이야기 하고자 한다.&lt;/p&gt;

&lt;h3 id=&quot;서버-cpu-100&quot;&gt;서버 CPU 100%&lt;/h3&gt;

&lt;p&gt;클라이언트가 많지 않은 상황이였는데 서버접속이 되지 않았다. 서버가 죽은 것은 아니였지만 이상하게 CPU 100% 상태였고 원인은 바로 NodeJs 특징인 Single Thread 기반의 Non-Blocking I/O 에서 비동기 이벤트 loop의 가장 적인 sync한 로직 처리 때문에 발생했다. 로직을 sync 하게 처리하게 되면 로직이 완료 될 때가지 block이 발생하게 되고 다음 처리 로직은 대기하게 된다(비동기 처리의 자세한 내용은 &lt;a href=&quot;http://www.nextree.co.kr/p7292/&quot;&gt;링크클릭&lt;/a&gt;) 비동기 처리를 한 이유는 Redis에서 namespace/room/clientAccount 등의 정보를 저장해놓고 가져올 때 처리한 로직 때문이였다. &lt;strong&gt;nodejs 비동기 이기 때문에 for loop가 일반적인 동작순서로 수행되지 않는다.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;someFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    	&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;               
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 예상결과&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 1,2,3&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 실제결과&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 3,3,3 이건 뭥미?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;코드 10. nodejs loop 동작&lt;/p&gt;

&lt;p&gt;이러한 특징을 해결하기 위해 async 모듈을 사용하여 for loop를 sync 하게 처리 하도록 했지만 결국 문제를 일으키고 말았다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;waterfall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;waterfallCB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;// 1.모든 클라이언트를 가져오고&lt;/span&gt;
   &lt;span class=&quot;nx&quot;&gt;redisClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'SocketIo^All_Client^*'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nspsarr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;                                              		&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEachOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nspsarr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nspsVal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nspsKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;forEachOfCB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;                                                   
       &lt;span class=&quot;nx&quot;&gt;redisClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hgetall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'SocketIo^All_Client^'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;room&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;             
         &lt;span class=&quot;nx&quot;&gt;forEachOfCB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;  
       &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	     &lt;span class=&quot;nx&quot;&gt;waterfallCB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  
     &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;   
   &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;waterfallCB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 2.모든 접속 계정을 가져오고&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;redisClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'SocketIo^Account'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;allsocketInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;connectCnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;waterfallCB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;waterfallCB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 3. 모든 socket id를 가져온다음&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;redisClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'SocketIo^SocketId^*'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;socketIds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;allsocketInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;accountCnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;socketIds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;waterfallCB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 적절하게 조합한 데이터를 만든 후 리턴&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;allsocketInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clientInfo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;allsocketInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;roomCnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;allsocketInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;roomList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;allsocketInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;코드 11. 중첩 loop sync 하게 처리하기 위해 async라는 모듈 사용&lt;/p&gt;

&lt;p&gt;redis에 저장된 서버 현황 데이터를 가져와서 적절하게 조합하기 위해 for loop 가 여러번 사용 되었는데 &lt;strong&gt;async라는 모듈을 사용하면  loop가 수행된 후 결과를 순차적으로 전달함으로 써 sync 하게 처리&lt;/strong&gt; 할 수 있었지만 사용률이 증가하면서 &lt;strong&gt;성능문제가 발행&lt;/strong&gt;했고 문제의 해결은&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;되도록 async모듈을 사용한 loop를 처리하지 않는다.&lt;strong&gt;(sync하게 처리하여 block상황을 만들지 않는다)&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;redis의 데이터 구조를 단순화 한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;redis는 string, list, set, hash 등의 key/value 구조의 데이터 타입을 지원하므로 RDB 스타일의 복잡한 계층구조로 데이터를 저장하게 되면 데이터를 가져와 조합하기 위해서 복잡한 처리를 하게 되므로 처음 부터 제공되는 데이터 타입에 잘 맞추어 데이터를 설계하고 저장하면 불필요한 for loop문을 줄일 수 있다.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;redis-파일저장-오류&quot;&gt;Redis 파일저장 오류&lt;/h3&gt;

&lt;p&gt;socket 서버의 namespace/room/account/socketid 관리 데이터들은 서버의 현황 데이터기 때문에 사실상 file로 백업 될 필요가 없지만 Chatting시 채팅에 입장 후 재입장 시 대화 내용을 다시 보여 줘야 했기 때문에 redis가 재부팅 되거 나 하는 경우에도 영구적으로 기록 되어 있어야 했다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post-img/real-time-service/bros-chatting.png&quot; alt=&quot;bros-chatting&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그림 7. 채팅기능&lt;/p&gt;

&lt;p&gt;&lt;em&gt;redis에서 파일 저장 시  여러가지 옵션들이 있는데 &lt;strong&gt;stop-writes-on-bgsave-error&lt;/strong&gt; 옵션이 &lt;strong&gt;yes&lt;/strong&gt;로 되어 있는경우 파일로 저장하다가 오류가 발생하면 redis의 메모리에 데이터 저장 자체가 안되게 되서 오류를 발생 시킨다 &lt;strong&gt;no&lt;/strong&gt; 변경하게 되면 메모리에 저장하는 행위는 파일 저장 오류과 관계없이 계속 수행하게 된다.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;이처럼 redis의 옵션에 따른 예상치 못한 오류때문에 socket server에 오류가 발생 하였고 옵션변경으로 문제를 해결했지만 redis 서버자체의 옵션에 대한 정보도 알아놓을 필요가 있다.&lt;/p&gt;

&lt;h3 id=&quot;ie에서-disconnect를-인식-하지-못하는-문제&quot;&gt;IE에서 disconnect를 인식 하지 못하는 문제&lt;/h3&gt;

&lt;p&gt;IE에서 Browser 창을 닫는 경우 &lt;strong&gt;서버에서 client가 disconnect된 것을 인식 하지 못해 서버측에서 해당 client의 disconnect 처리를 하지 못 하였고 서버 측 disconnect 이벤트에 구현 되어 있던 데이터 처리가 제대로 되지 않아 서버 현황데이터에서 client가 살아 있는 것으로 표시&lt;/strong&gt; 되었다. client sdk에서 세팅값을 추가하면 해결되는 문제 였다. 여기서 꼭 짚고 넘어가야 할 부분이 있다. 유로 서비스 또는 오픈소스 라이브러리들은 기본적으로 client sdk를 제공하는데 물론 오픈소스 라이브러리는 서버를 개발 해야 하지만 기본적으로 둘다 &lt;strong&gt;안정적으로 connection 관리를 해주고  서버주소, 옵션값 connection, reconnection, connection interval, error 핸들링, 이벤트 전송/수신 등등의 메소드를 제공&lt;/strong&gt;합니다. 개발자는 제공하는 메소드들만 잘 사용하면 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;javascript WebSocket 객체가 onopen, onclose, onerror, onmessage 등의 기본 메소드들을 제공하지만&lt;/em&gt;&lt;/strong&gt;  WebSocket 객체로 client를 &lt;em&gt;쌩&lt;/em&gt;으로 개발 하게 된다면 &lt;strong&gt;connection 관리가 불안하거나 장애를 경험하면서  안정적이 되어 가는 과정을 겪을 수 있을 수도 있습니다.&lt;/strong&gt; 선택은 각자의 몫이지만 실시간 이벤트 서버를 사용해야 한다면 &lt;strong&gt;최대한 안정성이 높은 유료서비스를 선택 하고 차선은 오픈소스라이브러리를 사용&lt;/strong&gt;하여 개발 “쌩”으로 개발 하는 것은 다시한번 고려 해보아야 됩니다…&lt;/p&gt;

&lt;h2 id=&quot;끝으로&quot;&gt;끝으로..&lt;/h2&gt;

&lt;p&gt;실시간 서비스를 개발 하게 된다면 &lt;strong&gt;중요하게 고려해야될 부분은 Browser의 성능이다&lt;/strong&gt; 일반적인 웹페이지에서는 그렇게 와닫는 문제는 아니지만 &lt;strong&gt;실시간 서비스는 반드시  Browser의 성능과 마주하게 된다&lt;/strong&gt;. 그리고 &lt;strong&gt;실시간 이벤트 서버를 직접 개발 할 것인가 유료서비스를 사용할 것 인가를 결정하는 것&lt;/strong&gt;이다 &lt;strong&gt;서로 장단점을 충분히 고려 해서 최대한 안정적인 방향으로 결정&lt;/strong&gt;해야한다 그렇지 않으면 &lt;strong&gt;“배달건이 안보여요~”라는 피드백을 자주 들을 것이다&lt;/strong&gt; ㅠㅠ&lt;/p&gt;

&lt;p&gt;BROS 1.0을 개발 하면서 처음 마주하는 framework와 기술들을 사용하면서 어려움도 있었지만 &lt;strong&gt;무척 흥분된 상태로 일했었다.&lt;/strong&gt; 퇴근 하면 거의 매일 코딩했고 주말에도 거의 대부분 코딩했다.  회사를 다니면서 실무를 하면 &lt;strong&gt;현실적으로 이런 경험을 하기는 쉽지 않지만 몇가지 상황이 충족이 되었기 때문이였던 것 같다.&lt;/strong&gt;  일단 오프라인(라이더센터와 사업적인)이슈들에 더 집중 되면서 다음 개발 이슈들에 대한 &lt;strong&gt;기간적인 여유&lt;/strong&gt;가 약간 있었고, &lt;strong&gt;처음 접해보는 신기술?(그때 당시에는)&lt;/strong&gt;로 개발 하면서 흥미가 높았다. 또한 &lt;strong&gt;개발에 집중 할 수 있도록 챙김이님의 배려&lt;/strong&gt;의 가 있었기 때문이 였다. (늦게 나마 다시한번 회사와 동료들에게 감사 드립닷~~)&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>김찬정</name>
        
        
      </author>

      

      
        <category term="tech" />
      

      
        <summary type="html">배달의민족 배민라이더스의 배달처리시스템 개발기와 socket.io(websocket)를 이용한 실시간 시스템 구현 방법을 자세히 알아 봅니다.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">[마이크로서비스] 스프링 마이크로서비스 요약 정리 (spring microservice, msa)</title>
      <link href="https://kimchanjung.github.io/tech/2020/05/06/spring-microservice-summary/" rel="alternate" type="text/html" title="[마이크로서비스] 스프링 마이크로서비스 요약 정리 (spring microservice, msa)" />
      <published>2020-05-06T00:00:00+09:00</published>
      <updated>2020-05-06T00:00:00+09:00</updated>
      <id>https://kimchanjung.github.io/tech/2020/05/06/spring-microservice-summary</id>
      <content type="html" xml:base="https://kimchanjung.github.io/tech/2020/05/06/spring-microservice-summary/">&lt;p&gt;스프링마이크로서비스의 책내용중 마이크로서비스를 개발함에 있어 가장 중요한 개념과 원칙들 설계방법 부분을 예제 와 함께 정리&lt;/p&gt;

&lt;h1 id=&quot;마이크로서비스-스프링-마이크로서비스-정리&quot;&gt;[마이크로서비스] 스프링 마이크로서비스 정리&lt;/h1&gt;

&lt;p&gt;스프링 마이크로서비스 책 내용을 모두 요약 한 것이 아니라 개인 적으로 중요하다고 생각되는 개념만 정리 한 것임을 미리 밝혀 둡니다.&lt;/p&gt;

&lt;h2 id=&quot;마이크로서비스의-원칙&quot;&gt;마이크로서비스의 원칙&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;마이크로서비스를 설계하는 원칙들은 &lt;code class=&quot;highlighter-rouge&quot;&gt;좋은 마이크로서비스를 설계하고 구현하는데 필수&lt;/code&gt;적 이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;서비스하나에-책임도-하나&quot;&gt;서비스하나에 책임도 하나&lt;/h3&gt;
&lt;p&gt;객체지향에 등장하는 개념인 SOLID 원칙중 하나인 &lt;code class=&quot;highlighter-rouge&quot;&gt;단일책임원칙과 마찬가지로 하나의 마이크로서비스는 하나의 책임을 가져야&lt;/code&gt;한다. 그렇게 됨으로써 각 서비스간 낮은 결합도를 유지 할 수 있다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;하나의 책임이라는 의미가 중요한 듯 하다 하나의 기능이 아니라 하나의 책임 즉 배달과 주문이 있다고 한다면 배달은 배달과 관련된 기능만 수행한다. 배달 마이크로 서비스가 주문의 상태를 변경하거나 하는 기능이 포함되면 안된다는 의미다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;이 것은 객제관점에서 보아도 배달객체가 주문객제를 직접 변경하는 것 매우 부자연스럽다. 객체 관점에서도 필요할 때는 주문 객체에서 제공되는 주문상태 변경 메소드를 호출하여 주문객체에게 주문상태 변경해달라고 요청하는 모습처럼 마이크로 서비스도 하나의 객체단위로 보는 관점이 필요 하다고 본다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post-img/spring-microservice/spring-microservice-diagrams-monolithic-to-microservice.png&quot; alt=&quot;spring-microservice-diagrams-monolithic-to-microservice&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;마이크로서비스는-자율적&quot;&gt;마이크로서비스는 자율적&lt;/h3&gt;
&lt;p&gt;책 내용은 구구절절한데 &lt;code class=&quot;highlighter-rouge&quot;&gt;한마디로 하나의 단독 서비스 처럼 돌아갸야 된다는 이야기&lt;/code&gt;다. 웹서비스라면 하나의 웹서비스가 독립적으로 구동되는 형태로 생각하면 이해가 빠를 듯 하다.&lt;/p&gt;

&lt;h2 id=&quot;마이크로서비스의-경계-설정&quot;&gt;마이크로서비스의 경계 설정&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;마이크로 서비스의 경계 설정에 있어 만병 통치약은 없다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;마이크로서비스의-경계-설정-시-피해야-할-조건&quot;&gt;마이크로서비스의 경계 설정 시 피해야 할 조건&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;마이크로서비스간 낮은 응집도와 결합도를 유지 해야한다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;너무 많은 정보교환&lt;/li&gt;
  &lt;li&gt;너무 많은 동기적 요청, 응답&lt;/li&gt;
  &lt;li&gt;순환 의존 관계&lt;/li&gt;
  &lt;li&gt;트랜잭션 범위가 여러 마이크로서비스에 걸치지 않게 해야함&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;적절한-마이크로서비스-경계-설정-조건&quot;&gt;적절한 마이크로서비스 경계 설정 조건&lt;/h3&gt;

&lt;h4 id=&quot;자율적인-기능&quot;&gt;자율적인 기능&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;외부 기능에 대한 의존도가 낮다&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;배포-단위의-크기&quot;&gt;배포 단위의 크기&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;기능이 많은 서비스는 배포규모가 커진다&lt;/li&gt;
    &lt;li&gt;배포단위의 크기를 감당 가능한 수준으로 유지&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;분리하기-적합한-기능-또는-서브도메인&quot;&gt;분리하기 적합한 기능 또는 서브도메인&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;마이크로서비스 전환시 자원소모량, 소유 비용, 비즈니스 유용성, 유연성 등이 분석 기준이 된다&lt;/li&gt;
    &lt;li&gt;마이크로서비스로의 분리가 유용한 선택인지, 분석기준을 통하여 판단한다&lt;/li&gt;
    &lt;li&gt;검색 요청이 전체 리소스에 많은 부분을 차지하는 시스템이라면 분리 시 여러가지로 유리 하다&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;하나의-제품으로-생각을-해본다&quot;&gt;하나의 제품으로 생각을 해본다&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;경계 지어진 마이크로서비스가 하나의 제품으로 구성될 수 있는지의 관점에서 평가 해보자&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;동기와-비동기-선택기준&quot;&gt;동기와 비동기 선택기준&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;어느 하나의 방식만으로 시스템을 개발하는 것은 불가능, 장단점을 따져서 두방식을 적절히 조합 해야한다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;동기&quot;&gt;동기&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;사용자가 즉시 응답을 받아야 하는 서비스&lt;/li&gt;
    &lt;li&gt;마이크로서비스간 의존성을 높이는 단점&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;비동기&quot;&gt;비동기&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;즉시 응답 받지 않아도 되는 서비스&lt;br /&gt;
예) 이메일, 문자 발송, 포인트 서비스, 재고 갱신&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;마이크로-서비스의-과제&quot;&gt;마이크로 서비스의 과제&lt;/h2&gt;

&lt;h3 id=&quot;마이크로-서비스와-대규모-데이터&quot;&gt;마이크로 서비스와 대규모 데이터&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;주문 마이크로 서비스와 고객 마이크로서비스가 있다고 할 경우 고객별 주문 리스트를 가져와야할 경우에 대한 문제와 고려해 볼 방법들  결론 적으로 주문 - 고객을 조인쿼리로 가져올 수 없다는 문제에 대한 해결 방법&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;필요한-데이터를-미리-생성&quot;&gt;필요한 데이터를 미리 생성&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;즉 고객 별 주문 리스트를 가져오고 싶으면 각각의 마이크로 서비스에서 가져와 필요한 곳에 데이터를 생성(복제본) 해놓는 방법&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;단점은 데이터 중복문제&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;이 방법 없이 &lt;code class=&quot;highlighter-rouge&quot;&gt;조인쿼리를 사용할 수 없는 상황&lt;/code&gt;에서 두 마이크로 서비스의 &lt;code class=&quot;highlighter-rouge&quot;&gt;데이터를 리스트로 가져오는 방법은 경험상 정말 비즈니스 로직이 복잡&lt;/code&gt;해진다.&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;blockquote&gt;
      &lt;p&gt;이런 페이지들이 많다면 개&lt;code class=&quot;highlighter-rouge&quot;&gt;발리소스도 훨씬 많이 들어&lt;/code&gt;가고, 어떤 경우는 &lt;code class=&quot;highlighter-rouge&quot;&gt;특정 검색조건에 따라 리스트를 가져올 수 없는 경우&lt;/code&gt;도 발생한다.&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;blockquote&gt;
      &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;내 경험상 데이터 중복 문제가 단점이라고 이 방법 없이&lt;/code&gt; 여러 마이크로 서비스의 데이터를 &lt;code class=&quot;highlighter-rouge&quot;&gt;조인 없이 조인과 같은 결과를 내는 방법&lt;/code&gt;으로 개발을 하는 것은 정말 실&lt;code class=&quot;highlighter-rouge&quot;&gt;수 하는 것이라고 조심스럽게 말해본다&lt;/code&gt;.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;복제본 데이터를 어떻게 구성할 것인가는 마이크로서비스를 어떻게 구성 했느냐에 따라 달라지므로 상황에 맞게 구성
    &lt;ul&gt;
      &lt;li&gt;통합적인 통계 관련 데이터를 제공 하는 서비스가 있다고 한다면 &lt;code class=&quot;highlighter-rouge&quot;&gt;각 마이크로 서비스로 부터 지속적으로 데이터의 생성 변화를 입수하여 데이터 웨어하우스&lt;/code&gt; 같은 형태로 관리한다.&lt;/li&gt;
      &lt;li&gt;입수 방식은 &lt;code class=&quot;highlighter-rouge&quot;&gt;이벤트 소싱(event pub/sub) 방식&lt;/code&gt;이 대표적, 메시지 큐 같은 여러 서비스를 활용, rabbitMQ, kafka 등등&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;의존-관계-관리&quot;&gt;의존 관계 관리&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;서비스 경계를 적절하게 설정해서 의존성을 낮춘다.&lt;/li&gt;
  &lt;li&gt;의존성을 가능한 느슨하게 설계해서 변경에 대한 영향을 낮춘다.&lt;/li&gt;
  &lt;li&gt;비동기 통신 방식을 통해 서비스간 상호작용이 일어나도록 설계.&lt;/li&gt;
  &lt;li&gt;서킷 브레이커 같은 패턴을 사용하여 의존성 문제의 전파를 차단.&lt;/li&gt;
  &lt;li&gt;의존 관계 그래프 같은 시각화를 통하여 의존 관계를 모니터링.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;사실 위 조건들이 마이크로 서비스 설계시 가장 어려운 문제 인 듯 하다.&lt;br /&gt;
모놀리식 서비스 와 마이크로 서비스 동기와 비동기 등이 어느 한쪽을 선택하면 이익을 얻는 대신 반드시 손해를 보게되는 trade-off 관계 이기 때문이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;마이크로서비스로의-전환-계획&quot;&gt;마이크로서비스로의 전환 계획&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;실제 책에서 예제로 나오는 항공사 예약 시스템 대신 본인이 주로 다뤄 왔단 배달 도메인을 예로 설명 합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;전환-관점에서-제기되는-몇가지-중요한-질문&quot;&gt;전환 관점에서 제기되는 몇가지 중요한 질문&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;마이크로서비스 &lt;code class=&quot;highlighter-rouge&quot;&gt;경계 식별&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;마이그레이션을 위한 마이크로서비스 &lt;code class=&quot;highlighter-rouge&quot;&gt;우선순위 지정&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;전화 단계에서의 &lt;code class=&quot;highlighter-rouge&quot;&gt;데이터 동기화&lt;/code&gt; 처리&lt;/li&gt;
  &lt;li&gt;이전 UI와 새로운 UI를 다루기 위한 &lt;code class=&quot;highlighter-rouge&quot;&gt;사용자 인터페이스 통합&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;새로운 시스템에서의 &lt;code class=&quot;highlighter-rouge&quot;&gt;참조 데이터&lt;/code&gt; 처리&lt;/li&gt;
  &lt;li&gt;비즈니스 범위기 제대로 유지될 수 있게 보장하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;테스트 전략&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;마이크로 서비스의 기능. 프레임워크 등과 같은 마이크로서비스 개발을 위한 전제 조건 확인&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;첫번째---마이크로서비스의-경계-식별&quot;&gt;첫번째 - 마이크로서비스의 경계 식별&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;가장 먼저 해야 할 일&lt;/code&gt;은 모놀리식 서비스에서 마이크로서비스로 전환 하고자 하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;도메인의 경계를 식별&lt;/code&gt;하는 것&lt;/li&gt;
  &lt;li&gt;모놀리식 서비스를 &lt;code class=&quot;highlighter-rouge&quot;&gt;분해 해본다는 관점&lt;/code&gt;으로 접근&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;두번째---의존-관계-분석&quot;&gt;두번째 - 의존 관계 분석&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;첫번째 단계에서 뽑아낸 &lt;code class=&quot;highlighter-rouge&quot;&gt;마이크로서비스 후보들 간의 의존성을 분석&lt;/code&gt;한다.&lt;/li&gt;
  &lt;li&gt;분석한 의존성을 바탕으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;의존 관계 그래프를 그려&lt;/code&gt;본다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post-img/spring-microservice/dependency-diagram.png&quot; alt=&quot;dependency-diagram&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;세번째---면밀한-의존-관계-분석&quot;&gt;세번째 - 면밀한 의존 관계 분석&lt;/h3&gt;
&lt;h4 id=&quot;이벤트-소싱에-유리한-케이스&quot;&gt;이벤트 소싱에 유리한 케이스&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/assets/post-img/spring-microservice/spring-microservice-get-delivery-list.png&quot; alt=&quot;spring-microservice-get-delivery-list&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;배달 운영에 관한 각종 현황 정보 조회 및 모니터링 가능한 배달운영관리 시스템과 배달을 분리 할 수 있다.&lt;/li&gt;
    &lt;li&gt;위 그림 처림 배달 운영 시스템이 배달을 직접 가져오는 대신 배달의 생성 및 상태 변경을 배달 모듈이 이벤트를 발행하고, 배달운영관리 시스템은 배달의 변경사항을 구독한다.&lt;/li&gt;
    &lt;li&gt;이런 시나리오는 배달, 라이더, 배달팁 모듈들에서 변경사항 이벤트를 발행하고, 배달 운영 관리 시스템음 각 모듈의 변경사항을 구독하여 관리하는 방식으로 여러 모듈들에게 적용할 수 있다.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;이벤트-소싱에-불리한-케이스1&quot;&gt;이벤트 소싱에 불리한 케이스(1)&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/assets/post-img/spring-microservice/spring-microservice-get-delivery-list-from-calculator.png&quot; alt=&quot;spring-microservice-get-delivery-list-from-calculator&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;라이더에게 지급할 배달팁 정산을 위해서 정산 시스템 배달 목록을 가져오는데  월단위, 주단위, 일단위 정산이 일반적이므로 모든 배달 데이터는 사실상 필요가 없다&lt;/li&gt;
    &lt;li&gt;이벤트 소싱으로 구성 된다면 정산 시스템은 항상 모든 배달건의 상태 변경에 대한 이벤트를 구독 받아 처리 해야하므로 불필요한 자원 낭비가 될 수 있다.&lt;/li&gt;
    &lt;li&gt;차라리 정산 주기에 따라 1번씩 해당 하는 정산 기간의 배달 데이터를 공급 배달 모듈로 부터 공급 받는 것이 결과적으로 유리하다.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;이벤트-소싱에-불리한-케이스2&quot;&gt;이벤트 소싱에 불리한 케이스(2)&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/assets/post-img/spring-microservice/spring-microservice-get-delivery-list-from-crm.png&quot; alt=&quot;spring-microservice-get-delivery-list-from-crm&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;고객응대 시스템에서 발생하는 배달건의 고객응대 건수는 발생하는 배달 건수에 비해 현저하게 적은 건수를 가진다. (배달이 100건이라고 한다면 배달불만 접수는 10건이라고 한다면)&lt;/li&gt;
    &lt;li&gt;이런 경우 고객응대 시스템에서 배달건마다 발생하는 모든 이벤트를 구독받아 배달 데이터를 유지하고 있는 것은 사실상 리소스 낭비에 해당한다.&lt;/li&gt;
    &lt;li&gt;배달건에 대한 고객 불만 사항이 발생 할때 차라리 직접 배달을 가져오는 편이 유리하다.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;동기화-되어야-할-서비스들-사이에서의-이벤트소싱&quot;&gt;동기화 되어야 할 서비스들 사이에서의 이벤트소싱&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post-img/spring-microservice/spring-microservice-delivery-dashboard-direct.png&quot; alt=&quot;spring-microservice-delivery-dashboard-direct&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;배달 현황 및 각종 정보를 관리하고 실시간 모니터링하는 서비스가 있다고 한다면 &lt;code class=&quot;highlighter-rouge&quot;&gt;지속적으로 각각의 마이크로서비스로 분리된 시스템&lt;/code&gt;에서(배달, 라이더, 배달로) 주기적으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;데이터를 직접 가져오는 방식&lt;/code&gt;이 될 것이다.&lt;/li&gt;
  &lt;li&gt;위 그림과 같은 직접 적인 방식에서 아래 그림과 같은 &lt;code class=&quot;highlighter-rouge&quot;&gt;이벤트 소싱 방식으로 전환&lt;/code&gt; 할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post-img/spring-microservice/spring-microservice-delivery-dashboard-event-sourcing.png&quot; alt=&quot;spring-microservice-delivery-dashboard-event-sourcing&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;위 그림과 같은 이벤트 소싱 방식으로의 전환이 각 시스템간 의존성을 낮춘다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;동기화-되어야-할-서비스들-사이에서의-이벤트소싱-문제점&quot;&gt;동기화 되어야 할 서비스들 사이에서의 이벤트소싱 문제점&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/assets/post-img/spring-microservice/spring-microservice-wait-delivery-event-sourcing.png&quot; alt=&quot;spring-microservice-wait-delivery-event-sourcing&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;배달을 라이더에게 배차했을 경우 배차 대기 목록 서비스에서 배달상태변경 이벤트를 비동기 이벤트로 구독받아 변경사항을 반영하고 있다.&lt;/li&gt;
    &lt;li&gt;라이더는 배차대기 목록을 보고 자신이 배달하고 싶은 배달건을 가져온다.&lt;/li&gt;
    &lt;li&gt;이런 시나리오에서는 배차대기 배달목록이 비동기로 유지될 경우 배달 상태가 불일치하는 경우가 발생할 수 도 있다.&lt;/li&gt;
    &lt;li&gt;이런경우 라이더는 이미 다른 라이더에게 배차가된 배달건을 가져올 수도 있다.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;마이크로서비스간-유효성을-확인-해야하는-경우&quot;&gt;마이크로서비스간 유효성을 확인 해야하는 경우&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/assets/post-img/spring-microservice/spring-microservice-validate-delivery.png&quot; alt=&quot;spring-microservice-validate-delivery&quot; /&gt;&lt;br /&gt;
배차의 경우 배달건을 배차 할 수 있는 배달건인지 유효성을 다음과 같이 확인 할 것이다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;이 배달건은 미배차 배달 건인가?&lt;/li&gt;
    &lt;li&gt;이 배달건은 금일 발생한 배달 건인가?&lt;/li&gt;
    &lt;li&gt;이 배달건은 해당 배달권역의 배달건 인가?&lt;/li&gt;
    &lt;li&gt;기타 등등&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;이런 경우는 아래 그림과 같이 복잡한 유효성을 확인 하는 것 보다 적적한 유효성을 기존으로 미 배차 배달건 목록을 배달 &lt;code class=&quot;highlighter-rouge&quot;&gt;마이크로시스템에서 관리하여 타 시스템에게 제공하는 편이 유리&lt;/code&gt;할 것이다.&lt;br /&gt;
&lt;img src=&quot;/assets/post-img/spring-microservice/spring-microservice-management-wait-delivery-list.png&quot; alt=&quot;spring-microservice-management-wait-delivery-list&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;마이그레이션을-위한-마이크로서비스-우선순위-지정&quot;&gt;마이그레이션을 위한 마이크로서비스 우선순위 지정&lt;/h3&gt;
&lt;p&gt;타이틀이 애매한데 풀어서 이야기 하자면 모놀리식 시스템에서 마이크로서비스로 분리하여 전환하고자 초기 설계 이후 도출된 각 마이크로서비스들 중 어떤 서비스를 먼저 전환 해야하는지에 대한 이야기로 이해하면 될 듯 하다. &lt;code class=&quot;highlighter-rouge&quot;&gt;우선순위를 매기는 기준에 대한 설명&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;의존관계&quot;&gt;의존관계&lt;/h4&gt;
&lt;p&gt;의존관계가 없거나 적은 서비스는 마이크로서비스로의 전환이 쉬운 반면, &lt;code class=&quot;highlighter-rouge&quot;&gt;의존관계가 매우 복잡하고 높은 서비스는 위험성과 전환 과정이 어렵&lt;/code&gt;다.&lt;/p&gt;

&lt;h4 id=&quot;트랜잭션-크기요청이-많고-적음&quot;&gt;트랜잭션 크기(요청이 많고 적음)&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;트랜잭션의 크기가 큰 시스템을 마이크로서비스로 전환&lt;/code&gt;하는 것은 기존 레거시 시스템의 부하를 줄여주기 때문에 &lt;code class=&quot;highlighter-rouge&quot;&gt;유지보수 관점에서 보았을 때 큰 가치&lt;/code&gt;가 있다. 그러나 &lt;code class=&quot;highlighter-rouge&quot;&gt;위험부담이 크다는 단점&lt;/code&gt;도 있다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;어떤 위험부담이 있는지에 대한 내용이 책에 없다…..&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;리소스-이용율&quot;&gt;리소스 이용율&lt;/h4&gt;
&lt;p&gt;서버자원을 많이 사용하는 서비스를 마이크로서비스로 전환하는 것은 기존 레거시시스템에 남아 있는 기능들이 더 잘 작동할 수 있다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;개념은 트랜잭션 크기 이야기와 일맥상통한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;복잡도&quot;&gt;복잡도&lt;/h4&gt;
&lt;p&gt;덜 복잡한 시스템이 마이크로서비스로의 전환이 쉽다(당연한 이야기 아닌가??)&lt;/p&gt;

&lt;h4 id=&quot;사업적-중요도&quot;&gt;사업적 중요도&lt;/h4&gt;
&lt;p&gt;저자는 사업적 중요도가 높은 서비스를 마이크로서비스로의 전환하는 것이 좋다고하는데 이유설명이 없어서 아쉽다. 아마도 먼저언급한 여러가지 유용한 이점들이 사업적 중요도가 높은 서비스에게 적용되기 때문이라는 이유 일 듯 싶다.&lt;/p&gt;

&lt;h4 id=&quot;변경속도&quot;&gt;변경속도&lt;/h4&gt;
&lt;p&gt;개발적인 변경이 빈번하게 이루어지는 서비스가 그렇지 않은 서비스보다 마이크로서비스로의 전환에 있어 우선순위가 높다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;역시나 책내용에  근거가 없다…&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;혁신&quot;&gt;혁신&lt;/h4&gt;
&lt;p&gt;책 내용을 풀이하자면 서비스가 &lt;code class=&quot;highlighter-rouge&quot;&gt;혁신적으로 변경되는 서비스들을 마이크로서비스로 전환하여 운영&lt;/code&gt;하는 것이 &lt;code class=&quot;highlighter-rouge&quot;&gt;더 유리&lt;/code&gt;하다는 이야기다 서비스를 혁신적으로 변경해야할 때 &lt;code class=&quot;highlighter-rouge&quot;&gt;기존 레거시 시스템에서 혁신적으로 변경하는 것이 더 어렵&lt;/code&gt;다고 이야기 하고 있다.&lt;/p&gt;

&lt;h3 id=&quot;마이크로서비스로의-전환-중-레거시시스템과의-데이터-동기화&quot;&gt;마이크로서비스로의 전환 중 레거시시스템과의 데이터 동기화&lt;/h3&gt;
&lt;p&gt;책 내용을 대략 풀이 하자면 전체 모놀리식 시스템을 한번에 모두 마이크로서비스로 전환하는 시나리오는 현실적으로 어렵기도 하고, 레거시 시스템에서 하나씩 분리하여 &lt;code class=&quot;highlighter-rouge&quot;&gt;점진적으로 마이크로서비스로 전환하는 과정&lt;/code&gt;에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;레거시 시스템과 마이크로 시스템간의 데이터 동기화를 어떻게 할 것&lt;/code&gt;인가에 대한 이야기다.&lt;/p&gt;

&lt;h4 id=&quot;예를-들어보자면&quot;&gt;예를 들어보자면&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;배달과 라이더가 같은 시스템에 함께 존재 하였는데 라이더관리 시스템으로 분리&lt;/li&gt;
    &lt;li&gt;분리된 라이더 관리 시스템에서는 라이더 정보를 등록,수정,삭제 관리한다.&lt;/li&gt;
    &lt;li&gt;기존 레거시 시스템에서는 라이더정보 등록,수정,삭제는 제거 되고 라이더 관리 시스템에서 처리하고 있다.&lt;/li&gt;
    &lt;li&gt;하지만 기존 레거시 시스템에서는 라이더와 배달건을 조회하는 목록 페이지가 여전히 존재한다.&lt;/li&gt;
    &lt;li&gt;이 경우 여전히 레거시 시스템의 DB에서 라이더 정보를 가져오는 로직이 남아 있기 때문에 라이더 관리 시스템으로 이전 되기 전까지는 두 시스템 사이에 라이더 데이터는 동기화 되어야한다.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;해결책&quot;&gt;해결책&lt;/h4&gt;
&lt;p&gt;이벤트 소싱을 이용해서 해결, 즉 &lt;code class=&quot;highlighter-rouge&quot;&gt;라이더 관리 시스템에서 라이더 정보의 생성, 수정, 삭제 이벤트를 발행&lt;/code&gt;하고 기존 &lt;code class=&quot;highlighter-rouge&quot;&gt;레거시 시스템은 구독하여 로컬 DB에 반영&lt;/code&gt;하도록 한다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;[사족] 그런데 나중에 모두 라이더 관리 마이크로서비스로 전환 되더라도 대규모 데이터를 조인 없이 가져와야될 상황이라면 어짜피 이벤트소싱으로 구성해야되는 것은 마찬가지 이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;참조-데이터-관리&quot;&gt;참조 데이터 관리&lt;/h3&gt;
&lt;p&gt;책에서 이야기하는 참조 데이터가 어떤 데이터를 의미하는지 명확한 설명이 없어서 조금 애매한 부분이다. 마이크로서비스단위의 큰 도메인 데이터가 아니라(배달, 주문, 라이더 같은) 여러 마이크로서비스에서 필요에 의해 참조해야는 데이터 들이 아닌가 추측해본다.&lt;/p&gt;

&lt;p&gt;예를 들자면 배달, 라이더 둘다 필요한 배달팁 정책 같은 데이터를 의미하는 것 일 수도 있다.&lt;/p&gt;

&lt;p&gt;배달을 생성 할때 배달팁을 참조하여 배달가격을 책정하기에 필요하다. 이런 경우 마이크로서비스에서 기존레거시를 직접 호출하는 것은 기존 레거시 시스템에 트랜잭션이 몰릴수 있기 때문에 지양하라고 한다.&lt;/p&gt;

&lt;h4 id=&quot;해결책-1&quot;&gt;해결책&lt;/h4&gt;
&lt;h5 id=&quot;이벤트소싱-방식&quot;&gt;이벤트소싱 방식&lt;/h5&gt;
&lt;p&gt;참조 데이터를 처리하는 마이크로서비스를 따로 만들어 각 마이크로 서비스에 제공하는 방식을 추천하는데 &lt;code class=&quot;highlighter-rouge&quot;&gt;이벤트소싱 방식은 동기화 문제가 있을 수 있다&lt;/code&gt;. 배달팁이 변경 되고 비동기 이벤트를 발행하고 배달 마이크로서비스에서 배달 생성시 아직 &lt;code class=&quot;highlighter-rouge&quot;&gt;변경된 이벤트를 수신 받지 못한 상태&lt;/code&gt;에서 변경전 배달료로 배달이 생성될 수도 있다는 이야기다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post-img/spring-microservice/spring-microservice-diagrams-refer-data-event-sourcing.png&quot; alt=&quot;spring-microservice-diagrams-refer-data-event-sourcing&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;인메모리-데이터-그리드&quot;&gt;인메모리 데이터 그리드&lt;/h5&gt;
&lt;p&gt;참조 데이터 마이크로서비스는 참조데이터의 변경사항을 인메모리 데이터 그리드에 반영 처리하고 각 마이크로서비스들은 인메모리 데이터 그리드를 참조한다. 이 방법은 &lt;code class=&quot;highlighter-rouge&quot;&gt;데이터 동기화에 대한 문제를 해결&lt;/code&gt;한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;인메모리 데이터 그리드는 데이터를 메모리로 관리한다는 점에서 REDIS인가? 하고 생각 할 수 있지만 REDIS와는 또 다른 개념이 적용된 메모리 저장소 인 듯 하다. 자세한 개념은 구글링을 통해서 찾아보면 도움이 될 듯 하다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post-img/spring-microservice/spring-microservice-diagrams-refer-data-in-memory-data-grid.png&quot; alt=&quot;spring-microservice-diagrams-refer-data-in-memory-data-grid&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;마무리&quot;&gt;마무리&lt;/h3&gt;
&lt;p&gt;스프링 마이크로서비스의 책 내용중 &lt;code class=&quot;highlighter-rouge&quot;&gt;마이크로서비스를 설계 하기 위해서 가장 중요한 원칙과 설계방법 장단점&lt;/code&gt; 등의 내용만 정리해 보았습니다.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>김찬정</name>
        
        
      </author>

      

      
        <category term="tech" />
      

      
        <summary type="html">스프링마이크로서비스의 책내용중 마이크로서비스를 개발함에 있어 가장 중요한 개념과 원칙들 설계방법 부분을 예제 와 함께 정리</summary>
      

      
      
    </entry>
  
</feed>
